give @s minecraft:written_book{title: "The GNU C Reference Manual", author: "GNU", resolved: 1b, pages: ["[{\"text\":\"The GNU C Reference \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nTHE GNU C REFERENCE \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n\\nTable of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n-   \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   \\n\\n\\n\\n\\n\\n\\n\\n-   1 Lexical \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   1.1 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   1.2 \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   1.3 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        -   1.3.1 Integer \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        -   1.3.2 Character \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        -   1.3.3 Real Number \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        -   1.3.4 String \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   1.4 \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   1.5 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   1.6 White \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n-   2 Data \\n\\n\\n\\n\\n\\n    -   2.1 Primitive Data \\n\\n\\n\\n\\n\\n        -   2.1.1 Integer \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        -   2.1.2 Real Number \\n\\n\\n\\n\\n\\n        -   2.1.3 Complex Number \\n\\n\\n\\n\\n\\n            -   2.1.3.1 Standard \"}]","[{\"text\":\"Complex Number \\n\\n\\n\\n\\n\\n            -   2.1.3.2 GNU Extensions for Complex Number \\n\\n\\n\\n\\n\\n    -   2.2 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        -   2.2.1 Defining \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        -   2.2.2 \"}]","[{\"text\":\"Declaring \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   2.3 \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        -   2.3.1 Defining \\n\\n\\n\\n\\n\\n\\n        -   2.3.2 Declaring Union \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n            -   2.3.2.1 Declaring Union Variables at \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n            -   2.3.2.2 Declaring \"}]","[{\"text\":\"Union Variables After \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n            -   2.3.2.3 Initializing Union \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        -   2.3.3 Accessing Union \\n\\n\\n\\n\\n\\n\\n\\n        -   2.3.4 Size of \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   2.4 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        -   2.4.1 Defining \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        -   2.4.2 Declaring Structure \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n            -   2.4.2.1 Declaring Structure Variables \"}]","[{\"text\":\"at \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n            -   2.4.2.2 Declaring Structure Variables After \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n            -   2.4.2.3 Initializing Structure \\n\\n\\n\\n\\n\\n\\n\\n        -   2.4.3 Accessing Structure \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        -   2.4.4 Bit \\n\\n\\n\\n\\n\\n\\n        -   2.4.5 Size of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   2.5 \\n\\n\\n\\n\\n\\n\\n        -   2.5.1 Declaring \\n\\n\\n\\n\\n\\n\\n        -   2.5.2 \"}]","[{\"text\":\"Initializing \\n\\n\\n\\n\\n\\n\\n        -   2.5.3 Accessing Array \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        -   2.5.4 Multidimensional \\n\\n\\n\\n\\n\\n\\n        -   2.5.5 Arrays as \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        -   2.5.6 Arrays of \\n\\n\\n\\n\\n\\n\\n        -   2.5.7 Arrays of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   2.6 \\n\\n\\n\\n\\n\\n\\n\\n\\n        -   2.6.1 Declaring \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        -   2.6.2 Initializing \\n\\n\\n\\n\\n\\n\\n\\n\\n        -   2.6.3 Pointers to \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        -   2.6.4 Pointers to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   2.7 Incomplete \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   2.8 Type \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   2.9 Storage Class \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   2.10 Renaming \\n\\n\\n\\n\\n\\n-   3 Expressions and \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   3.1 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   3.2 Assignment \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   3.3 Incrementing and \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   3.4 \"}]","[{\"text\":\"Arithmetic \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   3.5 Complex \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   3.6 Comparison \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   3.7 Logical \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   3.8 Bit \\n\\n\\n\\n\\n\\n\\n\\n\\n    -   3.9 Bitwise Logical \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   3.10 Pointer \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   3.11 The sizeof \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   3.12 Type \\n\\n\\n\\n\\n\\n    -   3.13 Array \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   3.14 Function Calls as \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   3.15 The Comma \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   3.16 Member Access \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   3.17 Conditional \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   3.18 Statements and Declarations in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   3.19 \"}]","[{\"text\":\"Operator \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   3.20 Order of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        -   3.20.1 Side \\n\\n\\n\\n\\n\\n\\n\\n        -   3.20.2 Sequence \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        -   3.20.3 Sequence Points Constrain \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        -   \"}]","[{\"text\":\"3.20.4 Sequence Points and Signal \\n\\n\\n\\n\\n\\n\\n\\n\\n-   4 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   4.1 \\n\\n\\n\\n\\n\\n\\n    -   4.2 Expression \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   4.3 The if \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   4.4 The switch \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   4.5 The while \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   4.6 The do \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   4.7 The for \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   4.8 \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   4.9 The Null \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   4.10 The goto \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   4.11 The break \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   4.12 The continue \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   4.13 The return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   4.14 The typedef \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n-   5 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   5.1 Function \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   5.2 Function \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   5.3 Calling \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   5.4 Function \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   5.5 Variable Length Parameter \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   5.6 Calling Functions Through Function \\n\\n\\n\\n\\n\\n\\n\\n\\n    -   5.7 The main \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   5.8 Recursive \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   5.9 Static \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   5.10 Nested \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n-   6 Program Structure and \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   6.1 Program \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   6.2 \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n-   7 A Sample \\n\\n\\n\\n\\n\\n\\n\\n    -   7.1 \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   7.2 \\n\\n\\n\\n\\n\\n\\n\\n\\n-   Appendix A \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   A.1 Basics of Integer \\n\\n\\n\\n\\n\\n\\n\\n\\n    -   A.2 Examples of Code Assuming Wraparound \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    -   A.3 Optimizations That Break Wraparound \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -   A.4 Practical Advice for \"}]","[{\"text\":\"Signed Overflow \\n\\n\\n\\n\\n\\n\\n    -   A.5 Signed Integer Division and Integer \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n-   GNU Free Documentation \\n\\n\\n\\n\\n\\n\\n\\n-   \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nNext: Preface, Up: (dir)   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nTHE GNU C REFERENCE \\n\\n\\n\\n\\n\\n\\n\\n\\nThis is the GNU C reference \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n  ----------------------------------- ---- \\n\\n\\n  • Preface:                               \\n  • Lexical Elements:                      \\n  • Data Types:                            \\n  • Expressions and Operators:             \\n  • \"}]","[{\"text\":\"Statements:                            \\n  • Functions:                             \\n  • Program Structure and Scope:           \\n  • A Sample Program:                      \\n  • Overflow:                              \\n  • GNU Free Documentation License:        \\n  • \"}]","[{\"text\":\"Index:                                 \\n  ----------------------------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Lexical Elements, Previous: Top, Up: Top   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThis is a reference manual for the C programming language as \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nby the GNU Compiler Collection (GCC). Specifically, this manual aims \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n-   The 1989 ANSI C standard, commonly known as \\n\\n\\n\\n\\n\\n-   The 1999 ISO C standard, commonly known as “C99”, to the extent \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    C99 is implemented by \\n\\n\\n\\n-   The current state of GNU extensions to standard \\n\\n\\nThis manual describes C89 as its baseline. C99 features and \\n\\n\\n\"}]","[{\"text\":\"\\nextensions are explicitly labeled as \\n\\n\\n\\n\\n\\n\\nBy default, GCC will compile code as C89 plus GNU-specific \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nMuch of C99 is supported; once full support is available, the \\n\\n\\n\\n\\n\\n\\n\\ncompilation dialect will be C99 plus GNU-specific extensions. (Some \\n\\n\"}]","[{\"text\":\"\\nthe GNU extensions to C89 ended up, sometimes slightly modified, \\n\\n\\nstandard language features in \\n\\n\\n\\n\\n\\n\\nThe C language includes a set of \"}]","[{\"text\":\"preprocessor directives, which are \\n\\n\\n\\n\\nfor things such as macro text replacement, conditional compilation, \\n\\n\\n\\nfile inclusion. Although normally described in a C \"}]","[{\"text\":\"language manual, \\n\\n\\n\\nGNU C preprocessor has been thoroughly documented in The C \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\na separate manual which covers preprocessing for C, C++, and \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nprograms, so it is not included \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThanks to everyone who has helped with editing, proofreading, \\n\\n\\n\\n\\n\\n\\ntypesetting, and administrivia, including: Diego Andres Alvarez \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nNelson H. F. Beebe, Karl Berry, Robert Chassell, Hanfeng Chen, Mark \\n\\n\\nVolld, Antonio Diaz Diaz, dine, Andreas Foerster, Denver Gingerich, \\n\\n\\n\\n\\nGoldstein, Robert Hansen, \"}]","[{\"text\":\"Jean-Christophe Helary, Mogens Hetsholm, \\n\\n\\n\\n\\n\\nHogeborn, Joe Humphries, J. Wren Hunt, Dutch Ingraham, Adam \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nVladimir Kadlec, Benjamin Kagia, Dright Kayorent, Sugun Kedambadi, \\n\\n\\n\\n\\n\\nLee, Bjorn Liencres, Steve Morningthunder, Aljosha Papsch, \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nPlant, Jonathan Sisti, Richard Stallman, J. Otto Tennant, Ole \\n\\n\\n\\n\\n\\n\\n\\nKeith Thompson, T.F. Torrey, James Youngman, and Steve Zachar. \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nRothwell serves as project maintainer and, along with James \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nwrote the bulk of the \\n\\n\\n\"}]","[{\"text\":\"\\nSome example programs are based on algorithms in Donald Knuth’s The \\n\\n\\n\\nof Computer \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPlease send bug reports and suggestions to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Data Types, Previous: Preface, Up: Top   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n1 Lexical \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThis chapter describes the lexical elements that make up C source \\n\\n\\n\\n\"}]","[{\"text\":\"\\nafter preprocessing. These elements are called _tokens_. There are \\n\\n\\n\\n\\ntypes of tokens: keywords, identifiers, constants, operators, \\n\\n\\n\\nseparators. White \"}]","[{\"text\":\"space, sometimes required to separate tokens, is \\n\\n\\n\\n\\ndescribed in this \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n  ---------------- ---- \\n\\n\\n  • Identifiers:        \\n  • Keywords:           \\n  • Constants:          \\n  • Operators:          \\n  • Separators:         \\n  • White Space:        \\n  ---------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Keywords, Up: Lexical Elements   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n1.1 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nIdentifiers are sequences of \"}]","[{\"text\":\"characters used for naming \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunctions, new data types, and preprocessor macros. You \"}]","[{\"text\":\"can \\n\\n\\n\\n\\n\\n\\n\\nletters, decimal digits, and the underscore character ‘_’ \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThe first character of an identifier cannot be a \\n\\n\\n\\n\\n\\n\\n\\nLowercase letters and uppercase letters are distinct, such that foo \\n\\n\\n\"}]","[{\"text\":\"\\nFOO are two different \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nWhen using GNU \"}]","[{\"text\":\"extensions, you can also include the dollar \\n\\n\\n\\n\\ncharacter ‘$’ in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Constants, Previous: Identifiers, Up: Lexical Elements  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n1.2 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nKeywords are special identifiers reserved for use as part of \\n\\n\\n\"}]","[{\"text\":\"\\nprogramming language itself. You cannot use them for any other \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHere is a list of keywords recognized by ANSI \\n\\n\"}]","[{\"text\":\"\\n\\n    auto break case char const continue default do double else enum \\n\\n\\n\\n\\n\\n\\n    float for goto if int long register return short signed sizeof \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    struct switch typedef union unsigned void volatile \\n\\n\\n\\n\\n\\n\\nISO C99 adds the following \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    inline _Bool _Complex \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nand GNU extensions add these \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    __FUNCTION__ __PRETTY_FUNCTION__ __alignof __alignof__ \\n\\n\\n\\n\\n\\n    __asm__ __attribute __attribute__ __builtin_offsetof \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    __complex __complex__ __const __extension__ __func__ __imag __imag__ \\n    __inline __inline__ __label__ __null __real __real__ \\n    __restrict __restrict__ __signed __signed__ __thread \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    __volatile __volatile__ \\n\\nIn both ISO C99 and C89 with GNU extensions, the following is \\n\\n\\n\\n\\nrecognized as a \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Operators, Previous: Keywords, Up: Lexical Elements  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n1.3 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nA constant is a literal numeric or character value, such as 5 or \\n\\n\\n\\n\"}]","[{\"text\":\"\\nAll constants are of a particular data type; you can use type casting \\n\\n\\nexplicitly specify the type of a constant, or let the compiler use \\n\\n\\n\\ndefault type based on the value of the \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n  -------------------------- ---- \\n\\n\\n  • Integer Constants:            \\n  • Character Constants:          \\n  • Real Number Constants:        \\n  • String Constants:             \\n  -------------------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Character Constants, Up: Constants   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n1.3.1 Integer \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nAn integer constant is a sequence of digits, with an optional prefix \\n\\n\"}]","[{\"text\":\"\\ndenote a number \\n\\n\\n\\n\\n\\n\\nIf the sequence of digits is preceded by 0x or 0X (zero x or zero \\n\\n\\n\\nthen the constant is considered to \"}]","[{\"text\":\"be hexadecimal (base 16). \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvalues may use the digits from 0 to \"}]","[{\"text\":\"9, as well as the letters a to f \\n\\n\\n\\nA to F. Here are some \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nIf the first digit is 0 (zero), and the next character is not ‘x’ \\n\\n\\n‘X’, then the constant is considered to be octal (base 8). Octal \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nmay only use the digits from 0 to 7; 8 and 9 are not allowed. Here \\n\\n\\n\\nsome \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nIn all other cases, the sequence of digits is assumed to be \\n\\n\\n\\n\\n\\n\\n\\n(base 10). Decimal values may use the digits from 0 to 9. Here are \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThere are various integer data types, for short integers, long \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nsigned integers, and unsigned \"}]","[{\"text\":\"integers. You can force an \\n\\n\\n\\n\\n\\n\\n\\nconstant to be of a long and/or unsigned integer type by appending \\n\\nsequence of one or more letters to \"}]","[{\"text\":\"the end of the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    Unsigned integer \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    Long integer \\n\\n\\n\\n\"}]","[{\"text\":\"\\nFor example, 45U is an unsigned int constant. You can also \\n\\n\\n\\n\\n\\n\\n\\nletters: 45UL is an unsigned long int constant. (The letters may be \\n\\n\\n\\n\"}]","[{\"text\":\"\\nin any \\n\\n\\n\\n\\n\\n\\n\\n\\nBoth ISO C99 and GNU C extensions add the integer types long long \\n\\n\\n\"}]","[{\"text\":\"\\nand unsigned long long int. You can use two ‘L’s to get a long long \\n\\n\\n\\nconstant; add a ‘U’ to that and you have an unsigned long long \\n\\n\\n\\nconstant. For example: \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Real Number Constants, Previous: Integer Constants, Up: \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n1.3.2 Character \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nA character constant is usually a single character enclosed \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nsingle quotation marks, such as 'Q'. A character constant is of type \\n\\n\\n\\nby \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nSome characters, such as the single quotation mark character \\n\\n\\n\\n\\n\\n\\n\\ncannot be represented using only one character. To represent \\n\\n\\n\\n\"}]","[{\"text\":\"\\ncharacters, there are several “escape sequences” that you can \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    Backslash \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    Question mark \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    Single quotation \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    Double quotation \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    Audible \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    Backspace \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    <ESC> character. (This is a GNU \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    Form \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    Newline \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    Carriage \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    Horizontal \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    Vertical \\n\\n\\n\\n\\n\\n\\\\o, \\\\oo, \\n\\n\\n\\n\\n\\n    Octal \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\\\xh, \\\\xhh, \\\\xhhh, \\n\\n\\n    Hexadecimal \\n\\n\\n\\n\\n\\n\\n\\n\\nTo use any of these escape sequences, enclose the \"}]","[{\"text\":\"sequence in \\n\\n\\n\\n\\n\\n\\nquotes, and treat it as if it were any other character. For example, \\n\\n\\n\\nletter m is 'm' and the newline \"}]","[{\"text\":\"character is \\n\\n\\n\\n\\n\\n\\nThe octal number escape sequence is the backslash character followed \\n\\n\\none, two, or three octal digits (0 to 7). For example, \"}]","[{\"text\":\"101 is the \\n\\n\\n\\n\\n\\nequivalent of 65, which is the ASCII character 'A'. Thus, the \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nconstant '\\\\101' is the same as the character constant \\n\\n\\n\\n\\n\\nThe hexadecimal escape sequence is the backslash character, followed \\n\\n\\nx and an unlimited number of hexadecimal digits (0 to \"}]","[{\"text\":\"9, and a to f or \\n\\nto \\n\\n\\n\\n\\nWhile the length of possible hexadecimal digit strings is unlimited, \\n\\n\\n\\nnumber of character constants in any given character \"}]","[{\"text\":\"set is not. \\n\\n\\n\\n\\nmuch-used extended ASCII character set, for example, has only \\n\\n\\n\\ncharacters in it.) If you try to use a hexadecimal value that is \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nthe range of characters, you will get a compile-time \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: String Constants, Previous: Character Constants, Up: Constants  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n1.3.3 Real Number \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nA real number constant is a value that represents a \"}]","[{\"text\":\"fractional \\n\\n\\n\\n\\n\\n\\n\\n\\n\\npoint) number. It consists of a sequence of digits which represents \\n\\n\\n\"}]","[{\"text\":\"\\ninteger (or “whole”) part of the number, a decimal point, and a \\n\\n\\n\\n\\n\\n\\n\\n\\nof digits which represents the fractional \\n\\n\\n\"}]","[{\"text\":\"\\nEither the integer part or the fractional part may be omitted, but \\n\\n\\n\\nboth. Here are some \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    double a, b, c, d, e, \\n\\n\\n\\n    a = \\n\\n\\n\\n\\n\\n    b = \\n\\n\\n\\n\\n    c = \\n\\n\\n\\n    d = \\n\\n\"}]","[{\"text\":\"\\n    e = \\n\\n\\n\\n\\n\\n(In the third assignment statement, the integer constant 4 \\n\\n\\nautomatically converted from an integer value to a double \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nReal number constants can also be followed by e or E, and an \\n\\n\\n\\n\\n\\n\\n\\nexponent. The exponent can be either positive or \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    double x, \\n\\n\\n\\n    x = 5e2;   /* x is 5 * 100, or 500.0. \\n\\n\\n    y = 5e-2;  /* y is 5 * (1/100), or 0.05. \\n\\n\\n\\nYou can append a letter to the end of a real number constant to cause \\n\\n\"}]","[{\"text\":\"\\nto be of a particular type. If you append the letter F (or f) to a \\n\\n\\n\\n\\nnumber constant, then its type is float. If you append the letter L \\n\\n\\n\\nl), then its type \"}]","[{\"text\":\"is long double. If you do not append any letters, \\n\\n\\n\\n\\nits type is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Real Number Constants, Up: Constants   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n1.3.4 String \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nA string constant is a sequence of zero or more characters, digits, \\n\\n\\n\"}]","[{\"text\":\"\\nescape sequences enclosed within double quotation marks. A \\n\\n\\n\\n\\n\\n\\nconstant is of type “array of characters”. All string constants \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\na null termination character (\\\\0) as their last character. Strings \\n\\n\\n\\nstored as arrays of characters, with no inherent size attribute. \\n\\n\\n\\nnull termination character lets \"}]","[{\"text\":\"string-processing functions know \\n\\n\\n\\n\\n\\nthe string \\n\\n\\n\\n\\n\\n\\nAdjacent string constants are \"}]","[{\"text\":\"concatenated (combined) into one \\n\\n\\n\\n\\n\\n\\n\\nwith the null termination character added to the end of the \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nconcatenated \\n\\n\\n\\n\\n\\n\\n\\n\\nA string cannot contain double quotation marks, as double \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nmarks are used to enclose the string. To include the double \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nmark character in a string, use the \"}]","[{\"text\":\"\\\\\\\" escape sequence. You can use \\n\\n\\n\\nof the escape sequences that can be used as character constants \\n\\n\\nstrings. Here are some example of string \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    /* This is a single string constant. \\n\\n\\n    \\\"tutti frutti ice \\n\\n\\n\\n\\n\\n\\n\\n    /* These string constants will be concatenated, \"}]","[{\"text\":\"same as above. \\n\\n\\n    \\\"tutti \\\" \\\"frutti\\\" \\\" ice \\\" \\n\\n\\n\\n\\n\\n\\n\\n\\n    /* This one uses two escape sequences. \\n\\n\"}]","[{\"text\":\"\\n    \\\"\\\\\\\"hello, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nIf a string is too long to fit on one line, you can use a backslash \\\\ \\n\\n\"}]","[{\"text\":\"\\nbreak it up onto separate \\n\\n\\n\\n\\n\\n\\n\\n    \\\"Today's special is a pastrami sandwich on rye bread with \\n\\n    a potato knish and a cherry \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nAdjacent strings are automatically concatenated, so you can also \\n\\n\\n\\n\\nstring constants span multiple lines by writing them as \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nadjacent, strings. For \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    \\\"Tomorrow's special is a corned beef sandwich on \\n\\n    \\\"pumpernickel bread with a kasha \"}]","[{\"text\":\"knish and seltzer \\n\\n\\n\\n\\n\\n\\n\\n\\nis the same \\n\\n\\n\\n    \\\"Tomorrow's special is a corned beef sandwich on \\n\\n    pumpernickel \"}]","[{\"text\":\"bread with a kasha knish and seltzer \\n\\n\\n\\n\\n\\n\\n\\n\\nTo insert a newline character into the string, so that when the \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nis printed it will be printed on two different lines, you can use \\n\\n\\n\\nnewline escape sequence \\n\\n\\n\\n\\n\\n\\n    printf \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Separators, Previous: Constants, Up: Lexical Elements  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n1.4 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nAn operator is a special token that performs an operation, such \\n\\n\"}]","[{\"text\":\"\\naddition or subtraction, on either one, two, or three operands. \\n\\n\\n\\n\\ncoverage of operators can be found in a later chapter. See \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nand \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: White Space, Previous: Operators, Up: Lexical Elements  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n1.5 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nA separator separates tokens. White space (see next section) is \\n\"}]","[{\"text\":\"\\nseparator, but it is not a token. The other separators are \\n\\n\\n\\nsingle-character tokens \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    ( ) [ ] { } ; , . \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Separators, Up: Lexical Elements   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n1.6 White \\n\\n\\n\\n\\n\\n\\nWhite space is the collective term used for several characters: \\n\\n\\n\\nspace character, the tab character, \"}]","[{\"text\":\"the newline character, the \\n\\n\\n\\n\\n\\n\\n\\n\\ntab character, and the form-feed character. White space is \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n(outside of string and character constants), and is therefore \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nexcept when it is used to separate \"}]","[{\"text\":\"tokens. This means \\n\\n\\n\\n\\n\\n    #include \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      printf( \\\"hello, world\\\\n\\\" \\n\\n\\n      return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    #include <stdio.h> int main(){printf(\\\"hello, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    return \\n\\n\\n\"}]","[{\"text\":\"\\nare functionally the same \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nAlthough you must use white space to separate many tokens, no \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nspace is required between operators and operands, nor is it \\n\\n\\n\\n\\n\\n\\n\\n\\nbetween other separators and that which they \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    /* All of these are valid. \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    x ++ \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    x = y + z \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    x = array [ 2 ] \\n\\n    fraction=numerator / \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    fraction = numerator / * denominator_ptr \\n\\n\\nFurthermore, wherever one space is allowed, any amount of white space \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    /* These two statements are functionally identical. \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n           ++       \\n\\n\\nIn string constants, spaces and tabs are not ignored; rather, they \\n\\n\\n\\npart of the string. \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    \\\"potato \\n\\n\\n\\n\\n\\n\\n\\nis not the same \\n\\n\\n\\n    \\\"potato                        \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Expressions and Operators, Previous: Lexical Elements, Up: Top  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n2 Data \\n\\n\\n\\n\\n\\n\\n  ----------------------------- ---- \\n\\n\\n  • Primitive Types:                 \\n  • Enumerations:                    \"}]","[{\"text\":\"\\n  • Unions:                          \\n  • Structures:                      \\n  • Arrays:                          \\n  • Pointers:                        \\n  • Incomplete Types:                \\n  • Type Qualifiers:                 \\n  • Storage Class Specifiers:        \"}]","[{\"text\":\"\\n  • Renaming Types:                  \\n  ----------------------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Enumerations, Up: Data Types   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.1 Primitive Data \\n\\n\\n\\n\\n\\n\\n  ------------------------- ---- \\n\\n\\n  • Integer Types:               \\n  • Real Number Types:           \\n  • \"}]","[{\"text\":\"Complex Number Types:        \\n  ------------------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Real Number Types, Up: Primitive Types   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.1.1 Integer \\n\\n\\n\\n\\n\\n\\nThe integer data types range in size from at least 8 bits to at least \\n\\n\\nbits. The C99 standard extends this range to include \"}]","[{\"text\":\"integer sizes of \\n\\n\\nleast 64 bits. You should use integer types for storing whole \\n\\n\\n\\n\\n\\n\\nvalues (and the char data type for storing characters). \"}]","[{\"text\":\"The sizes \\n\\n\\n\\nranges listed for these types are minimums; depending on your \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nplatform, these sizes and ranges may be \\n\\n\\n\\n\\n\\n\\n\\n\\nWhile these ranges provide a natural ordering, the standard does \\n\\n\\n\"}]","[{\"text\":\"\\nrequire that any two types have a different range. For example, it \\n\\n\\ncommon for int and long to have the same range. The standard even \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nsigned char and long to have the same range, though such platforms \\n\\n\\n\\nvery \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n-   signed \\n\\n\\n\\n\\n    The 8-bit signed char data type can hold integer values in the \\n\\n\\n\\n\\n\\n    of -128 to \\n\\n\\n\\n\"}]","[{\"text\":\"\\n-   unsigned \\n\\n\\n\\n\\n    The 8-bit unsigned char data type can hold integer values in \\n\\n\\n\\n    range of 0 to \\n\\n\\n\\n\"}]","[{\"text\":\"\\n-   \\n\\n\\n\\n\\n    Depending on your system, the char data type is defined as \\n\\n\\n\\n\\n\\n\\n    the same \"}]","[{\"text\":\"range as either the signed char or the unsigned char \\n\\n\\n\\n\\n    type (they are three distinct types, however). By convention, \\n\\n\\n\\n    should use the char data type \"}]","[{\"text\":\"specifically for storing \\n\\n\\n\\n\\n\\n    characters (such as `m'), including escape sequences (such as \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n-   short \\n\\n\\n\\n    The 16-bit short int data type can hold integer values in the \\n\\n\\n\\n\\n\\n    of -32,768 to 32,767. You may also refer to this \"}]","[{\"text\":\"data type as \\n\\n\\n\\n\\n\\n\\n    signed short int, or signed \\n\\n\\n\\n\\n\\n\\n-   unsigned \"}]","[{\"text\":\"short \\n\\n\\n\\n    The 16-bit unsigned short int data type can hold integer values \\n\\n\\n    the range of 0 to 65,535. You may also refer to this data type \\n\\n\\n    unsigned \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n-   \\n\\n\\n\\n    The 32-bit int data type can hold integer values in the range \\n\\n\\n    -2,147,483,648 to 2,147,483,647. You may also refer to this \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    type as signed int or \\n\\n\\n\\n\\n\\n\\n\\n-   unsigned \\n\\n\\n\\n    The 32-bit unsigned int data type can hold integer \"}]","[{\"text\":\"values in \\n\\n\\n\\n    range of 0 to 4,294,967,295. You may also refer to this data \\n\\n\\n\\n\\n    simply as \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n-   long \\n\\n\\n\\n    The 32-bit long int data type can hold integer values in the \\n\\n\\n\\n\\n\\n    of at least -2,147,483,648 to 2,147,483,647. \"}]","[{\"text\":\"(Depending on \\n\\n\\n\\n\\n    system, this data type might be 64-bit, in which case its range \\n\\n\\n    identical to that of the long long int data type.) You may \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    refer to this data type as long, signed long int, or signed \\n\\n\\n\\n\\n\\n-   unsigned long \\n\\n\\n\\n    The 32-bit unsigned long int \"}]","[{\"text\":\"data type can hold integer values \\n\\n\\n    the range of at least 0 to 4,294,967,295. (Depending on your \\n\\n\\n\\n\\n\\n\\n\\n    this data \"}]","[{\"text\":\"type might be 64-bit, in which case its range is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    to that of the unsigned long long int data type.) \"}]","[{\"text\":\"You may also \\n\\n\\n\\n\\n\\n    to this data type as unsigned \\n\\n\\n\\n\\n\\n-   long long \\n\\n\\n\"}]","[{\"text\":\"\\n    The 64-bit long long int data type can hold integer values in \\n\\n\\n\\n    range of -9,223,372,036,854,775,808 to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    You may also refer to this data type as long \\n\\n\\n\\n\\n\\n    signed long long int or signed long long. This type is not part \\n\\n\\n    C89, but is both part of C99 and \"}]","[{\"text\":\"a GNU C \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n-   unsigned long long \\n\\n\\n\"}]","[{\"text\":\"\\n    The 64-bit unsigned long long int data type can hold integer \\n\\n\\n\\n\\n\\n\\n    in the range of at least 0 to 18,446,744,073,709,551,615. You \\n\\n\\n\"}]","[{\"text\":\"\\n    also refer to this data type as unsigned long long. This type is \\n\\n\\n\\n    part of C89, but is both part of C99 and a GNU C \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nHere are some examples of declaring and defining integer \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    int \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    unsigned int bar = \\n\\n\\n\\n    char quux = \\n\\n\\n\\n\\n\\nThe first line declares an integer named foo but does not define \\n\\n\\n\"}]","[{\"text\":\"\\nvalue; it is left uninitialized, and its value should not be assumed \\n\\n\\nbe anything in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Complex Number Types, Previous: Integer Types, Up: Primitive \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.1.2 Real Number \\n\\n\\n\\n\\n\\n\\nThere are three data types that represent fractional numbers. While \\n\\n\\n\\nsizes and ranges \"}]","[{\"text\":\"of these types are consistent across most \\n\\n\\n\\n\\n\\n\\n\\n\\nsystems in use today, historically the sizes of these types varied \\n\\n\\n\\n\"}]","[{\"text\":\"\\nsystem to system. As such, the minimum and maximum values are stored \\n\\n\\nmacro definitions in the library header file float.h. In this \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nwe include the names of the macro definitions in place of their \\n\\n\\n\\n\\n\\n\\n\\n\\nvalues; check your system’s float.h for specific \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n-   \\n\\n\\n\\n\\n\\n    The float data type is the smallest of the three floating \\n\\n\\n\\n\\n\\n    types, if \"}]","[{\"text\":\"they differ in size at all. Its minimum value is stored \\n\\n\\n    the FLT_MIN, and should be no greater than 1e-37. Its maximum \\n\\n\\n\\n\\n\\n    is stored in FLT_MAX, and should \"}]","[{\"text\":\"be no less than \\n\\n\\n\\n\\n\\n-   \\n\\n\\n\\n\\n\\n\\n    The double data type is at least as large as the \"}]","[{\"text\":\"float type, and \\n\\n\\n    may be larger. Its minimum value is stored in DBL_MIN, and \\n\\n\\n\\n    maximum value is stored in \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n-   long \\n\\n\\n\\n\\n\\n\\n    The long double data type is at least as large as the float \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    and it may be larger. Its minimum value is stored in LDBL_MIN, \\n\\n\\n\\n    its maximum value is stored in \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nAll floating point data types are signed; trying to use unsigned \\n\\n\\n\\n\\n\\n\\nfor example, will cause a compile-time \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nHere are some examples of declaring and defining real number \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    float \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    double bar = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThe first line declares a float named foo but does not define its \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nit is left uninitialized, and its value should not be assumed to \\n\\n\\nanything in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThe real number types provided in C are of finite precision, \\n\\n\\n\\naccordingly, not all real numbers can be represented exactly. \\n\\n\\n\\n\\ncomputer systems \"}]","[{\"text\":\"that GCC compiles for use a binary representation \\n\\n\\n\\nreal numbers, which is unable to precisely represent numbers such \\n\\n\\n\\nfor example, 4.2. For this reason, we recommend that \"}]","[{\"text\":\"you consider \\n\\n\\n\\ncomparing real numbers for exact equality with the == operator, \\n\\n\\n\\nrather check that real numbers are within an acceptable \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThere are other more subtle implications of these \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nrepresentations; for more details, see David Goldberg’s \"}]","[{\"text\":\"paper What \\n\\n\\n\\n\\n\\nComputer Scientist Should Know About Floating-Point Arithmetic \\n\\n\\n\\nsection 4.2.2 of Donald Knuth’s The Art of Computer \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Real Number Types, Up: Primitive Types   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.1.3 Complex Number \\n\\n\\n\\n\\n\\n\\nGCC introduced some complex number types as an extension to C89. \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nfeatures were introduced in C99¹, but there were a number \\n\\n\\ndifferences. We describe the standard complex number types \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n  -------------------------------------------- ---- \\n\\n\\n  • Standard Complex Number Types:                  \\n  • GNU Extensions for Complex Number Types:        \\n  -------------------------------------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: GNU Extensions for Complex Number Types, Up: Complex Number \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.1.3.1 Standard Complex Number \\n\\n\\n\\n\\n\\n\\nComplex types were introduced in C99. There are three complex \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n-   float \\n\\n\\n\\n\\n\\n\\n\\n\\n-   double \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n-   long double \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThe names here begin with an underscore and an uppercase letter in \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nto avoid conflicts with existing programs’ identifiers. However, the \\n\\n\\n\\nstandard header file <complex.h> introduces some macros which make \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ncomplex types \\n\\n\\n\\n\\n\\n\\n\\n\\n-   \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    Expands to _Complex. This allows a variable to be declared \\n\\n\\n    double complex which seems more \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n-   \\n\\n    A constant of type const float _Complex having the value of \\n\\n\\n\\n    imaginary unit normally referred to as \\n\\n\\n\\n\\n\\nThe <complex.h> \"}]","[{\"text\":\"header file also declares a number of functions \\n\\n\\n\\nperforming computations on complex numbers, for example the creal \\n\\n\\n\\ncimag functions which respectively return the real and \"}]","[{\"text\":\"imaginary \\n\\n\\n\\n\\n\\nof a double complex number. Other functions are also provided, as \\n\\n\\n\\n\\n\\nin this \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    #include <complex.h>    \\n    #include <stdio.h>  \\n\\n    void example (void) \\n    {    \\n      complex double z = 1.0 + 3.0*I; \\n      printf (\\\"Phase is %f, modulus is %f\\\\n\\\", carg (z), cabs (z));        \\n    }  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Standard Complex Number Types, Up: Complex Number Types  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.1.3.2 GNU Extensions for Complex Number \\n\\n\\n\\n\\n\\n\\nGCC also introduced complex types as a GNU extension to C89, but \\n\\n\\n\"}]","[{\"text\":\"\\nspelling is different. The floating-point complex types in GCC’s \\n\\n\\n\\nextension \\n\\n\\n\\n\\n\\n-   __complex__ \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n-   __complex__ \\n\\n\\n\\n\\n\\n\\n-   __complex__ long \\n\\n\\n\\n\\n\\n\\n\\nGCC’s extension \"}]","[{\"text\":\"allow for complex types other than floating-point, \\n\\n\\nthat you can declare complex character types and complex integer \\n\\n\\n\\n\\n\\n\\nin fact \"}]","[{\"text\":\"__complex__ can be used with any of the primitive data types. \\n\\n\\nwon’t give you a complete list of all possibilities, but here are \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n-   __complex__ \\n\\n\\n\\n\\n\\n    The __complex__ float data type has two components: a real part \\n\\n\\n\\n    an imaginary part, both of which are of the float \"}]","[{\"text\":\"data \\n\\n\\n\\n\\n\\n-   __complex__ \\n\\n\\n\\n    The __complex__ int data type also has two components: a real \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    and an imaginary part, both of which are of the int data \\n\\n\\n\\n\\n\\n\\nTo extract the real part of a complex-valued expression, use the \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n__real__, followed by the expression. Likewise, use __imag__ to \\n\\n\\n\\n\\n\\n\\n\\nthe imaginary \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    __complex__ float a = 4 + \\n\\n\\n\\n\\n    float b = __real__ a;          /* b is now 4. \\n\\n\\n    float c = __imag__ a;          /* c is now 3. \\n\\n\\n\\nThis example \"}]","[{\"text\":\"creates a complex floating point variable a, and \\n\\n\\n\\n\\n\\n\\n\\nits real part as 4 and its imaginary part as 3. Then, the real part \\n\\n\"}]","[{\"text\":\"\\nassigned to the floating point variable b, and the imaginary part \\n\\n\\nassigned to the floating point variable \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Unions, Previous: Primitive Types, Up: Data Types  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.2 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nAn enumeration is a custom data \"}]","[{\"text\":\"type used for storing constant \\n\\n\\n\\n\\n\\n\\n\\nvalues and referring to them by names. By default, these values are \\n\\n\\ntype signed int; \"}]","[{\"text\":\"however, you can use the -fshort-enums GCC \\n\\n\\n\\n\\n\\n\\n\\n\\noption to cause the smallest possible integer type to be used \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nBoth of these behaviors conform to the C89 standard, but mixing the \\n\\n\\n\\nof these options within the same program can produce \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n  --------------------------- ---- \\n\\n\\n  • Defining Enumerations:         \\n  • Declaring Enumerations:        \\n  --------------------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Declaring Enumerations, Up: Enumerations   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.2.1 Defining \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou define an enumeration using the \"}]","[{\"text\":\"enum keyword, followed by the \\n\\n\\n\\n\\nof the enumeration (this is optional), followed by a list of \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nnames (separated by commas and enclosed in braces), and ending with \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    enum fruit {grape, cherry, lemon, \\n\\n\\n\\n\\n\\n\\n\\nThat example defines an enumeration, fruit, which contains four \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ninteger values, grape, cherry, lemon, and kiwi, whose values are, \\n\\n\\ndefault, 0, 1, 2, and 3, respectively. You can also specify one or \\n\\n\\n\\n\\nof the values \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    enum more_fruit {banana = -17, apple, blueberry, \\n\\n\\n\\n\\n\\n\\n\\n\\nThat example defines banana to be -17, and the remaining values \\n\\n\\n\"}]","[{\"text\":\"\\nincremented by 1: apple is -16, blueberry is -15, and mango is \\n\\n\\n\\n\\nUnless specified otherwise, an enumeration value is equal to one \\n\\n\\n\\n\"}]","[{\"text\":\"\\nthan the previous value (and the first value defaults to \\n\\n\\n\\n\\nYou can also refer to an enumeration value defined earlier in the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    enum yet_more_fruit {kumquat, raspberry, \\n\\n\\n\\n\\n\\n\\n                         plum = peach + \\n\\n\\n\\n\"}]","[{\"text\":\"\\nIn that example, kumquat is 0, raspberry is 1, peach is 2, and plum \\n\\n\\n\\n\\n\\n\\nYou can’t use the same name for an enum as a struct or union in the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Defining Enumerations, Up: Enumerations   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.2.2 Declaring \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can declare variables of an \"}]","[{\"text\":\"enumeration type both when \\n\\n\\n\\nenumeration is defined and afterward. This example declares \\n\\n\\n\\nvariable, named my_fruit of type enum fruit, all in a single \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    enum fruit {banana, apple, blueberry, mango} \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nwhile this example declares the type \"}]","[{\"text\":\"and variable \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    enum fruit {banana, apple, \"}]","[{\"text\":\"blueberry, \\n\\n\\n\\n\\n\\n\\n\\n    enum fruit \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n(Of course, you couldn’t declare it that way if you hadn’t named \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nAlthough such variables are considered to be of an enumeration type, \\n\\n\\n\\ncan assign them any value that you could assign to an int \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nincluding values from other enumerations. Furthermore, any variable \\n\\n\\n\\n\\ncan be assigned an int value can be assigned a value from \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nHowever, you cannot change the values in an enumeration once it has \\n\\n\\n\\n\\ndefined; they are constant values. For example, this won’t \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    enum fruit {banana, apple, blueberry, \\n\\n\\n\\n\\n\\n\\n\\n    banana = 15;  /* You can’t do this! \\n\\n\\n\\nEnumerations are \"}]","[{\"text\":\"useful in conjunction with the switch \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nbecause the compiler can warn you if \"}]","[{\"text\":\"you have failed to handle one \\n\\n\\nthe enumeration values. Using the example above, if your code \\n\\n\\n\\n\\n\\n\\n\\nbanana, apple and \"}]","[{\"text\":\"mango only but not blueberry, GCC can generate \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Structures, Previous: Enumerations, Up: Data Types  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.3 \\n\\n\\n\\n\\n\\n\\n\\nA union is a custom data type used for storing several variables in \\n\\n\\n\\nsame memory space. Although you can \"}]","[{\"text\":\"access any of those variables at \\n\\n\\n\\ntime, you should only read from one of them at a time—assigning a \\n\\n\\n\\n\\n\\nto one of them overwrites the values \"}]","[{\"text\":\"in the \\n\\n\\n\\n\\n\\n\\n\\n\\n  ------------------------------ ---- \\n\\n\\n  • Defining \"}]","[{\"text\":\"Unions:                  \\n  • Declaring Union Variables:        \\n  • Accessing Union Members:          \\n  • Size of Unions:                   \\n  ------------------------------ ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Declaring Union Variables, Up: Unions   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.3.1 Defining \\n\\n\\n\\n\\n\\n\\n\\nYou define a union using the union keyword followed by the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nof the union’s members, enclosed in braces. You declare each member of \\n\\nunion just as you would normally declare a variable—using the data \\n\\n\\n\\n\\nfollowed by one or more variable names separated by \"}]","[{\"text\":\"commas, and \\n\\n\\n\\n\\n\\n\\nwith a semicolon. Then end the union definition with a semicolon \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nthe closing \\n\\n\\n\\n\\n\\n\\n\\nYou should also include a name for the union between the union \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nand the opening brace. This is syntactically optional, but if you \\n\\n\\n\\n\\n\\nit out, you can’t refer to that union data type later on (without \\n\\ntypedef, see The typedef \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nHere is an example of defining a simple union for holding an \\n\\n\\n\\n\\n\\n\\n\\nvalue and a floating point \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    union \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        int \\n\\n\\n        float \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThat defines a \"}]","[{\"text\":\"union named numbers, which contains two members, i and \\n\\n\\nwhich are of type int and float, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Accessing Union Members, Previous: Defining Unions, Up: Unions  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.3.2 Declaring Union \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can declare variables of a union type when both you \"}]","[{\"text\":\"initially \\n\\n\\n\\n\\n\\n\\nthe union and after the definition, provided you gave the union type \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n  ----------------------------------------------- ---- \\n\\n\\n  • Declaring Union Variables at Definition:           \\n  • Declaring Union Variables After Definition:        \\n  • Initializing Union Members:                        \"}]","[{\"text\":\"\\n  ----------------------------------------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Declaring Union Variables After Definition, Up: Declaring \\n\\n\\n\\n\\n\\nVariables   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.3.2.1 Declaring Union Variables at \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can declare variables of a \"}]","[{\"text\":\"union type when you define the union \\n\\n\\n\\n\\nby putting the variable names after the closing brace of the \\n\\n\\n\\n\\n\\ndefinition, but \"}]","[{\"text\":\"before the final semicolon. You can declare more \\n\\n\\n\\n\\none such variable by separating the names with \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    union \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        int \\n\\n\\n        float \\n\\n\\n      } first_number, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThat example declares two variables of type union numbers, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nand \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Initializing Union Members, Previous: Declaring Union Variables \\n\\n\\nDefinition, Up: Declaring Union Variables   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.3.2.2 Declaring Union Variables After \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can declare variables of a \"}]","[{\"text\":\"union type after you define the union \\n\\n\\nusing the union keyword and the name you gave the union type, \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nby one or more variable names separated by \\n\\n\\n\\n\\n\\n\\n\\n\\n    union \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        int \\n\\n\\n        float \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    union numbers \"}]","[{\"text\":\"first_number, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThat example declares two variables of type union numbers, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nand \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Declaring Union Variables After Definition, Up: \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nUnion Variables   \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.3.2.3 Initializing Union \\n\\n\\n\\n\\n\\n\\n\\n\\nYou can initialize the first member of a union variable when you \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    union \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        int \\n\\n\\n        float \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    union numbers \"}]","[{\"text\":\"first_number = { 5 \\n\\n\\n\\nIn that example, the i member of first_number gets the value 5. The \\n\\nmember is left \\n\\n\\n\\n\\n\\n\\n\\nAnother way to \"}]","[{\"text\":\"initialize a union member is to specify the name of \\n\\n\\n\\nmember to initialize. This way, you can initialize whichever member \\n\\n\\n\\nwant to, not just the first one. There are two methods \"}]","[{\"text\":\"that you \\n\\n\\n\\nuse—either follow the member name with a colon, and then its value, \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    union numbers first_number = { f: 3.14159 \\n\\n\\n\\nor precede the member name with a period and assign a value with \\n\\n\\n\\nassignment operator, like \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    union numbers first_number = { .f = 3.14159 \\n\\n\\n\\nYou can also initialize a union member when you declare the \\n\\n\\n\\n\\n\\nvariable during the \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    union \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        int \\n\\n\\n        float \\n\\n\\n      } first_number = { 5 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Size of Unions, Previous: Declaring Union Variables, Up: Unions  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.3.3 Accessing Union \\n\\n\\n\\n\\n\\n\\n\\n\\nYou can access the members of a union variable using the member \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\noperator. You put the name of the union variable on the left side of \\n\\n\\n\\noperator, and the name of the member on the right \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    union \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        int \\n\\n\\n        float \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    union numbers \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    first_number.i = \\n\\n\\n    first_number.f = \\n\\n\\n\\n\\n\\nNotice in that example that giving a value to the f member overrides \\n\\n\\n\"}]","[{\"text\":\"\\nvalue stored in the i \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Accessing Union Members, Up: Unions   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.3.4 Size of \\n\\n\\n\\n\\n\\n\\n\\nThis size of a union is equal to the size of its largest \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nConsider the first union example from this \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    union \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        int \\n\\n\\n        float \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThe size of the \"}]","[{\"text\":\"union data type is the same as sizeof (float), \\n\\n\\n\\n\\n\\n\\n\\nthe float type is larger than the int type. Since all of the members \\n\\n\"}]","[{\"text\":\"\\na union occupy the same memory space, the union data type size \\n\\n\\n\\n\\n\\n\\n\\nneed to be large enough to hold the sum of all their sizes; it \\n\\n\\n\\n\"}]","[{\"text\":\"\\nneeds to be large enough to hold the largest \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Arrays, Previous: Unions, Up: Data Types   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.4 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nA structure is a programmer-defined data type made up of variables \\n\\n\"}]","[{\"text\":\"\\nother data types (possibly including other structure \\n\\n\\n\\n\\n\\n\\n\\n\\n  ---------------------------------- ---- \\n\\n\"}]","[{\"text\":\"\\n  • Defining Structures:                  \\n  • Declaring Structure Variables:        \\n  • Accessing Structure Members:          \\n  • Bit Fields:                           \\n  • Size of Structures:                   \\n  ---------------------------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Declaring Structure Variables, Up: Structures   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.4.1 Defining \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou define a structure using the struct keyword followed by \\n\\n\\n\"}]","[{\"text\":\"\\ndeclarations of the structure’s members, enclosed in braces. You \\n\\n\\n\\n\\n\\n\\n\\neach member of a structure just as you would normally declare \\n\"}]","[{\"text\":\"\\nvariable—using the data type followed by one or more variable \\n\\n\\n\\n\\n\\nseparated by commas, and ending with a semicolon. Then end the \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ndefinition with a semicolon after the closing \\n\\n\\n\\n\\n\\n\\n\\nYou should also include a name for the structure in between the \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nkeyword and the opening brace. This is optional, but if you leave \\n\\n\\nout, you can’t refer to that structure data type later on (without \\n\\ntypedef, see The typedef \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nHere is an example of defining a simple structure for holding the X \\n\\n\\n\\nY coordinates of a \\n\\n\\n\\n\\n\\n\\n\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        int x, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThat defines a structure type named struct point, \"}]","[{\"text\":\"which contains \\n\\n\\n\\nmembers, x and y, both of which are of type \\n\\n\\n\\n\\n\\nStructures (and unions) may contain instances of other structures \\n\\n\\n\"}]","[{\"text\":\"\\nunions, but of course not themselves. It is possible for a structure \\n\\n\\nunion type to contain a field which is a pointer to the same type \\n\\n\\n\\n\\nIncomplete \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Accessing Structure Members, Previous: Defining Structures, \\n\\n\\n\\nStructures   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.4.2 Declaring Structure \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can declare variables of a structure type when both \"}]","[{\"text\":\"you \\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndefine the structure and after the definition, provided you gave \\n\\n\\n\"}]","[{\"text\":\"\\nstructure type a \\n\\n\\n\\n\\n\\n\\n  --------------------------------------------------- ---- \\n\\n\\n  • Declaring Structure Variables at \"}]","[{\"text\":\"Definition:           \\n  • Declaring Structure Variables After Definition:        \\n  • Initializing Structure Members:                        \\n  --------------------------------------------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Declaring Structure Variables After Definition, Up: \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nStructure Variables   \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.4.2.1 Declaring Structure Variables at \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can declare variables of a \"}]","[{\"text\":\"structure type when you define \\n\\n\\n\\nstructure type by putting the variable names after the closing brace \\n\\n\\nthe structure definition, but before the final semicolon. You \\n\\n\\n\"}]","[{\"text\":\"\\ndeclare more than one such variable by separating the names with \\n\\n\\n\\n\\n\\n\\n\\n\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        int x, \\n\\n\\n      } first_point, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThat example declares two variables of type struct point, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nand \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Initializing Structure Members, Previous: Declaring \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nVariables at Definition, Up: \"}]","[{\"text\":\"Declaring Structure Variables  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.4.2.2 Declaring Structure Variables After \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can declare variables of a \"}]","[{\"text\":\"structure type after defining \\n\\n\\n\\nstructure by using the struct keyword and the name you gave \\n\\n\\n\\nstructure type, followed by one or more variable names separated \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        int x, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    struct point first_point, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThat example declares two variables of type struct point, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nand \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Declaring Structure Variables After Definition, Up: \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nStructure Variables   \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.4.2.3 Initializing Structure \\n\\n\\n\\n\\n\\n\\n\\n\\nYou can initialize the members of a structure type to have \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nvalues when you declare structure \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nIf you do not initialize a structure variable, the \"}]","[{\"text\":\"effect depends \\n\\n\\nwhether it has static storage (see Storage Class Specifiers) or not. \\n\\n\\nit is, members with integral types are initialized with 0 and \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nmembers are initialized to NULL; otherwise, the value of the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nmembers is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nOne way to initialize a structure is to specify the values in a set \\n\\n\\nbraces and separated by commas. Those values are assigned to \\n\\n\\n\\nstructure members in the same order that the members \"}]","[{\"text\":\"are declared in \\n\\n\\n\\nstructure in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        int x, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    struct point first_point = { 5, 10 \\n\\n\\n\\nIn that example, the x member of first_point gets the value 5, and the \\n\\nmember gets the value \\n\\n\\n\\n\\nAnother way to \"}]","[{\"text\":\"initialize the members is to specify the name of \\n\\n\\n\\nmember to initialize. This way, you can initialize the members in \\n\\n\\n\\norder you like, and even leave some of them \"}]","[{\"text\":\"uninitialized. There are \\n\\n\\n\\nmethods that you can use. The first method is available in C99 and as \\n\\nC89 extension in \\n\\n\\n\\n\\n\\n    struct point first_point = { .y \"}]","[{\"text\":\"= 10, .x = 5 \\n\\n\\n\\nYou can also omit the period and use a colon instead of ‘=’, though \\n\\n\\n\\n\\nis a GNU C \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    struct point first_point = { y: 10, x: 5 \\n\\n\\n\\nYou can also initialize the structure variable’s members when \\n\\n\\n\\ndeclare the variable during the structure \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        int x, \\n\\n\"}]","[{\"text\":\"\\n      } first_point = { 5, 10 \\n\\n\\n\\nYou can also initialize fewer than all of a structure \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        int x, \\n\\n\\n        char \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    struct pointy first_pointy = { 5 \\n\\n\\n\\nHere, x is initialized with 5, y is initialized with 0, and p \\n\\n\\ninitialized with NULL. The rule here is that y and p are \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\njust as they would be if they were static \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHere is another example that \"}]","[{\"text\":\"initializes a structure’s members which \\n\\n\\n\\nstructure variables \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        int x, \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        struct point top_left, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    struct rectangle my_rectangle = { {0, 5}, {10, 0} \\n\\n\\n\\nThat example defines the rectangle structure to consist of two \\n\\n\\n\\n\\n\\nstructure variables. Then it \"}]","[{\"text\":\"declares one variable of \\n\\n\\n\\n\\nstruct rectangle and initializes its members. Since its members \\n\\n\\n\\nstructure variables, we used an extra set of braces \"}]","[{\"text\":\"surrounding \\n\\n\\n\\nmembers that belong to the point structure variables. However, \\n\\n\\n\\n\\n\\nextra braces are not necessary; they just make the code \"}]","[{\"text\":\"easier to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Bit Fields, Previous: Declaring Structure Variables, \\n\\n\\n\\nStructures   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.4.3 Accessing Structure \\n\\n\\n\\n\\n\\n\\n\\n\\nYou can access the members of a structure variable using the \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\naccess operator. You put the name of the structure variable on the \\n\\n\\n\\n\\nside of the operator, and the name of the member on the right \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        int x, \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    struct point \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    first_point.x = \\n\\n\\n    first_point.y = \\n\\n\\n\\nYou can also access the members of a structure variable which is \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\na member of a structure \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        struct point top_left, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    struct rectangle \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    my_rectangle.top_left.x = \\n\\n\\n    my_rectangle.top_left.y = \\n\\n\\n\\n    my_rectangle.bottom_right.x = \\n\\n\\n\\n    my_rectangle.bottom_right.y = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Size of Structures, Previous: Accessing Structure Members, \\n\\n\\n\\nStructures   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.4.4 Bit \\n\\n\\n\\n\\n\\n\\n\\nYou can create structures with integer members of nonstandard \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ncalled _bit fields_. You do this by specifying an integer (int, \\n\\n\\n\\n\\n\\nlong int, etc.) member as usual, and inserting a colon and the number \\n\\n\\nbits that the \"}]","[{\"text\":\"member should occupy in between the member’s name and \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        unsigned int suit : \\n\\n\"}]","[{\"text\":\"\\n        unsigned int face_value : \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThat example defines a structure \"}]","[{\"text\":\"type with two bit fields, suit \\n\\n\\n\\nface_value, which take up 2 bits and 4 bits, respectively. suit can \\n\\n\\n\\n\\nvalues from 0 to 3, and face_value can hold values from \"}]","[{\"text\":\"0 to 15. \\n\\n\\n\\n\\n\\n\\nthat these bit fields were declared as unsigned int; had they \\n\\n\\n\\n\\nsigned integers, \"}]","[{\"text\":\"then their ranges would have been from -2 to 1, \\n\\n\\n\\nfrom -8 to 7, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nMore generally, the range of an unsigned bit field of _N_ bits is from \\n\\nto _2^N - 1_, and the range of a signed bit field of _N_ bits is \\n\\n\\n\\n\\n_-(2^N) / 2_ to _((2^N) / 2) - \\n\\n\\n\"}]","[{\"text\":\"\\nBit fields can be specified without a name in order to control \\n\\n\\n\\n\\n\\nactual bits within the containing unit are used. However, the effect \\n\\n\\nthis is not very \"}]","[{\"text\":\"portable and it is rarely useful. You can also \\n\\n\\n\\n\\n\\n\\n\\na bit field of size 0, which indicates that subsequent bit fields \\n\\n\\n\"}]","[{\"text\":\"\\nfurther bit fields should be packed into the unit containing \\n\\n\\n\\nprevious bit field. This is likewise not generally \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nYou may not take the address of a bit field with the address operator \\n\\n(see Pointer \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Bit Fields, Up: Structures   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.4.5 Size of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThe size of a structure type is equal to the sum of the size of all \\n\\n\"}]","[{\"text\":\"\\nits members, possibly including padding to cause the structure type \\n\\n\\nalign to a particular byte boundary. The details vary depending on \\n\\n\\n\\n\\ncomputer platform, but it would not \"}]","[{\"text\":\"be atypical to see structures \\n\\n\\n\\n\\n\\n\\nto align on four- or eight-byte boundaries. This is done in order \\n\\n\\nspeed up memory accesses of \"}]","[{\"text\":\"instances of the structure \\n\\n\\n\\n\\n\\n\\nAs a GNU extension, GCC allows structures with no members. \\n\\n\\n\\n\"}]","[{\"text\":\"\\nstructures have zero \\n\\n\\n\\n\\n\\n\\nIf you wish to explicitly omit padding from your structure types \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nmay, in turn, decrease the speed of structure memory accesses), then \\n\\n\\n\\nprovides multiple methods of turning packing off. The quick and \\n\\n\\n\\n\\nmethod is to use \"}]","[{\"text\":\"the -fpack-struct compiler option. For more details \\n\\n\\nomitting packing, please see the GCC manual which corresponds to \\n\\n\\n\\n\\nversion of the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Pointers, Previous: Structures, Up: Data Types   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.5 \\n\\n\\n\\n\\n\\n\\n\\nAn array is a data structure that lets you store one or more \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nconsecutively in memory. In C, array elements are indexed beginning \\n\\n\\nposition zero, not \\n\\n\\n\\n\\n\\n  ----------------------------- ---- \\n\\n\"}]","[{\"text\":\"\\n  • Declaring Arrays:                \\n  • Initializing Arrays:             \\n  • Accessing Array Elements:        \\n  • Multidimensional Arrays:         \\n  • Arrays as Strings:               \\n  • Arrays of Unions:                \\n  • Arrays of Structures:            \"}]","[{\"text\":\"\\n  ----------------------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Initializing Arrays, Up: Arrays   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.5.1 Declaring \\n\\n\\n\\n\\n\\n\\n\\nYou declare an array by specifying the data type for its elements, \\n\\n\\n\\nname, and the number of elements it \"}]","[{\"text\":\"can store. Here is an example \\n\\n\\n\\n\\ndeclares an array that can store ten \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    int \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nFor standard C code, the number of elements in an array must \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nAs a GNU extension, the number of elements can be as small as \\n\\n\\n\\n\\n\\nZero-length arrays are useful as the last element of a structure \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nis really a header for a variable-length \\n\\n\\n\\n\\n\\n\\n\\n\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      int \\n\\n\\n\\n\\n\\n\\n\\n      char \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      struct line *this_line = (struct line \\n\\n\\n        malloc (sizeof (struct line) + \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      this_line -> length = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nAnother GNU extension allows you to declare an array size \\n\\n\\n\\n\\n\\nvariables, rather than only constants. For example, here is a \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ndefinition that declares an array using its parameter as the number \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    my_function (int \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      int \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Accessing Array Elements, Previous: Declaring Arrays, Up: Arrays  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.5.2 Initializing \\n\\n\\n\\n\\n\\n\\n\\nYou can initialize the elements in an array when you declare it \\n\\n\\nlisting the initializing values, \"}]","[{\"text\":\"separated by commas, in a set \\n\\n\\nbraces. Here is an \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    int my_array[5] = { 0, 1, 2, 3, \"}]","[{\"text\":\"4 \\n\\n\\n\\nYou don’t have to explicitly initialize all of the array elements. \\n\\n\\n\\nexample, this code initializes the first three elements as \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nand then initializes the last two elements to a default value of \\n\\n\\n\\n\\n\\n\\n    int my_array[5] = { 0, 1, 2 \\n\\n\\n\\nWhen using either ISO C99, or C89 \"}]","[{\"text\":\"with GNU extensions, you \\n\\n\\n\\ninitialize array elements out of order, by specifying which \\n\\n\\n\\n\\n\\nindices to initialize. To do this, \"}]","[{\"text\":\"include the array index in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nand optionally the assignment operator, before the value. Here is \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    int my_array[5] = { [2] 5, [4] 9 \\n\\n\\n\\nOr, using the assignment \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    int my_array[5] = { [2] = 5, [4] = 9 \\n\\n\\n\\nBoth of those examples are equivalent \\n\\n\\n\\n\\n    int my_array[5] = { 0, 0, 5, 0, 9 \\n\\n\"}]","[{\"text\":\"\\n\\nWhen using GNU extensions, you can initialize a range of elements to \\n\\n\\n\\nsame value, by specifying the first and last indices, in the \\n\\n\\n\\n\\n [first] ... \"}]","[{\"text\":\"[last] . Here is an \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    int new_array[100] = { [0 ... 9] = 1, [10 ... 98] = 2, 3 \\n\\n\"}]","[{\"text\":\"\\n\\nThat initializes elements 0 through 9 to 1, elements 10 through 98 to \\n\\n\\nand element 99 to 3. (You also could explicitly write [99] = 3.) \\n\\n\\n\\n\\n\\nnotice that you \"}]","[{\"text\":\"_must_ have spaces on both sides of the \\n\\n\\n\\n\\n\\n\\n\\nIf you initialize every element of an array, then you do not have \\n\\n\\nspecify its size; \"}]","[{\"text\":\"its size is determined by the number of elements \\n\\n\\n\\ninitialize. Here is an \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    int my_array[] = { 0, 1, 2, 3, 4 \\n\\n\\n\\nAlthough this does not explicitly state that the array has five \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nusing my_array[5], it initializes five elements, so that is how many \\n\\n\\n\\n\\n\\n\\n\\n\\nAlternately, if you specify which elements to initialize, then the \\n\\n\\n\\n\"}]","[{\"text\":\"\\nof the array is equal to the highest element number initialized, \\n\\n\\n\\n\\none. For \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    int my_array[] = { 0, 1, 2, [99] = 99 \\n\\n\\n\\nIn that example, only four elements are initialized, but the last \\n\\n\\n\\ninitialized is element number 99, so there are 100 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Multidimensional Arrays, Previous: Initializing Arrays, Up: \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.5.3 Accessing Array \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can access the elements of an array by specifying the array \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nfollowed by the element index, enclosed in brackets. Remember that \\n\\n\\n\\narray elements are numbered starting with zero. Here is an \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    my_array[0] = \\n\\n\\n\\nThat assigns the value 5 to the first element in the array, at \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nzero. You can treat individual array elements like variables of \\n\\n\\n\\n\\n\\n\\n\\n\\ndata type the array is made up of. For example, if you \"}]","[{\"text\":\"have an \\n\\n\\n\\n\\n\\nmade of a structure data type, you can access the structure \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nlike \\n\\n\\n\\n\\n\\n\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      int x, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    struct point point_array[2] = { {4, 5}, {8, 9} \\n\\n\"}]","[{\"text\":\"\\n    point_array[0].x = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Arrays as Strings, Previous: Accessing Array Elements, Up: \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.5.4 Multidimensional \\n\\n\\n\\n\\n\\n\\n\\nYou can make multidimensional arrays, or “arrays of arrays”. You do \\n\\n\\n\\n\"}]","[{\"text\":\"\\nby adding an extra set of brackets and array lengths for \\n\\n\\n\\n\\n\\nadditional dimension you want your array to have. For example, here is \\n\\ndeclaration for a two-dimensional \"}]","[{\"text\":\"array that holds five elements in \\n\\n\\n\\n\\ndimension (a two-element array consisting of five-element \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    int two_dimensions[2][5] { {1, 2, 3, 4, 5}, {6, 7, 8, 9, 10} \\n\\n\\n\\nMultidimensional array elements are accessed by specifying the \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nindex of both \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    two_dimensions[1][3] = \\n\\n\"}]","[{\"text\":\"\\nIn our example, two_dimensions[0] is itself an array. The \\n\\n\\n\\n\\n\\n\\n\\ntwo_dimensions[0][2] is followed by two_dimensions[0][3], not \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Arrays of Unions, Previous: Multidimensional Arrays, Up: Arrays  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.5.5 Arrays as \\n\\n\\n\\n\\n\\n\\n\\n\\nYou can use an array of characters to hold a string (see \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nConstants). The array may be built of either signed or \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nWhen you declare the array, you can specify the number of elements \\n\\n\\nwill have. That number will be the maximum number of characters \\n\\n\\n\\n\\nshould be in the string, including \"}]","[{\"text\":\"the null character used to end \\n\\n\\n\\nstring. If you choose this option, then you do not have to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nthe array when you declare it. Alternately, you can simply \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nthe array to a \"}]","[{\"text\":\"value, and its size will then be exactly large enough \\n\\n\\nhold whatever string you used to initialize \\n\\n\\n\\n\\nThere are two different ways to initialize the array. You can specify \\n\\n\"}]","[{\"text\":\"\\ncomma-delimited list of characters enclosed in braces, or you \\n\\n\\n\\nspecify a string literal enclosed in double quotation \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nHere are some \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    char \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    char yellow[26] = {'y', 'e', 'l', 'l', 'o', 'w', \\n\\n\\n\\n\\n\\n\\n    char orange[26] = \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    char gray[] = {'g', 'r', 'a', 'y', \\n\\n\\n\\n\\n\\n\\n    char salmon[] = \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nIn each of these cases, the null character \\\\0 is included at the end \\n\\n\\nthe string, even when not explicitly stated. (Note that if \\n\\n\\n\\ninitialize a string using an array of individual \"}]","[{\"text\":\"characters, then \\n\\n\\n\\nnull character is _not_ guaranteed to be present. It might be, but \\n\\n\\n\\n\\nan occurrence would be one of chance, and should not be relied \\n\\n\\n\"}]","[{\"text\":\"\\n\\nAfter initialization, you cannot assign a new string literal to an \\n\\n\\n\\n\\n\\nusing the assignment operator. For example, this _will not \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    char lemon[26] = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    lemon = \\\"steak sauce\\\";      /* Fails! \\n\"}]","[{\"text\":\"\\n\\nHowever, there are functions in the GNU C library that \\n\\n\\n\\n\\n\\n\\n\\noperations (including copy) on string arrays. You can also change \\n\\n\\n\"}]","[{\"text\":\"\\ncharacter at a time, by accessing individual string elements as \\n\\n\\n\\nwould any other \\n\\n\\n\\n\\n\\n\\n\\n    char name[] = \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    name[0] = \\n\\n\\n\\n\\n\\nIt is possible for you to explicitly state the number of elements in \\n\\n\\n\\narray, and then initialize it using a string that has more \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nthan there are elements in the array. This is not a good thing. \\n\\n\\n\\nlarger string will _not_ override the previously specified size of \\n\\n\\n\\narray, and you will get a \"}]","[{\"text\":\"compile-time warning. Since the original \\n\\n\\n\\n\\n\\nsize remains, any part of the string that exceeds that original size \\n\\n\\nbeing written to a memory location \"}]","[{\"text\":\"that was not allocated for \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Arrays of Structures, Previous: Arrays as Strings, Up: Arrays  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.5.6 Arrays of \\n\\n\\n\\n\\n\\n\\n\\nYou can create an array of a union type just as you can an array of \\n\\nprimitive data \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    union \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        int \\n\\n\\n        float \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    union numbers \"}]","[{\"text\":\"number_array \\n\\n\\n\\n\\n\\nThat example creates a 3-element array of union numbers variables \\n\\n\\n\\n\\n\\n\\nnumber_array. You \"}]","[{\"text\":\"can also initialize the first members of the \\n\\n\\n\\n\\n\\n\\n\\n\\nof a number \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    union numbers number_array [3] = { {3}, {4}, {5} \\n\\n\\n\\nThe additional inner grouping braces are \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nAfter initialization, you can still access the union members in \\n\\n\\n\\narray using the member access operator. You put the array name \\n\\n\\n\\nelement number (enclosed in \"}]","[{\"text\":\"brackets) to the left of the operator, \\n\\n\\n\\nthe member name to the \\n\\n\\n\\n\\n\\n\\n\\n    union numbers number_array \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    number_array[0].i = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Arrays of Unions, Up: Arrays   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.5.7 Arrays of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can create an array of a structure type just as you can an array \\n\\n\"}]","[{\"text\":\"\\na primitive data \\n\\n\\n\\n\\n\\n\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        int x, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    struct point point_array \\n\\n\\n\"}]","[{\"text\":\"\\n\\nThat example creates a 3-element array of struct point variables \\n\\n\\n\\n\\n\\n\\npoint_array. You can also initialize the elements of a structure \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    struct point point_array [3] = { {2, 3}, {4, 5}, {6, 7} \\n\\n\\n\\nAs with initializing structures which contain structure members, \\n\\n\\n\\nadditional inner grouping braces are optional. But, if \"}]","[{\"text\":\"you use \\n\\n\\n\\nadditional braces, then you can partially initialize some of \\n\\n\\n\\nstructures in the array, and fully initialize \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    struct point point_array [3] = { {2}, {4, 5}, {6, 7} \\n\\n\\n\\nIn that example, the first element of the array has only its x \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ninitialized. Because of the grouping braces, the value 4 is assigned \\n\\n\\nthe x member of the second array element, _not_ to the y member of \\n\\n\\n\\nfirst element, as would be the case without the \"}]","[{\"text\":\"grouping \\n\\n\\n\\n\\n\\n\\n\\n\\nAfter initialization, you can still access the structure members in \\n\\n\\n\"}]","[{\"text\":\"\\narray using the member access operator. You put the array name \\n\\n\\n\\nelement number (enclosed in brackets) to the left of the operator, \\n\\n\\n\\nthe member name to the \\n\\n\\n\"}]","[{\"text\":\"\\n\\n    struct point point_array \\n\\n\\n\\n\\n    point_array[0].x = \\n\\n\\n    point_array[0].y = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Incomplete Types, Previous: Arrays, Up: Data Types  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.6 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nPointers hold memory addresses of stored constants or variables. For \\n\\n\\n\"}]","[{\"text\":\"\\ndata type, including both primitive types and custom types, you \\n\\n\\n\\ncreate a pointer that holds the memory address of an instance of \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n  --------------------------- ---- \\n\\n\\n  • Declaring Pointers:            \\n  • Initializing Pointers:         \\n  • Pointers to Unions:            \\n  • Pointers to Structures:        \\n  --------------------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Initializing Pointers, Up: Pointers   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.6.1 Declaring \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou declare a pointer by specifying a name for it and a data type. \\n\\n\\n\"}]","[{\"text\":\"\\ndata type indicates of what type of variable the pointer will \\n\\n\\n\\n\\nmemory \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nTo declare a pointer, include the indirection operator (see \\n\\n\\n\\n\\n\\n\\n\\nOperators) before the identifier. Here is the general form of a \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    data-type * \\n\\n\\n\\n\\n\\n\\nWhite space is not significant around the indirection \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    data-type \\n\\n\\n\\n\\n\\n\\n    data-type* \\n\\n\\n\\n\\n\\n\\nHere is an example of declaring a \"}]","[{\"text\":\"pointer to hold the address of an \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    int \\n\\n\\n\\n\\n\\nBe careful, though: when declaring multiple pointers in the \\n\\n\\n\\n\\nstatement, you must explicitly declare each as a \"}]","[{\"text\":\"pointer, using \\n\\n\\n\\nindirection \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    int *foo, \"}]","[{\"text\":\"*bar;  /* Two pointers. \\n\\n\\n    int *baz, quux;   /* A pointer and an integer variable. \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Pointers to Unions, Previous: Declaring Pointers, Up: Pointers  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.6.2 Initializing \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can initialize a pointer when you first declare it by specifying \\n\\nvariable address \"}]","[{\"text\":\"to store in it. For example, the following \\n\\n\\n\\n\\ndeclares an int variable ‘i’, and a pointer which is initialized \\n\\n\\n\\n\\nthe address of \\n\\n\"}]","[{\"text\":\"\\n\\n    int \\n\\n\\n    int *ip = \\n\\n\\n\\n\\nNote the use of the address operator (see Pointer Operators), used \\n\\n\\nget the memory address of a variable. After you declare \"}]","[{\"text\":\"a pointer, \\n\\n\\n\\ndo _not_ use the indirection operator with the pointer’s name \\n\\n\\n\\n\\nassigning it a new address to point to. On the contrary, that \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nchange the value of the variable that the points to, not the value \\n\\n\\nthe pointer itself. For \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    int i, \\n\\n\\n    int *ip = &i;  /* ‘ip’ now holds the address of ‘i’. \\n\\n\\n    ip = &j;       /* ‘ip’ now holds the address of ‘j’. \\n\\n\\n    *ip = &i;      /* ‘j’ now holds \"}]","[{\"text\":\"the address of ‘i’. \\n\\n\\n\\nThe value stored in a pointer is an integral number: a location \\n\\n\\n\\n\\n\\n\\nthe computer’s memory space. If you \"}]","[{\"text\":\"are so inclined, you can \\n\\n\\n\\n\\n\\n\\npointer values explicitly using literal integers, casting them to \\n\\n\\n\\nappropriate \"}]","[{\"text\":\"pointer type. However, we do not recommend this \\n\\n\\n\\n\\n\\n\\n\\n\\nunless you need to have extremely fine-tuned control over what is \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nin memory, and you know exactly what you are doing. It would be all \\n\\n\\n\\neasy to accidentally overwrite something that you did not intend \\n\\n\\n\\nMost uses of this technique are also \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nIt is important to note that if you do not initialize a pointer with \\n\\n\\n\\naddress of some other existing object, it points nowhere in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nand will likely make your program crash if you use it (formally, \\n\\n\\n\\n\\nkind of thing is called _undefined \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Pointers to Structures, Previous: Initializing Pointers, \\n\\n\\n\\nPointers   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.6.3 Pointers to \\n\\n\\n\\n\\n\\n\\n\\nYou can create a pointer to a union type just as you can a pointer to \\n\\nprimitive data \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    union \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        int \\n\\n\\n        float \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    union numbers \"}]","[{\"text\":\"foo = \\n\\n\\n\\n\\n    union numbers *number_ptr = \\n\\n\\n\\n\\n\\n\\nThat example creates a new union type, union numbers, \"}]","[{\"text\":\"and declares \\n\\n\\n\\n\\ninitializes the first member of) a variable of that type named \\n\\n\\n\\n\\nFinally, it declares a pointer to the type union \"}]","[{\"text\":\"numbers, and gives \\n\\n\\nthe address of \\n\\n\\n\\n\\n\\nYou can access the members of a union variable through a pointer, \\n\\n\\n\\nyou can’t use the \"}]","[{\"text\":\"regular member access operator anymore. Instead, \\n\\n\\n\\nhave to use the indirect member access operator (see Member \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nExpressions). Continuing with the previous example, the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nexample will change the value of the \"}]","[{\"text\":\"first member of \\n\\n\\n\\n\\n\\n    number_ptr -> i = \\n\\n\\n\\n\\n\\nNow the i member in foo is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Pointers to Unions, Up: Pointers   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.6.4 Pointers to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can create a pointer to a structure type just as \"}]","[{\"text\":\"you can a \\n\\n\\n\\n\\n\\n\\n\\nto a primitive data \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        float length, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    struct fish salmon = {4.3, \\n\\n\\n\\n\\n\\n    struct fish *fish_ptr = \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThat example creates a new structure type, struct fish, and \\n\\n\\n\\n\\n\\n\\n\\n\\n(and initializes) a variable of that type named salmon. \"}]","[{\"text\":\"Finally, \\n\\n\\ndeclares a pointer to the type struct fish, and gives it the address \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nYou can access the members of a structure variable through a \\n\\n\\n\\n\\n\\n\\n\\n\\nbut you can’t use the regular member access operator \"}]","[{\"text\":\"anymore. \\n\\n\\n\\n\\n\\n\\n\\n\\nyou have to use the indirect member access operator (see Member \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nExpressions). Continuing with the previous example, the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nexample will change the values of \"}]","[{\"text\":\"the members of \\n\\n\\n\\n\\n\\n\\n\\n\\n    fish_ptr -> length = \\n\\n\\n\\n\\n    fish_ptr -> \"}]","[{\"text\":\"weight = \\n\\n\\n\\n\\n\\nNow the length and width members in salmon are 5.1 and \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Type Qualifiers, Previous: Pointers, Up: Data Types  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.7 Incomplete \\n\\n\\n\\n\\n\\n\\nYou can define structures, unions, and enumerations without \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ntheir members (or values, in the case of enumerations). Doing so \\n\\n\\n\\n\\n\\n\\n\\nin an incomplete type. You can’t declare variables of incomplete \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nbut you can work with pointers to those \\n\\n\\n\\n\\n\\n\\n\\n    struct \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nAt some time later in your program you will want to complete the \\n\\n\\n\\n\\n\\nYou do this by defining it as you usually \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        int x, \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThis technique is commonly used to for linked \\n\\n\\n\\n\\n\\n\\n\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        struct singly_linked_list \\n\\n\\n\\n\\n\\n\\n        int \\n\\n\\n        /* other members here perhaps \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    struct singly_linked_list \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Storage Class Specifiers, Previous: Incomplete Types, Up: \\n\\n\\n\\n\\nTypes   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.8 Type \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThere are two type qualifiers that you can prepend to your \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ndeclarations which change how the variables may be accessed: const \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nconst causes the variable to be read-only; after initialization, \\n\\n\\n\\nvalue may not be \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    const float pi = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nIn addition to helping to prevent accidental value \"}]","[{\"text\":\"changes, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvariables with const can aid the compiler in code \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nvolatile tells the compiler that the variable is explicitly \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nand seemingly useless accesses of the variable (for instance, \\n\\n\\n\\npointers) should not be optimized away. You might use volatile \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nto store data that is updated via callback functions or signal \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nSequence Points and Signal \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    volatile float currentTemperature = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Renaming Types, Previous: Type Qualifiers, Up: Data Types  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.9 Storage Class \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThere are four storage class specifiers that you can \"}]","[{\"text\":\"prepend to \\n\\n\\n\\n\\nvariable declarations which change how the variables are stored \\n\\n\\nmemory: auto, extern, register, and \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nYou use auto for variables which are local to a function, and \\n\\n\\n\\n\\n\\nvalues should be discarded upon return from the function in which \\n\\n\\n\\n\"}]","[{\"text\":\"\\nare declared. This is the default behavior for variables declared \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    foo (int \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      auto int x = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nregister is nearly identical in purpose to auto, except that it \\n\\n\\n\\n\\nsuggests to the compiler that the variable will be heavily used, and, \\n\\n\\npossible, should be stored in a \"}]","[{\"text\":\"register. You cannot use the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\noperator to obtain the address of a variable declared \"}]","[{\"text\":\"with \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThis means that you cannot refer to the elements of an array \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nwith storage class register. In fact the only thing you can do with \\n\\n\\n\\n\\nan array is measure its size with sizeof. GCC normally makes \\n\\n\\n\\n\"}]","[{\"text\":\"\\nchoices about which values to hold in registers, and so register is \\n\\n\\n\\noften \\n\\n\\n\\n\\n\\n\\nstatic is essentially the opposite \"}]","[{\"text\":\"of auto: when applied to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nwithin a function or block, these variables will retain their value \\n\\n\\n\\n\"}]","[{\"text\":\"\\nwhen the function or block is finished. This is known as _static \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    sum (int \\n\\n\\n\\n\\n\\n\\n\\n\\n      static int sumSoFar = \\n\\n\\n      sumSoFar = sumSoFar + \\n\\n\"}]","[{\"text\":\"\\n      return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nYou can also declare variables (or functions) at the top level (that \\n\\n\\n\\nnot inside a function) to be static; such variables are visible \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nto the current source file (but not other source files). This gives \\n\\n\\nunfortunate double meaning to static; this second meaning is known \\n\\n\\n_static linkage_. Two functions or variables having static linkage \\n\\n\"}]","[{\"text\":\"\\nseparate files are entirely separate; neither is visible outside \\n\\n\\n\\nfile in which it is \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nUninitialized variables that are declared as extern are given \\n\\n\\n\\n\\n\\n\\n\\nvalues of 0, 0.0, or NULL, depending on the type. \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nvariables that are declared as auto or register (including the \\n\\n\\n\\n\\n\\n\\n\\nusage of auto) are left uninitialized, and hence should not be \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nto hold any particular \\n\\n\\n\\n\\n\\n\\n\\nextern is useful for declaring variables that you want to be visible \\n\\n\\nall source files that are linked \"}]","[{\"text\":\"into your project. You \\n\\n\\n\\n\\n\\n\\ninitialize a variable in an extern declaration, as no space is \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nallocated during the declaration. You must make both an \\n\\n\\n\\n\\n\\n\\ndeclaration (typically in a header file that is included by the \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nsource files which need to access the variable) and a \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndeclaration which is where space is \"}]","[{\"text\":\"actually allocated to store \\n\\n\\n\\nvariable. The extern declaration may be repeated multiple \\n\\n\\n\\n\\n\\n\\n\\n    extern int \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    int numberOfClients = \\n\\n\\n\\nSee Program Structure and Scope, for related \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Storage Class Specifiers, Up: Data Types   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.10 Renaming \\n\\n\\n\\n\\n\\n\\nSometimes it is convenient to give a new name to a type. You can do \\n\\n\\n\\n\\nusing the typedef \"}]","[{\"text\":\"statement. See The typedef Statement, for \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Statements, Previous: Data Types, Up: Top   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n3 Expressions and \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  ----------------------------------------------- ---- \\n\\n\"}]","[{\"text\":\"\\n  • Expressions:                                       \\n  • Assignment Operators:                              \\n  • Incrementing and Decrementing:                     \\n  • Arithmetic Operators:                              \\n  • Complex \"}]","[{\"text\":\"Conjugation:                               \\n  • Comparison Operators:                              \\n  • Logical Operators:                                 \\n  • Bit Shifting:                                      \\n  • Bitwise Logical \"}]","[{\"text\":\"Operators:                         \\n  • Pointer Operators:                                 \\n  • The sizeof Operator:                               \\n  • Type Casts:                                        \\n  • Array Subscripts:                                  \\n  • \"}]","[{\"text\":\"Function Calls as Expressions:                     \\n  • The Comma Operator:                                \\n  • Member Access Expressions:                         \\n  • Conditional Expressions:                           \\n  • Statements and Declarations in \"}]","[{\"text\":\"Expressions:        \\n  • Operator Precedence:                               \\n  • Order of Evaluation:                               \\n  ----------------------------------------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Assignment Operators, Up: Expressions and Operators  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.1 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nAn _expression_ consists of at least \"}]","[{\"text\":\"one operand and zero or \\n\\n\\n\\n\\noperators. Operands are typed objects such as constants, variables, \\n\\n\\n\\nfunction calls that return values. Here are some \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    2 + \\n\\n    cosine(3.14159) /* We presume this returns a floating point value. \\n\\n\\n\\nParentheses group \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    ( 2 * ( ( 3 + 10 ) - ( 2 * 6 ) ) \\n\\n\\nInnermost expressions are evaluated first. In the above example, 3 + \\n\\n\\nand 2 * 6 evaluate to 13 and 12, respectively. Then 12 is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nfrom 13, resulting in 1. Finally, 1 is multiplied by 2, resulting in \\n\\n\\nThe outermost parentheses are completely \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nAn _operator_ specifies an operation to be performed on its \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nOperators may have one, two, or three operands, depending on \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Incrementing and Decrementing, Previous: Expressions, \\n\\n\\n\\nExpressions and Operators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.2 Assignment \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nAssignment operators store values in variables. C provides \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nvariations of assignment \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThe standard assignment operator = simply stores the \"}]","[{\"text\":\"value of its \\n\\n\\n\\n\\n\\noperand in the variable specified by its left operand. As with \\n\\n\\n\\nassignment operators, the left operand (commonly \"}]","[{\"text\":\"referred to as \\n\\n\\n\\n“lvalue”) cannot be a literal or constant \\n\\n\\n\\n\\n\\n\\n\\n    int x = \\n\\n\\n\"}]","[{\"text\":\"\\n    float y = 45.12 + \\n\\n\\n\\n\\n    int z = (2 * (3 + function () \\n\\n\\n\\n\\n    struct foo \\n\\n      int \\n\\n\\n\\n\"}]","[{\"text\":\"\\n      int \\n\\n\\n\\n\\n    } quux = {3, \\n\\n\\n\\n\\nNote that, unlike the other assignment operators described below, \\n\\n\\n\"}]","[{\"text\":\"\\ncan use the plain assignment operator to store values of a \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nCompound assignment operators perform an operation involving both \\n\\n\\n\\nleft and right operands, and then assign the resulting expression to \\n\\n\\n\\nleft operand. Here is a list of the \"}]","[{\"text\":\"compound assignment operators, and \\n\\nbrief description of what they \\n\\n\\n\\n\\n-   \\n\\n\\n\\n    Adds the two operands together, and then assign the result of \\n\\n\\n\"}]","[{\"text\":\"\\n    addition to the left \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n-   \\n\\n\\n\\n    Subtract the right operand from the left operand, \"}]","[{\"text\":\"and then \\n\\n\\n\\n\\n\\n\\n    the result of the subtraction to the left \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n-   \\n\\n\\n\\n    Multiply the two operands together, and then assign the result \\n\\n\\n    the multiplication to the left \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n-   \\n\\n\\n\\n    Divide the left operand by the right operand, and assign the \\n\\n\\n\\n\\n\\n\\n    of the division to the left \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n-   \\n\\n\\n\\n    Perform modular division on the two operands, and assign the \\n\\n\\n\\n\\n\\n\\n    of the division to the left \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n-   \\n\\n\\n\\n\\n    Perform a left shift operation on the left operand, shifting by \\n\\n\\n\\n    number of bits specified by the right operand, and assign the \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    of the shift to the left \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n-   \\n\\n\\n\\n\\n    Perform a \"}]","[{\"text\":\"right shift operation on the left operand, shifting by \\n\\n\\n\\n    number of bits specified by the right operand, and assign the \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    of the shift to the left \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n-   \\n\\n\\n\\n    Perform a bitwise conjunction operation on the two \"}]","[{\"text\":\"operands, \\n\\n\\n\\n    assign the result of the operation to the left \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n-   \\n\"}]","[{\"text\":\"\\n\\n    Performs a bitwise exclusive disjunction operation on the \\n\\n\\n\\n    operands, and assign the result of the operation to the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n-   \\n\\n\\n\\n    Performs a bitwise inclusive disjunction operation on the \\n\\n\\n\\n    operands, and assign the result of the operation to the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nHere is an example of using one of the compound assignment \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    x += \\n\"}]","[{\"text\":\"\\n\\nSince there are no side effects wrought by evaluating the variable x \\n\\n\\nan lvalue, the above code produces the same result \\n\\n\\n\\n\\n    x = x + \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Arithmetic Operators, Previous: Assignment Operators, \\n\\n\\n\\nExpressions and Operators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.3 Incrementing and \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThe increment \"}]","[{\"text\":\"operator ++ adds 1 to its operand. The operand must be \\n\\neither a variable of one of the primitive data types, a pointer, or \\n\\n\\nenumeration variable. You can apply the increment operator either \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nor after the operand. Here are some \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    char w = \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    int x = \\n\\n\\n    char y = \\n\\n\\n\\n\\n    float z = \\n\\n\\n\\n\\n    int *p = \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    ++w;   /* w is now the character ‘2’ (not the value 2). \\n\\n\\n    x++;   /* x is now 6. \\n\\n\\n    ++y;   /* y is now ‘C’ (on ASCII systems). \\n\\n\\n    z++;   /* z is now 6.2. \\n\\n\"}]","[{\"text\":\"\\n    ++p;   /* p is now &x + sizeof(int). \\n\\n\\n\\n(Note that incrementing a pointer only makes sense if you have reason \\n\\n\\nbelieve that the new pointer value will be a valid memory \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nA prefix increment adds 1 before the operand is evaluated. A \\n\\n\\n\\n\\n\\n\\n\\nincrement adds 1 after the operand is evaluated. In the \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nexamples, changing the position of the operator would make \\n\\n\\ndifference. However, there are cases where it does make a \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    int x = \\n\\n\\n    printf (\\\"%d \\\\n\\\", x++);    /* Print x and then increment it. \\n\\n\\n    /* x is now equal to 6. \\n\\n\\n    printf (\\\"%d \\\\n\\\", ++x);    /* Increment x and then print it. \\n\"}]","[{\"text\":\"\\n\\nThe output of the above example \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nLikewise, you can subtract 1 from an operand using the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    int x = \\n\\n\\n\\n    x--; /* x is now 4. \\n\\n\\n\\nThe concepts of prefix and postfix application apply here as with \\n\\n\\n\\nincrement \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Complex Conjugation, Previous: Incrementing and Decrementing, \\n\\n\\n\\nExpressions and Operators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.4 Arithmetic \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nC provides operators for standard arithmetic operations: \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nsubtraction, multiplication, and division, along with modular \\n\\n\\n\\n\\n\\n\\n\\n\\nand negation. Usage of these operators is \"}]","[{\"text\":\"straightforward; here are \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    /* Addition. \\n\\n\\n    x = 5 + \\n\\n\\n    y = 10.23 + \\n\\n\\n\\n\\n\\n\\n\\n    quux_pointer = foo_pointer + \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    /* Subtraction. \\n\\n\\n    x = 5 - \\n\\n\\n    y = 57.223 - \\n\\n\\n\\n\\n\\n\\n\\n    quux_pointer = foo_pointer - \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nYou can add and subtract memory pointers, but you cannot multiply \\n\\n\\ndivide \\n\\n\\n\\n\\n\\n\\n    /* Multiplication. \\n\\n\"}]","[{\"text\":\"\\n    x = 5 * \\n\\n\\n    y = 47.4 * \\n\\n\\n\\n\\n\\n\\n\\n    /* Division. \\n\\n\\n    x = 5 / \\n\\n\\n    y = 940.0 / \\n\\n\\n\"}]","[{\"text\":\"\\nInteger division of positive values truncates towards zero, so 5/3 is \\n\\n\\nHowever, if either operand is negative, the direction of rounding \\n\\n\\nimplementation-defined. Signed Integer Division for information \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\noverflow in signed integer \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou use the modulus operator % to obtain the remainder \"}]","[{\"text\":\"produced \\n\\n\\ndividing its two operands. You put the operands on either side of \\n\\n\\n\\noperator, and it does matter which operand goes on which side: 3 % 5 \\n\\n\\n\"}]","[{\"text\":\"\\n5 % 3 do not have the same result. The operands must be expressions of \\n\\nprimitive data \\n\\n\\n\\n\\n\\n\\n    /* Modular division. \\n\\n\\n    x = 5 % \\n\\n\"}]","[{\"text\":\"\\n    y = 74 % \\n\\n\\n\\n\\nModular division returns the remainder produced after performing \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ndivision on the two operands. The operands must be of a \\n\\n\\n\\n\\n\\n\\n\\n\\n\\ninteger \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    /* Negation. \\n\\n\\n    int x = \\n\\n\\n\\n    float y = \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nIf the operand you use with the negative operator is of an unsigned \\n\\n\\n\\n\\ntype, then the result cannot negative, but rather is the maximum \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nof the unsigned data type, minus the value of the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nMany systems use twos-complement arithmetic, and on such systems \\n\\n\\n\"}]","[{\"text\":\"\\nmost negative value a signed type can hold is further away from \\n\\n\\n\\n\\nthan the most positive value. For example, on one platform, \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    #include \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    #include \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    int main (int argc, char *argv[]) \\n\\n\\n\\n\\n\\n\\n      int \\n\\n\\n      x = \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      printf(\\\"INT_MAX  = %d\\\\n\\\", \\n\\n\\n\\n      x = \\n\\n\\n\\n\\n\\n\\n\\n\\n      printf(\\\"INT_MIN  = %d\\\\n\\\", \\n\\n\\n\"}]","[{\"text\":\"\\n      x = \\n\\n\\n\\n      printf(\\\"-INT_MIN = %d\\\\n\\\", \\n\\n\\n\\n      return \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nProduces this \\n\\n\\n\\n\\n\\n\\n\\n\\n    INT_MAX  = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    INT_MIN  = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    -INT_MIN = \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nTrivially, you can also apply a positive operator to a \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    int x = \\n\\n\\n\\n\\n\\nNumeric values are assumed to be positive unless explicitly \\n\\n\\n\\n\\nnegative, so this operator has no effect on program \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Comparison Operators, Previous: Arithmetic Operators, \\n\\n\\n\\nExpressions and Operators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.5 Complex \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nAs a GNU extension, you can use the \"}]","[{\"text\":\"complex conjugation operator ~ \\n\\n\\nperform complex conjugation on its operand — that is, it reverses \\n\\n\\n\\nsign of its imaginary component. The operand must be an expression of \\n\\ncomplex number \"}]","[{\"text\":\"type. Here is an \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    __complex__ int x = 5 + \\n\\n\\n\\n\\n     \\n    printf \"}]","[{\"text\":\"(\\\"%d  \\\\n\\\", (x * \\n\\n\\n\\n\\n\\n\\nSince an imaginary number _(a + bi)_ multiplied by its conjugate \\n\\n\\nequal to _a^2 + b^2_, the above printf statement will \"}]","[{\"text\":\"print 314, \\n\\n\\n\\n\\n\\nis equal to _25 + \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Logical Operators, Previous: Complex Conjugation, Up: \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nand Operators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.6 Comparison \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou use the comparison operators to determine how two operands relate \\n\\n\"}]","[{\"text\":\"\\neach other: are they equal to each other, is one larger than the \\n\\n\\n\\n\\n\\n\\nis one smaller than the other, and so on. When you use any of \\n\\n\\n\"}]","[{\"text\":\"\\ncomparison operators, the result is either 1 or 0, meaning true \\n\\n\\nfalse, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n(In the following code examples, the variables x and y stand for any \\n\\n\\n\\nexpressions of arithmetic types, or \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThe equal-to operator == tests its two operands for equality. The \\n\\n\\n\\n\\n\\n\\nis 1 if the operands are equal, and 0 if the operands are not \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    if (x == \\n\\n\\n      puts (\\\"x is equal to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      puts (\\\"x is not equal to \\n\\n\\n\\n\\n\\nThe not-equal-to operator != tests its two operands for inequality. \\n\\n\\n\\nresult is 1 if the operands are not equal, and 0 if the \"}]","[{\"text\":\"operands \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    if (x != \\n\\n\"}]","[{\"text\":\"\\n      puts (\\\"x is not equal to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      puts (\\\"x is equal to \\n\\n\\n\\n\\n\\nComparing floating-point values for exact equality or inequality \\n\\n\\n\\nproduce unexpected results. Real Number Types for more \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nYou can compare function pointers for equality or inequality; \\n\\n\\n\\ncomparison tests if two function pointers point to the same function \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nBeyond equality and inequality, there are operators you can use to \\n\\n\\n\\n\\nif one value is less than, greater than, less-than-or-equal-to, \\n\\n\\ngreater-than-or-equal-to another \"}]","[{\"text\":\"value. Here are some code samples \\n\\n\\n\\n\\nexemplify usage of these \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    if (x < \\n\\n\\n      puts (\\\"x is less than \\n\\n\\n\\n\\n\\n    if (x <= \\n\\n\\n      puts (\\\"x is less than or equal to \\n\\n\\n\"}]","[{\"text\":\"\\n\\n    if (x > \\n\\n\\n      puts (\\\"x is greater than \\n\\n\\n\\n\\n\\n    if (x >= \\n\\n\\n      puts (\\\"x is greater than or equal to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Bit Shifting, Previous: Comparison Operators, Up: Expressions \\n\\n\\n\\nOperators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.7 Logical \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nLogical operators test the truth value of a pair of operands. \\n\\n\\n\"}]","[{\"text\":\"\\nnonzero expression is considered true in C, while an expression \\n\\n\\n\\n\\nevaluates to zero is considered \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThe logical conjunction operator && tests if two expressions are \\n\\n\\n\\n\\ntrue. If the first expression is false, then the second expression \\n\\n\\nnot \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    if ((x == 5) && (y == \\n\\n\\n\\n\\n      printf (\\\"x is 5 and y is \\n\\n\\n\\n\\n\\n\\nThe logical disjunction operator || \"}]","[{\"text\":\"tests if at least one of \\n\\n\\n\\nexpressions it true. If the first expression is true, then the \\n\\n\\n\\n\\n\\n\\nexpression is not \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    if ((x == 5) || (y == \\n\\n\\n\\n\\n       printf (\\\"x is 5 or y is \\n\\n\\n\\n\\n\\n\\nYou can prepend a logical expression \"}]","[{\"text\":\"with a negation operator ! to \\n\\n\\n\\n\\nthe truth \\n\\n\\n\\n\\n\\n\\n\\n    if (!(x == \\n\\n\\n\"}]","[{\"text\":\"\\n      printf (\\\"x is not \\n\\n\\n\\n\\n\\nSince the second operand in a logical expression pair is not \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nevaluated, you can write code with perhaps unintuitive \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    if (foo && \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nIf foo is ever zero, then not only would bar not be called, but x \\n\\n\\n\\n\\n\\nnot be incremented. If you intend to increment x regardless of the \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nof foo, you should do so outside of the conjunction \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Bitwise Logical Operators, Previous: Logical Operators, \\n\\n\\n\\nExpressions and Operators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.8 Bit \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou use the left-shift operator << to shift its first operand’s bits \\n\\n\\nthe left. The \"}]","[{\"text\":\"second operand denotes the number of bit places to \\n\\n\\n\\n\\n\\n\\nBits shifted off the left side of the value are discarded; new \\n\\n\\n\\n\"}]","[{\"text\":\"\\nadded on the right side will all be \\n\\n\\n\\n    x = 47;    /* 47 is 00101111 in binary. \\n\\n\\n    x << 1;    /* 00101111 << 1 is 01011110. \\n\\n\\n\\nSimilarly, you use the right-shift operator >> to \"}]","[{\"text\":\"shift its \\n\\n\\n\\n\\n\\noperand’s bits to the right. Bits shifted off the right side \\n\\n\\n\\ndiscarded; new bits added on the left side are \"}]","[{\"text\":\"_usually_ 0, but if \\n\\n\\n\\nfirst operand is a signed negative value, then the added bits will \\n\\n\\neither 0 _or_ whatever value was previously in the leftmost \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    x = 47;   /* 47 is 00101111 in binary. \\n\\n\\n    x >> 1;   /* 00101111 >> 1 is 00010111. \\n\\n\\n\\nFor both << and >>, if the second operand is greater than the \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nof the first operand, or the second operand is negative, the behavior \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nYou can use the shift operators to perform a variety of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nhacks. For example, given a date with the day of the month numbered \\n\\n\\nd, the month numbered as m, and the year y, you can store the \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ndate in a single number \\n\\n\\n\\n    int d = \\n\\n\\n\\n    int m = \\n\\n\\n    int y = \\n\\n\\n\\n\\n\\n    int x = (((y \"}]","[{\"text\":\"<< 4) + m) << 5) + \\n\\n\\n\\nYou can then extract the original day, month, and year out of x using \\n\\ncombination of shift operators and modular \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    d = x % \\n\\n\\n\\n    m = (x >> 5) % \\n\\n\\n\\n    y = x >> \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Pointer Operators, Previous: Bit Shifting, Up: Expressions \\n\\n\\n\\nOperators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.9 Bitwise Logical \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nC provides operators for performing bitwise \"}]","[{\"text\":\"conjunction, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndisjunction, exclusive disjunction, and negation \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nBiwise conjunction examines each bit in its two operands, and when \\n\\n\\n\\ncorresponding bits are both 1, the resulting bit is 1. All \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nresulting bits are 0. Here is an example of how this works, using \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    11001001 & 10011011 = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nBitwise inclusive disjunction examines each bit in its two operands, \\n\\n\\n\"}]","[{\"text\":\"\\nwhen two corresponding bits are both 0, the resulting bit is 0. \\n\\n\\n\\nother resulting bits are \\n\\n\\n\\n    11001001 | 10011011 = \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nBitwise exclusive disjunction examines each bit in its two operands, \\n\\n\\n\\nwhen two corresponding bits are different, the resulting bit is 1. \\n\\n\\n\\nother resulting bits are \\n\"}]","[{\"text\":\"\\n\\n    11001001 ^ 10011011 = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nBitwise negation reverses each bit in its \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    ~11001001 = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nIn C, you can only use these operators with operands of an integer \\n\\n\\n\"}]","[{\"text\":\"\\ncharacter) type, and for maximum portability, you should only use \\n\\n\\n\\nbitwise negation operator with unsigned integer types. Here are \\n\\n\\n\\n\\nexamples of using \"}]","[{\"text\":\"these operators in C \\n\\n\\n\\n\\n\\n\\n    unsigned int foo = \\n\\n\\n\\n    unsigned int bar = \\n\\n\\n\"}]","[{\"text\":\"\\n    unsigned int \\n\\n\\n\\n\\n\\n\\n    quux = foo & \\n\\n\\n\\n\\n    quux = foo | \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    quux = foo ^ \\n\\n\\n\\n\\n    quux = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: The sizeof Operator, Previous: Bitwise Logical Operators, \\n\\n\\n\\nExpressions and Operators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.10 Pointer \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can use the address operator & to obtain the memory address of \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    int x = \\n\\n\\n    int *pointer_to_x = \\n\\n\\n\\n\\nIt is not necessary to use this operator to obtain the address of \\n\\nfunction, although you \\n\\n\\n\"}]","[{\"text\":\"\\n\\n    extern int foo \\n\\n\\n\\n\\n\\n\\n\\n    int (*fp1) (void) = foo; /* fp1 points to foo \\n\\n\\n    int (*fp2) (void) = &foo; /* fp2 \"}]","[{\"text\":\"also points to foo \\n\\n\\n\\nFunction pointers and data pointers are not compatible, in the \\n\\n\\n\\n\\n\\nthat you cannot expect to store the address of a \"}]","[{\"text\":\"function into a \\n\\n\\n\\n\\npointer, and then copy that into a function pointer and call \\n\\n\\nsuccessfully. It might work on some systems, but it’s not a \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nAs a GNU extension to C89, you can also obtain the address of a \\n\\n\\n\\n\\n\\nwith the label address operator &&. The result is a void* pointer \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ncan be used with goto. See The goto \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nGiven a memory address stored in a pointer, you can \"}]","[{\"text\":\"use the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\noperator * to obtain the value stored at the address. \"}]","[{\"text\":\"(This is \\n\\n\\n\\n\\n\\n\\n_dereferencing_ the \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    int x = \\n\\n\\n    int \\n\\n\\n    int \\n\\n\\n\\n\\n\\n\\n    ptr = &x;    /* ptr now holds the address of x. \\n\\n\"}]","[{\"text\":\"\\n\\n    y = *ptr;    /* y gets the value stored at the \\n\\n\\n\\n\\n\\n\\n\\n                    stored in ptr. \\n\\n\\n\\nAvoid using dereferencing pointers \"}]","[{\"text\":\"that have not been initialized to \\n\\nknown memory \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Type Casts, Previous: Pointer Operators, Up: Expressions \\n\\n\\n\\nOperators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.11 The sizeof \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can use the sizeof operator to obtain the size (in bytes) of \\n\\n\\n\"}]","[{\"text\":\"\\ndata type of its operand. The operand may be an actual type \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n(such as int or float), as well as \"}]","[{\"text\":\"any valid expression. When \\n\\n\\n\\noperand is a type name, it must be enclosed in parentheses. Here \\n\\n\\n\\nsome \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    size_t a = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    size_t b = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    size_t c = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    size_t d = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    size_t e = sizeof \\n\\n\\n\\nThe result of the sizeof operator is of a type called size_t, which \\n\\n\\ndefined in the header file <stddef.h>. size_t is an unsigned \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ntype, perhaps identical to unsigned int or unsigned long int; it \\n\\n\\n\\n\\n\\n\\nfrom system to \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThe size_t type is often a convenient type for a loop index, since it \\n\\n\\nguaranteed to be able to hold the number of elements in any array; \\n\\n\\n\\n\\nis not the case with int, for \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThe sizeof operator can be used to automatically compute the number \\n\\n\\nelements in an \\n\\n\\n\\n\\n\\n\\n\\n    #include \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    #include \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    static const int values[] = { 1, 2, 48, 681 \\n\\n\"}]","[{\"text\":\"\\n    #define ARRAYSIZE(x) (sizeof x/sizeof \\n\\n\\n\\n\\n\\n\\n    int main (int argc, char *argv[]) \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        size_t \\n\\n\\n        for (i = 0; i < ARRAYSIZE(values); i++) \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n            printf(\\\"%d\\\\n\\\", \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThere are two cases where this technique does not work. The first \\n\\n\"}]","[{\"text\":\"\\nwhere the array element has zero size (GCC supports \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nstructures as a GNU extension). The \"}]","[{\"text\":\"second is where the array is in \\n\\n\\n\\n\\na function parameter (see Function \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Array Subscripts, Previous: The sizeof Operator, Up: \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nand Operators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.12 Type \\n\\n\\n\\n\\n\\n\\nYou can use a type cast to explicitly cause an expression to be of \\n\\nspecified data type. A type cast consists of a type specifier \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nin parentheses, followed by an expression. To ensure proper casting, \\n\\n\\n\\nshould also enclose the expression that follows the type specifier \\n\\n\\nparentheses. Here is an \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    float \\n\\n\\n    int y = \\n\\n\\n    int z = \\n\\n\\n    x = (float) (y / \\n\\n\\n\\n\\nIn that example, since y and z are both integers, \"}]","[{\"text\":\"integer division \\n\\n\\nperformed, and even though x is a floating-point variable, it \\n\\n\\n\\n\\n\\n\\n\\n\\nthe value 2. \"}]","[{\"text\":\"Explicitly casting the result of the division to float \\n\\n\\n\\n\\nno good, because the computed value of y/z is already \\n\\n\\n\\nTo fix this problem, you need to convert one of the operands to \\n\"}]","[{\"text\":\"\\nfloating-point type before the division takes \\n\\n\\n\\n\\n\\n\\n\\n    float \\n\\n\\n    int y = \\n\\n\\n    int z = \\n\\n\"}]","[{\"text\":\"\\n    x = (y / \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHere, a floating-point value close to 2.333… is assigned to \\n\"}]","[{\"text\":\"\\n\\nType casting only works with scalar types (that is, \\n\\n\\n\\n\\n\\n\\n\\n\\nfloating-point or pointer types). Therefore, this is not \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    struct fooTag { /* members ... */ \\n\\n\\n    struct fooTag \\n\\n\\n\\n\\n    unsigned char \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    foo = (struct fooType) byteArray; /* Fail! \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Function Calls as Expressions, Previous: Type Casts, \\n\\n\\n\\nExpressions and Operators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.13 Array \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can access array elements by specifying the name of the array, \\n\\n\\n\"}]","[{\"text\":\"\\nthe array subscript (or index, or element number) enclosed in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHere is an example, supposing an \"}]","[{\"text\":\"integer array called \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    my_array[0] = \\n\\n\"}]","[{\"text\":\"\\n\\nThe array subscript expression A[i] is defined as being identical to \\n\\n\\n\\nexpression (*((A)+(i))). This means that many uses of an array name \\n\\n\\n\\nequivalent to a pointer expression. \"}]","[{\"text\":\"It also means that you \\n\\n\\n\\n\\n\\n\\nsubscript an array having the register storage \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: The Comma Operator, Previous: Array Subscripts, Up: \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nand Operators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.14 Function Calls as \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nA call to any \"}]","[{\"text\":\"function which returns a value is an \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    int \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    a = 10 + \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Member Access Expressions, Previous: Function Calls \\n\\n\\nExpressions, Up: Expressions and Operators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.15 The Comma \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou use the comma operator , to separate two (ostensibly \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nexpressions. For instance, the first expression might produce a \\n\\n\\n\\n\\n\\nthat is used by the second \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    x++, y = x * \\n\\n\\n\\nMore commonly, the comma operator is used in for statements, like \\n\\n\\n\\n\\n\\n\\n    /* Using the comma operator in a for statement. \\n\"}]","[{\"text\":\"\\n\\n    for (x = 1, y = 10;  x <=10 && y >=1;  x++, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThis lets you conveniently set, monitor, and modify multiple \\n\\n\\n\\n\\n\\n\\n\\nexpressions for the for \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nA comma is also used to separate function parameters; however, this \\n\\n\\n_not_ the comma operator in action. In fact, if the comma operator \\n\\n\\nused as we have discussed here in a function call, then the \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nwill interpret that as calling the function with an extra \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nIf you want to \"}]","[{\"text\":\"use the comma operator in a function argument, you \\n\\n\\n\\n\\nto put parentheses around it. That’s because commas in a \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nargument list have a different meaning: they separate arguments. \\n\\n\\n\\n\\n\\n\\n    foo (x,  y=47,  x,  \\n\\n\\n\\n\"}]","[{\"text\":\"\\nis interpreted as a function call with four arguments, \\n\\n\\n\\n\\n    foo (x,  (y=47,  x),  \\n\\n\\n\\n\\nis a function call with just three arguments. (The \"}]","[{\"text\":\"second argument \\n\\n\\n(y=47, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Conditional Expressions, Previous: The Comma Operator, \\n\\n\\n\\nExpressions and Operators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.16 Member Access \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can use the \"}]","[{\"text\":\"member access operator . to access the members of \\n\\nstructure or union variable. You put the name of the structure \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\non the left side of the operator, and the name of the member on \\n\\n\\n\\nright \\n\\n\\n\\n\\n\\n\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      int x, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    struct point \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    first_point.x = \\n\\n\\n    first_point.y = \\n\\n\\n\\nYou can also access the members of a structure or union variable via \\n\\npointer by using the indirect member access operator ->. x->y \\n\\n\"}]","[{\"text\":\"\\nequivalent to \\n\\n\\n\\n\\n\\n\\n\\n\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        int length, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    struct fish \\n\\n\\n\\n\\n\\n\\n\\n\\n    struct fish *fish_pointer = \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    fish_pointer->length = \\n\\n\\n    fish_pointer->weight = \\n\\n\\n\\nSee \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Statements and Declarations in Expressions, Previous: \\n\\n\\n\\n\\n\\n\\nAccess Expressions, Up: Expressions and Operators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.17 Conditional \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou use the conditional operator to \"}]","[{\"text\":\"cause the entire \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nexpression to evaluate to either its second or its \"}]","[{\"text\":\"third operand, \\n\\n\\n\\n\\n\\non the truth value of its first operand. Here’s an \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    a ? b : \\n\\n\\nIf expression a is true, then expression b is evaluated and the \\n\\n\\n\\n\\n\\n\\nis the value of b. Otherwise, expression c is evaluated \"}]","[{\"text\":\"and the \\n\\n\\n\\n\\n\\n\\nis \\n\\n\\n\\nExpressions b and c must be compatible. That is, they must both \\n\\n\\n\\n1.  arithmetic \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.  compatible struct or union \\n\\n\\n\\n\\n\\n3.  pointers to compatible types (one of which might be the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nAlternatively, one operand is a pointer and the other is a \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nHere is an \\n\\n\\n\\n\\n\\n\\n\\n\\n    a = (x == 5) ? y : \\n\\n\\n\\nHere, if x equals 5, then a will receive the value of \"}]","[{\"text\":\"y. Otherwise, \\n\\nwill receive the value of z. This can be considered a shorthand \\n\\n\\n\\n\\n\\n\\nfor writing a simple if…else statement. The following example \\n\\n\\n\\n\"}]","[{\"text\":\"\\naccomplish the same task as the previous \\n\\n\\n\\n\\n\\n    if (x == \\n\\n\\n        a = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        a = \\n\\n\\n\\nIf the first operand of the conditional operator is true, then the \\n\\n\\n\\n\\n\\noperand is never evaluated. Similarly, if the first operand is \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nthen the second operand is never evaluated. The first operand is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Operator Precedence, Previous: Conditional Expressions, \\n\\n\\n\\nExpressions and Operators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.18 Statements and Declarations in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nAs a GNU C \"}]","[{\"text\":\"extension, you can build an expression using \\n\\n\\n\\n\\n\\n\\n\\n\\nstatement enclosed in parentheses. This allows you to included \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nswitches, and local variables within an \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nRecall that a compound statement (also known as a block) is a \\n\\n\\n\\n\\n\\n\\n\\n\\nof statements surrounded by braces. In this construct, \"}]","[{\"text\":\"parentheses \\n\\n\\naround the braces. Here is an \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    ({ int y = function (); int \\n\\n\"}]","[{\"text\":\"\\n        if (y > 0) z = \\n\\n\\n       else z = - \\n\\n\\n       z; \\n\\n\\n\\nThat is a valid (though slightly more complex than necessary) \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nfor the absolute value of function \\n\\n\\n\\n\\nThe last thing in the compound statement should be an \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nfollowed by a semicolon; the value of this subexpression serves as \\n\\n\\n\\nvalue of the entire construct. (If you use some other kind of \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nlast within the braces, the construct has type void, and \\n\\n\\n\\n\\neffectively no \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThis feature is especially useful in making macro definitions “safe” \\n\\n\\n\\nthat they evaluate each operand exactly once). For example, \\n\\n\\n\\n“maximum” function is commonly \"}]","[{\"text\":\"defined as a macro in standard C \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    #define max(a,b) ((a) > (b) ? \"}]","[{\"text\":\"(a) : \\n\\n\\n\\n\\n\\nBut this definition computes either a or b twice, with bad results \\n\\n\\nthe operand has side effects. In GNU C, if you know the type of \\n\\n\\n\"}]","[{\"text\":\"\\noperands (here let’s assume int), you can define the macro safely \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    #define maxint(a,b) \\n\\n      ({int _a = (a), _b = (b); _a > _b ? _a : _b; \\n\\n\\n\\nIf you don’t know the type of the operand, you can still do this, \\n\\n\\n\\nyou must use typeof expressions or \"}]","[{\"text\":\"type \\n\\n\\n\\n\\n\\n\\n\\n\\nEmbedded statements are not allowed in constant expressions, such as \\n\\n\\n\"}]","[{\"text\":\"\\nvalue of an enumeration constant, the width of a bit field, or \\n\\n\\n\\ninitial value of a static \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Order of Evaluation, Previous: Statements and Declarations \\n\\n\\nExpressions, Up: Expressions and Operators   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.19 Operator \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nWhen an expression contains multiple operators, such as a + b * f(), \\n\\n\\n\"}]","[{\"text\":\"\\noperators are grouped based on rules of _precedence_. For instance, \\n\\n\\n\\nmeaning of that expression is to call the function f with no \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nmultiply the result by b, then add that result to a. That’s what the \\n\\nrules of operator precedence determine for this \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThe following is a list of types of expressions, presented in order \\n\\n\\nhighest precedence first. Sometimes two or more operators have \\n\\n\\n\\n\\n\\nprecedence; all \"}]","[{\"text\":\"those operators are applied from left to right \\n\\n\\n\\n\\n\\n\\nstated \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n1.  Function calls, array subscripting, and membership access \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n2.  Unary operators, including logical negation, bitwise \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    increment, decrement, unary positive, unary negative, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    operator, address operator, type casting, and sizeof \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    When several unary operators are consecutive, the later ones \\n\\n\\n\\n    nested within the earlier ones: !-x means \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.  Multiplication, division, and modular division \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n4.  Addition and subtraction \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n5.  Bitwise \"}]","[{\"text\":\"shifting \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n6.  Greater-than, less-than, \"}]","[{\"text\":\"greater-than-or-equal-to, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n7.  Equal-to and not-equal-to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n8.  Bitwise AND \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n9.  Bitwise exclusive OR \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n10. Bitwise \"}]","[{\"text\":\"inclusive OR \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n11. Logical AND \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n12. Logical OR \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n13. Conditional expressions (using \"}]","[{\"text\":\"?:). When used as \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    these are evaluated right to \\n\\n\\n\\n\\n\\n14. All assignment expressions, including compound assignment. \\n\\n\\n\\n\\n    multiple \"}]","[{\"text\":\"assignment statements appear as subexpressions in a \\n\\n\\n\\n\\n\\n\\n    larger expression, they are evaluated right to \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n15. Comma operator \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThe above list \"}]","[{\"text\":\"is somewhat dry and is apparently straightforward, but \\n\\n\\ndoes hide some pitfalls. Take this \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    foo = \\n\\n\\n\"}]","[{\"text\":\"\\nHere p is incremented as a side effect of the expression, but foo \\n\\n\\n\\n\\n\\nthe value of *(p++) rather than (*p)++, since the unary operators \\n\\n\\n\\n\"}]","[{\"text\":\"\\nright to left. There are other examples of potential surprises \\n\\n\\n\\n\\n\\n\\n\\nbehind the C precedence table. For this reason if there is the \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nrisk of the reader misunderstanding the meaning of the program, \\n\\n\\n\\nshould use parentheses to make your meaning \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Operator Precedence, Up: Expressions and Operators  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.20 Order of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nIn C you cannot assume that multiple subexpressions are evaluated in \\n\\n\\n\"}]","[{\"text\":\"\\norder that seems natural. For instance, consider the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n++a * f(). Does this increment a \"}]","[{\"text\":\"before or after calling the function \\n\\n\\nThe compiler could do it in either order, so you cannot \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThis manual explains the semantics of the C language in the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, an actual compiler \"}]","[{\"text\":\"translates source code into specific \\n\\n\\n\\n\\n\\n\\n\\nin an actual computer, and may re-order operations for the sake \\n\\n\\nefficiency. The \"}]","[{\"text\":\"correspondence between the program you write and \\n\\n\\n\\nthings the computer actually does are specified in terms of \\n\\n\\n\\n\\n\\neffects_ and \"}]","[{\"text\":\"_sequence \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  ------------------------------------------ ---- \\n\\n\\n  • Side \"}]","[{\"text\":\"Effects:                                 \\n  • Sequence Points:                              \\n  • Sequence Points Constrain Expressions:        \\n  • Sequence Points and Signal Delivery:          \\n  ------------------------------------------ ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Sequence Points, Up: Order of Evaluation   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.20.1 Side \\n\\n\\n\\n\\n\\n\\n\\n\\nA _side effect_ is one of the \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n1.  accessing a volatile \\n\\n\\n\\n\\n\\n\\n2.  modifying an \\n\\n\\n\\n\\n\\n\\n3.  modifying a \\n\\n\\n\\n\"}]","[{\"text\":\"\\n4.  a call to a function which performs any of the above side \\n\\n\\n\\n\\n\\n\\n\\n\\nThese are essentially the externally-visible effects of \"}]","[{\"text\":\"running \\n\\nprogram. They are called side effects because they are effects \\n\\n\\nexpression evalation beyond the expression’s actual resulting \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThe compiler is allowed to perform the operations of your program in \\n\\n\\norder different to the order implied by the source of your \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nprovided that in the end all the necessary side effects actually \\n\\n\\n\\n\\nplace. The compiler is also allowed to entirely omit some \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nfor example it’s allowed to skip evaluating part of an expression if \\n\\n\\ncan be certain that the value is not used and evaluating that part \\n\\n\\nthe expression won’t produce any needed side \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Sequence Points Constrain Expressions, Previous: Side Effects, \\n\\n\\n\\nOrder of Evaluation   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.20.2 Sequence \\n\\n\\n\\n\\n\\n\\n\\nAnother requirement on the compiler is that side effects should \\n\\n\\n\\n\\nplace in the \"}]","[{\"text\":\"correct order. In order to provide this \\n\\n\\n\\n\\n\\n\\n\\nover-constraining the compiler, the C89 and C90 standards specify a \\n\\n\\n\\n\"}]","[{\"text\":\"\\nof sequence points. A _sequence point_ is one of the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1.  a call to a function (after \"}]","[{\"text\":\"argument evaluation is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n2.  the end of the left-hand operand of the and operator \\n\\n\"}]","[{\"text\":\"\\n3.  the end of the left-hand operand of the or operator \\n\\n\\n4.  the end of the left-hand operand of the comma operator \\n\\n5.  the end of the first operand of the ternary operator a ? b : \\n\\n6.  the end of a \"}]","[{\"text\":\"full declarator \\n\\n7.  the end of an initialisation \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n8.  the end of an expression \"}]","[{\"text\":\"statement (i.e. an expression followed \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n9.  the end of the controlling expression of an if or \"}]","[{\"text\":\"switch \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n10. the end of the controlling expression of a while or do \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n11. the end of any of the three controlling expressions of a \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n12. the end of the expression in a return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n13. immediately before the return of a library \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n14. after the actions associated with an item of formatted I/O (as \\n\\n\\n\\n\\n    for example with the strftime or the printf and scanf famlies \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n15. immediately before and after a call to a comparison function \\n\\n\\n\\n    called for example by \\n\\n\\n\\n\\n\\n\\n\\nAt a sequence \"}]","[{\"text\":\"point, all the side effects of previous \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nevaluations must be complete, and no \"}]","[{\"text\":\"side effects of later \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nmay have taken \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThis may seem a little hard to grasp, but there is another way \\n\\n\\nconsider this. Imagine you wrote a library (some of whose functions \\n\\n\\n\\nexternal and perhaps others not) and compiled it, \"}]","[{\"text\":\"allowing someone \\n\\n\\n\\n\\nto call one of your functions from their code. The definitions \\n\\n\\n\\n\\n\\nensure that, at the time they call \"}]","[{\"text\":\"your function, the data they pass \\n\\n\\nhas values which are consistent with the behaviour specified by \\n\\n\\n\\nabstract machine, and any data returned by your function has a \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nwhich is also consistent with the abstract machine. This includes \\n\\n\\n\\n\\naccessible via pointers (i.e. not just function parameters \\n\\n\\n\\nidentifiers with \"}]","[{\"text\":\"external \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThe above is a slight simplification, since compilers exist that \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nwhole-program optimisation at link time. Importantly however, \\n\\n\\n\\n\\n\\n\\n\\n\\nthey might perform optimisations, the visible side \"}]","[{\"text\":\"effects of \\n\\n\\n\\nprogram must be the same as if they were produced by the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Sequence Points and Signal Delivery, Previous: Sequence \\n\\n\\n\\n\\n\\n\\n\\nUp: Order of Evaluation   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.20.3 Sequence Points Constrain \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThe code \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    i = i + \\n\\n\\n\\nis quite normal and no doubt occurs in many programs. However, the \\n\\n\\n\\n\\n\\nsimilar code \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    i = ++i + \\n\\n\\n\\nis a little harder to understand; what is the final value of i? The \\n\\nstandards (both C89 and C99) both forbid this construct in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nBetween two sequence \\n\\n\\n\\n\\n\\n\\n\\n\\n1.  an object may have its stored value modified at most once by \\n\\n\\n\"}]","[{\"text\":\"\\n    evaluation of an \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n2.  the prior value of the object shall be read only to \"}]","[{\"text\":\"determine \\n\\n\\n\\n    value to be \\n\\n\\n\\n\\n\\n\\n\\n\\nThe first of these two conditions forbids expressions \\n\\n\\n\\n\"}]","[{\"text\":\"\\nfoo(x=2, ++x). The second condition forbids expressions like a[i++] = \\n\\n\\n\\nint x=0; foo(++x, \\n\\n\\n\\n\\n\\n    Not allowed in a conforming program; modifies x twice \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    argument evaluation is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nint x=0; \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    Allowed; the function bar takes one argument (the value 2 is \\n\\n\\n\\n\\n\\n\\n    here), and there is a sequence point at the comma \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n*p++ || \\n\\n\\n\\n\\n\\n    Allowed; there is a sequence point at \\n\\n\\n\\n\\nint x = 1, y = \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    Allowed; there is a sequence point after the full declarator of \\n\\n\\n\\nx=2; \\n\\n\\n\\n\\n\\n    Allowed; there is a sequence point at the end of the \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    expression \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nif (x++ > MAX) x = \\n\\n\\n\\n    Allowed; \"}]","[{\"text\":\"there is a sequence point at the end of the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    expression of \"}]","[{\"text\":\"the \\n\\n\\n\\n\\n\\n(x=y) ? ++x : \\n\\n\\n\\n\\n\\n    Allowed; there is a sequence point before the ?, and only one of \\n\\n\\n\"}]","[{\"text\":\"\\n    two following expressions is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nint *p=malloc(sizeof(*p)), *q=p;  *p=foo(); \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    Not allowed; the object at p is being modified twice before \\n\\n\\n\\n    evaluation of the arguments to bar is complete. The fact that \\n\\n\\n\\n\\n    is done once \"}]","[{\"text\":\"via p and once via q is irrelevant, since they \\n\\n\\n\\n\\n    point to the same \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nLet’s go back to the example we used to introduce the problem of \\n\\n\\n\\norder of evaluation, ++a * f(). Suppose the code actually looks \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    static int a = \\n\\n\\n\\n    static int f \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      a = \\n\\n\\n\\n\\n      return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    int foo \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n       return ++a * \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nIs this code allowed in a \"}]","[{\"text\":\"standard-conforming program? Although \\n\\n\\n\\nexpression in foo modifies a twice, this is not a problem. Let’s look \\n\\n\\nthe two possible \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThe right operand f() is evaluated \\n\\n\\n\\n\\n\\n\\n    Since f returns a value other than void, it must contain a \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    statement. Therefore, there is a sequence point at the end of \\n\\n\\n\\n    return expression. That comes between the modification to a that \\n\\n    makes and the evaluation of the left \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThe left operand ++a is evaluated \\n\\n\\n\\n\\n\\n\\n    First, a is incremented. Then the arguments to f are \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    (there are zero of them). Then there is a sequence point before f \\n\\n\\n    actually \\n\\n\\n\\n\\n\\n\\n\\n\\nSo, we see that \"}]","[{\"text\":\"our program is standard-conforming. Notice that \\n\\n\\n\\nabove argument does not actually depend on the details of the body \\n\\n\\nthe function f. It only depends on the function containing \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nending in a sequence point – in our example this is a return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nbut an expression \"}]","[{\"text\":\"statement or a full declarator would do just as \\n\\n\\n\\n\\n\\n\\nHowever, the result of executing this code depends on the order \\n\\n\\nevaluation of the \"}]","[{\"text\":\"operands of *. If the left-hand operand is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfirst, foo returns 6. Otherwise, it returns 303. The C \"}]","[{\"text\":\"standard does \\n\\n\\n\\nspecify in which order the operands should be evaluated, and also \\n\\n\\n\\n\\nnot require an implementation either to document the order or even \\n\\n\"}]","[{\"text\":\"\\nstick to one order. The effect of this code is _unspecified_, \\n\\n\\n\\n\\n\\n\\n\\nthat one of several specific things will happen, but the C standards \\n\\n\"}]","[{\"text\":\"\\nnot say \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Sequence Points Constrain Expressions, Up: Order of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n3.20.4 Sequence Points and Signal \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nSignals are mainly documented in the GNU C Library manual rather \\n\\n\\n\\n\"}]","[{\"text\":\"\\nthis document, even though the C standards consider the compiler and \\n\\n\\n\\nC library together to be “the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nWhen a signal is received, this will happen between sequence \\n\\n\\n\\n\\n\\n\\n\\nSide effects on volatile objects prior to the previous sequence \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nwill have occurred, but other updates may not have occurred yet. \\n\\n\\n\\n\\neven applies to straight assignments, such as x=0;, because the \\n\\n\\n\\n\"}]","[{\"text\":\"\\ngenerated for that statement may require more than one \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nmeaning that it can be interrupted part-way through by the delivery of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThe C standard is \"}]","[{\"text\":\"quite restrictive about what data access can \\n\\n\\n\\n\\n\\nwithin a signal handler. They can of course use auto variables, but \\n\\n\\nterms of reading or writing other \"}]","[{\"text\":\"objects, they must \\n\\n\\nvolatile sig_atomic_t. The volatile type qualifier ensures that \\n\\n\\n\\n\\n\\n\\nto the variable in the other parts \"}]","[{\"text\":\"of the program doesn’t span \\n\\n\\n\\n\\n\\n\\n\\n\\npoints and the use of the sig_atomic_t type ensures that changes to \\n\\n\\n\"}]","[{\"text\":\"\\nvariable are atomic with respect to signal \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThe POSIX standard also allows a \"}]","[{\"text\":\"small number of library functions to \\n\\n\\ncalled from a signal handler. These functions are referred to as the \\n\\n\\n\\nof _async-signal-safe_ functions. If your program is intended to run \\n\\n\"}]","[{\"text\":\"\\na POSIX system but not on other systems, you can safely call these \\n\\n\\n\\n\\nyour signal handler \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Functions, Previous: Expressions and Operators, Up: Top  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n4 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou write statements to cause actions and to control flow within \\n\\n\\n\\n\"}]","[{\"text\":\"\\nprograms. You can also write statements that do not do anything at \\n\\n\\n\\n\\nor do things that are uselessly \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n  --------------------------- ---- \\n\\n\\n  • Labels:                        \\n  • Expression Statements:         \\n  • The if Statement:              \\n  • The switch Statement:          \\n  • The while Statement:           \\n  • The do \"}]","[{\"text\":\"Statement:              \\n  • The for Statement:             \\n  • Blocks:                        \\n  • The Null Statement:            \\n  • The goto Statement:            \\n  • The break Statement:           \\n  • The continue Statement:        \\n  • The return \"}]","[{\"text\":\"Statement:          \\n  • The typedef Statement:         \\n  --------------------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Expression Statements, Up: Statements   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n4.1 \\n\\n\\n\\n\\n\\n\\n\\nYou can use labels to identify a section of source code for use with \\n\\nlater goto (see The goto Statement). A label consists of an \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n(such as those used for variable names) followed by a colon. Here is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nYou should be aware that label names do not interfere with \\n\\n\\n\\n\\n\\nidentifier \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    int treet = 5;    /* treet the variable. \\n\\n\\n    treet:            /* treet the label. \\n\\n\\n\\nThe ISO C standard mandates that a label must be followed by at \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\none statement, possibly a null statement (see The Null Statement). \\n\\n\\n\\nwill compile code that does not meet this requirement, but be aware \\n\\n\\n\\n\\nif you violate \"}]","[{\"text\":\"it, your code may have portability \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: The if Statement, Previous: Labels, Up: Statements  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n4.2 Expression \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can turn any expression into a statement by adding a semicolon \\n\\n\"}]","[{\"text\":\"\\nthe end of the expression. Here are some \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    2 + \\n\\n\\n    10 >= \\n\\n\\n\\nIn each of those, all that happens is that each expression is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nHowever, they are useless because they do not store a value \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nnor do they actually do anything, \"}]","[{\"text\":\"other than the evaluation itself. \\n\\n\\n\\ncompiler is free to ignore such \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nExpression statements are only useful when they have some kind of \\n\\n\\n\\n\\neffect, such as storing a value, calling a function, or (this \\n\\n\\nesoteric) causing a fault in the \"}]","[{\"text\":\"program. Here are some more \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    y = x + \\n\\n\\n\\n    puts (\\\"Hello, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThe last of those statements, *cucumber;, could potentially cause \\n\\nfault in the program if the value of cucumber is both not a \\n\\n\\n\\n\\n\\npointer and has been declared as \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: The switch Statement, Previous: Expression Statements, \\n\\n\\n\\nStatements   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n4.3 The if \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can use the if statement to conditionally execute part of \\n\\n\\n\\n\"}]","[{\"text\":\"\\nprogram, based on the truth value of a given expression. Here is \\n\\n\\n\\ngeneral form of an if \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    if \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nIf test evaluates to true, then then-statement is executed \\n\\n\\n\\nelse-statement is not. If test evaluates to false, then \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nis executed and then-statement is not. The else clause is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHere is an actual \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    if (x == \\n\\n\\n\\n      puts (\\\"x is \\n\\n\\n\\n\\n\\n\\nIf x == 10 evaluates to true, then the statement puts (\\\"x is 10\\\"); \\n\\n\"}]","[{\"text\":\"\\nexecuted. If x == 10 evaluates to false, then the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nputs (\\\"x is 10\\\"); is not \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nHere is an example using \\n\\n\\n\\n\\n\\n\\n    if (x == \\n\\n\\n\\n      puts (\\\"x is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      puts (\\\"x is not \\n\\n\\n\\n\\n\\n\\nYou can use a series of if statements to test for multiple \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    if (x == \\n\\n\\n      puts (\\\"x is \\n\\n\\n\\n\\n    else if (x == \\n\\n\\n      puts (\\\"x is \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    else if (x == \\n\\n\\n      puts (\\\"x is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      puts (\\\"x is something \\n\\n\\n\\n\\n\\n\\n\\n\\nThis function calculates and displays the date of Easter for the \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nyear \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    easterDate (int \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      int n = \\n\\n\\n      int g = (y % 19) + \\n\\n\\n      int c = (y / 100) + \\n\\n\\n      int x = ((3 * c) / 4) - \\n\\n\\n\\n      int z = (((8 * c) + 5) / 25) - \\n\\n\"}]","[{\"text\":\"\\n      int d = ((5 * y) / 4) - x - \\n\\n\\n\\n      int e = ((11 * g) + 20 + z - x) % \\n\\n\\n\\n\\n      if (((e == 25) && (g > 11)) || (e == \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n      n = 44 - \\n\\n\\n\\n      if (n < \\n\\n\\n\\n        n += \\n\\n\\n\\n\\n      n = n + 7 - ((d + n) % \\n\\n\\n\\n\"}]","[{\"text\":\"\\n      if (n > \\n\\n\\n\\n        printf (\\\"Easter: %d April %d\\\", n - 31, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        printf (\\\"Easter: %d March %d\\\", n, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: The while Statement, Previous: The if Statement, Up: Statements  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n4.4 The switch \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can use the switch statement to compare one expression with \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nand then execute a series of sub-statements based on the result of \\n\\n\\n\\ncomparisons. Here is the general form of a switch \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    switch \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        case \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        case \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThe switch statement compares test to each of the compare \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nuntil it finds one that is equal to test. Then, the statements \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nthe successful case are executed. \"}]","[{\"text\":\"All of the expressions compared \\n\\n\\n\\n\\nbe of an integer type, and the compare-N expressions must be of \\n\\nconstant integer type (e.g., a literal integer or an expression built \\n\\n\"}]","[{\"text\":\"\\nliteral \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nOptionally, you can specify a default case. If test doesn’t match any \\n\\n\"}]","[{\"text\":\"\\nthe specific cases listed prior to the default case, then the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfor the default \"}]","[{\"text\":\"case are executed. Traditionally, the default case \\n\\n\\nput after the specific cases, but that isn’t \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    switch \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        case \\n\\n\\n          puts \"}]","[{\"text\":\"(\\\"x is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        case \\n\\n\\n          puts (\\\"x is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          puts (\\\"x is something \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nNotice the usage of the break statement in each of the cases. This \\n\\n\\nbecause, once a matching case is found, not only are its \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nexecuted, but so are the statements for all following \\n\\n\\n\\n\\n\\n\\n\\n    int x = \\n\\n\\n    switch \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        case \\n\\n\\n          puts (\\\"x is \\n\\n\\n\\n\\n        case \\n\\n\\n          puts (\\\"x is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          puts (\\\"x is something \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThe output of that example \\n\\n\\n\\n\\n    x is \\n\\n    x is \\n\\n    x is something \\n\\n\\n\\n\\n\\nThis is often not desired. \"}]","[{\"text\":\"Including a break statement at the end \\n\\n\\neach case redirects program flow to after the switch \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nAs a GNU C extension, you can also specify a range of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ninteger values in \"}]","[{\"text\":\"a single case label, like \\n\\n\\n\\n\\n\\n\\n    case low ... \\n\\n\\n\\n\\n\\n\\nThis has the same \"}]","[{\"text\":\"effect as the corresponding number of individual \\n\\n\\n\\n\\nlabels, one for each integer value from low to high, \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThis feature is especially useful for ranges of ASCII character \\n\\n\\n\\n\\n\\n\\n\\n    case 'A' ... \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nBe careful to include spaces around the ...; otherwise it may be \\n\\n\\n\\n\\n\\n\\nincorrectly when you use it with integer values. For example, \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    case 1 ... \\n\\n\\n\\ninstead of \\n\\n\\n\\n\\n\\n\\n    case \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nIt is common to use a switch statement to handle various possible \\n\\n\\n\\n\\n\\n\\nof errno. In this case a portable program should watch out for \\n\\n\\n\"}]","[{\"text\":\"\\npossibility that two macros for errno values in fact have the \\n\\n\\n\\n\\nvalue, for example EWOULDBLOCK and \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: The do Statement, Previous: The switch Statement, Up: Statements  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n4.5 The while \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThe while statement is a loop statement with an exit test at \\n\\n\\n\"}]","[{\"text\":\"\\nbeginning of the loop. Here is the general form of the while \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    while \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThe while statement first evaluates test. If test evaluates to \\n\\n\\n\\n\\n\\nstatement is executed, and then test is evaluated again. \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ncontinues to execute repeatedly as long as test is true after \\n\\n\\n\\n\\nexecution of \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThis example prints the integers from zero through \\n\\n\\n\\n\\n\\n\\n    int counter = \\n\\n\\n    while (counter < \\n\\n\\n\"}]","[{\"text\":\"\\n      printf (\\\"%d \\\", \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nA break statement \"}]","[{\"text\":\"can also cause a while loop to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: The for Statement, Previous: The while Statement, Up: Statements  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n4.6 The do \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThe do statement is a loop statement with an exit test at the end of \\n\\n\\n\"}]","[{\"text\":\"\\nloop. Here is the general form of the do \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    while \\n\\n\\n\\n\\n\\n\\n\\n\\nThe do statement first executes statement. After that, it \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ntest. If test is true, then statement is executed again. \\n\\n\\n\\n\\n\\n\\n\\n\\n\\ncontinues to execute repeatedly as \"}]","[{\"text\":\"long as test is true after \\n\\n\\n\\n\\nexecution of \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThis example also prints the integers from zero through \\n\\n\\n\\n\\n\\n\\n    int x = \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      printf (\\\"%d \\\", \\n\\n\\n\\n\\n\\n    while (x < \\n\\n\\n\\n\\n\\nA break statement can also cause a do loop to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Blocks, Previous: The do Statement, Up: Statements  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n4.7 The for \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThe for statement is a loop statement whose structure allows \\n\\n\\n\\n\"}]","[{\"text\":\"\\nvariable initialization, expression testing, and variable \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nIt is very convenient for making counter-controlled loops. Here is \\n\\n\\n\\ngeneral form of the for \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    for (initialize; test; \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThe for statement first evaluates the expression initialize. Then \\n\\n\\nevaluates the expression test. If test is false, then the loop ends \\n\\n\\n\\nprogram control resumes after statement. Otherwise, if \"}]","[{\"text\":\"test is \\n\\n\\n\\n\\n\\nthen statement is executed. Finally, step is evaluated, and the \\n\\n\\n\\n\\niteration of the loop begins with \"}]","[{\"text\":\"evaluating test \\n\\n\\n\\n\\n\\n\\n\\nMost often, initialize assigns values to one or more variables, \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nare generally used as counters, test compares those variables to \\n\\npredefined expression, and step modifies those variables’ values. \\n\\n\\n\\n\\nis another example that prints the integers from zero \"}]","[{\"text\":\"through \\n\\n\\n\\n\\n\\n\\n    int \\n\\n\\n    for (x = 0; x < 10; \\n\\n\\n\\n\\n      printf (\\\"%d \"}]","[{\"text\":\"\\\", \\n\\n\\n\\n\\nFirst, it evaluates initialize, which assigns x the value 0. Then, \\n\\n\\nlong as x is less than 10, the value of x is printed (in the body of \\n\\n\\n\"}]","[{\"text\":\"\\nloop). Then x is incremented in the step clause and the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nAll three of the expressions in a for statement are optional, and \\n\\n\\n\\ncombination of the three is valid. Since the first expression \\n\\n\\nevaluated only once, it is perhaps the most commonly \"}]","[{\"text\":\"omitted \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou could also write the above example \\n\\n\"}]","[{\"text\":\"\\n    int x = \\n\\n\\n    for (; x <= 10; \\n\\n\\n\\n\\n      printf (\\\"%d \\\", \\n\\n\\n\\n\\nIn this example, x receives its \"}]","[{\"text\":\"value prior to the beginning of the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nIf you leave out the test expression, then the for statement is \\n\\n\\ninfinite loop (unless you put a break or goto statement somewhere \\n\\n\\nstatement). This is like using 1 as test; it is never \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThis for statement starts printing numbers at 1 and then \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nindefinitely, always printing x \"}]","[{\"text\":\"incremented by \\n\\n\\n\\n    for (x = 1; ; \\n\\n\\n\\n\\n      printf (\\\"%d \\\", \\n\\n\\n\\n\\nIf you leave out the step \"}]","[{\"text\":\"expression, then no progress is made \\n\\n\\n\\n\\n\\n\\ncompleting the loop—at least not as is normally expected with a \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThis example prints the number 1 over and over, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    for (x = 1; x <= \\n\\n\\n\\n\\n      printf (\\\"%d \\\", \\n\\n\\n\\n\\nPerhaps confusingly, you cannot use the comma operator (see The \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nOperator) for monitoring multiple variables in a for statement, \\n\\n\\n\\n\\n\\n\\n\\nas usual the comma operator discards the result of its left \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThis \\n\\n\\n\\n\\n\\n\\n    int x, \\n\\n\\n    for (x = 1, y = 10; x <= 10, y >= 1; x+=2, \\n\\n\\n\\n\"}]","[{\"text\":\"\\n      printf (\\\"%d %d\\\\n\\\", x, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    1 \\n\\n\\n    3 \\n\\n    5 \\n\\n    7 \\n\\n    9 \\n\\n    11 \\n\\n    13 \\n\\n    15 \\n\\n    17 \\n\\n    19 \\n\\n\\nIf you need to test two conditions, \"}]","[{\"text\":\"you will need to use the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    int x, \\n\\n\\n    for (x = 1, y = 10; x <= 10 && y >= 1; x+=2, \\n\\n\\n\\n\\n      printf (\\\"%d %d\\\\n\\\", x, \\n\\n\\n\\n\\nA break statement \"}]","[{\"text\":\"can also cause a for loop to \\n\\n\\n\\n\\n\\n\\nHere is an example of a function that computes the summation of \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ngiven a starting integer to square and an ending integer to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    sum_of_squares (int start, int \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      int i, sum = \\n\\n\"}]","[{\"text\":\"\\n      for (i = start; i <= end; \\n\\n\\n\\n\\n        sum += i * \\n\\n\\n      return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: The Null Statement, Previous: The for Statement, Up: Statements  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n4.8 \\n\\n\\n\\n\\n\\n\\n\\nA _block_ is a set of zero or more statements enclosed in braces. \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nare also known as _compound statements_. Often, a block is used as \\n\\n\\n\\nbody of an if statement or a loop statement, to group \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    for (x = 1; x <= 10; \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        printf \"}]","[{\"text\":\"(\\\"x is %d\\\\n\\\", \\n\\n\\n\\n        \\n        if ((x % 2) == \\n\\n\\n          printf (\\\"%d is even\\\\n\\\", \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          printf (\\\"%d is odd\\\\n\\\", \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can also put \"}]","[{\"text\":\"blocks inside other \\n\\n\\n\\n\\n\\n\\n\\n\\n    for (x = 1; x <= 10; \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        if ((x % 2) == \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n            printf (\\\"x is %d\\\\n\\\", \\n\\n\\n\\n            printf (\\\"%d is even\\\\n\\\", \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n            printf (\\\"x is %d\\\\n\\\", \\n\\n\\n\\n            printf (\\\"%d is odd\\\\n\\\", \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nYou can declare variables inside a block; such variables are local \\n\\n\\nthat block. In C89, declarations must occur before other statements, \\n\\n\\n\\nso sometimes it is useful to introduce a block simply \"}]","[{\"text\":\"for this \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      int x = \\n\\n\\n      printf (\\\"%d\\\\n\\\", \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    printf (\\\"%d\\\\n\\\", x);   /* \"}]","[{\"text\":\"Compilation error! x exists \\n\\n\\n\\n\\n                           in the preceding block. \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: The goto Statement, Previous: Blocks, Up: Statements  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n4.9 The Null \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThe _null statement_ is merely a semicolon \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nA null statement does not do anything. It does not store a \\n\\n\\n\\n\\n\\nanywhere. It does not cause time to pass during the execution of \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nMost often, a null statement is used as the body of a loop statement, \\n\\n\\nas one or more of the expressions in a for statement. Here is an \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nof a for statement that uses the null statement as the body of the \\n\\n\\n\\n\\n(and also calculates the integer square root of n, just for \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    for (i = 1; i*i < n; \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nHere is another example that uses the null statement as the body of \\n\\nfor loop and also produces \\n\\n\\n\\n\\n\\n\\n\\n\\n    for (x = 1; x \"}]","[{\"text\":\"<= 5; printf (\\\"x is now %d\\\\n\\\", x), \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nA null statement is also sometimes used to follow a label that \\n\\n\\n\\n\\n\\notherwise be the last thing in a \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: The break Statement, Previous: The Null Statement, Up: \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n4.10 The goto \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can use the goto statement to unconditionally jump to a \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nplace in the program. Here is the general form of a goto \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    goto \\n\\n\\n\"}]","[{\"text\":\"\\n\\nYou have to specify a label to jump to; when the goto statement \\n\\n\\nexecuted, program control jumps to that label. See Labels. Here is \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    goto \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThe label can be anywhere in the same function as the goto \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nthat jumps to it, but a goto \"}]","[{\"text\":\"statement cannot jump to a label in \\n\\ndifferent \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou _can_ use goto statements to \"}]","[{\"text\":\"simulate loop statements, but we do \\n\\n\\n\\nrecommend it—it makes the program harder to read, and GCC \\n\\n\\n\\n\\n\\n\\noptimize it as \"}]","[{\"text\":\"well. You should use for, while, and do \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ninstead of goto statements, when \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nAs an extension, GCC allows a goto statement to jump to an \\n\\n\\n\\n\\n\\n\\n\\nspecified by a void* variable. To make this work, you also need to \\n\\n\\n\\n\"}]","[{\"text\":\"\\nthe address of a label by using the unary operator && (not &). Here is \\n\\ncontrived \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    enum Play { ROCK=0, PAPER=1, \"}]","[{\"text\":\"SCISSORS=2 \\n\\n\\n    enum Result { WIN, LOSE, DRAW \\n\\n\\n\\n    static enum Result turn (void) \\n\\n\\n\\n\\n\\n\\n      const void * const jumptable[] \"}]","[{\"text\":\"= {&&rock, &&paper, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      enum Play \"}]","[{\"text\":\"opp;                /* opponent’s play \\n\\n\\n      goto *jumptable[select_option \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      return opp == ROCK ? DRAW : (opp == PAPER ? LOSE : \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      return opp == ROCK ? WIN  : (opp == PAPER ? DRAW : \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      return opp == ROCK ? LOSE : (opp == PAPER ? WIN  : \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: The continue Statement, Previous: The goto Statement, \\n\\n\\n\\nStatements   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n4.11 The break \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can use the break statement to terminate a while, do, for, or \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nstatement. Here is an \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    int \\n\\n\\n    for (x = 1; x <= 10; \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        if (x == \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          printf (\\\"%d \\\", \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThat example \"}]","[{\"text\":\"prints numbers from 1 to 7. When x is incremented to \\n\\n\\nx == 8 is true, so the break statement is executed, terminating the \\n\\n\\n\\nloop \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nIf you put a break statement inside of a loop or switch statement \\n\\n\\n\\n\\n\\nitself is inside of a loop or switch statement, the break \\n\\n\\n\\n\"}]","[{\"text\":\"\\nterminates the innermost loop or switch \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: The return Statement, Previous: The break Statement, \\n\\n\\n\\nStatements   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n4.12 The continue \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can use the continue statement in loops to \"}]","[{\"text\":\"terminate an iteration \\n\\n\\nthe loop and begin the next iteration. Here is an \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    for (x = 0; \"}]","[{\"text\":\"x < 100; \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        if (x % 2 == \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          sum_of_odd_numbers + = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nIf you put a continue statement \"}]","[{\"text\":\"inside a loop which itself is inside \\n\\nloop, then it affects only the innermost \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: The typedef Statement, Previous: The continue Statement, \\n\\n\\n\\nStatements   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n4.13 The return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can use the return statement to end the execution of a function \\n\\n\\n\"}]","[{\"text\":\"\\nreturn program control to the function that called it. Here is \\n\\n\\n\\ngeneral form of the return \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nreturn-value is an optional expression to return. If the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nreturn type is \"}]","[{\"text\":\"void, then it is invalid to return an expression. \\n\\n\\n\\ncan, however, use the return statement without a return \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nIf the function’s return type is not the same as the type \\n\\n\\nreturn-value, and automatic type conversion cannot be performed, \\n\\n\\n\\n\\nreturning return-value is \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nIf the function’s return type is not void and no return value \\n\\n\\nspecified, then the return statement is valid unless the function \\n\\n\\ncalled in a context that requires a return value. For \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    x = cosine \\n\\n\\n\\n\\n\\nIn that case, the function cosine was called in a context that \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\na return value, so the value could be assigned to \\n\\n\\n\\nEven in contexts where a return value is not required, it is a bad \\n\\n\\n\\n\\nfor a non-void function to omit the return value. With \"}]","[{\"text\":\"GCC, you can \\n\\n\\n\\nthe command line option -Wreturn-type to issue a warning if you omit \\n\\n\\n\\nreturn value in such \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nHere are some examples of using the return statement, in both a void \\n\\n\\n\\nnon-void \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    print_plus_five (int \\n\\n\\n\\n\\n\\n\\n\\n\\n      printf (\\\"%d \\\", x + \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    square_value (int \\n\\n\\n\\n\\n\\n\\n\\n\\n      return x * \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: The return Statement, Up: Statements   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n4.14 The typedef \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can use the typedef statement to create new names for data \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nHere is the general form of the typedef \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    typedef old-type-name \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nold-type-name is the existing name for the type, and may consist of \\n\\n\\n\\n\\nthan one token (e.g., unsigned long int). new-type-name is the \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nnew name for the type, and must be a single identifier. Creating \\n\\n\\n\\n\\nnew name for the type does not cause the old name to cease to \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nHere are some \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    typedef unsigned char \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    typedef double \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nIn the case of custom data types, you can use typedef to make a new \\n\\n\\n\\n\\nfor the type while defining the \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    typedef struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      float \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      float \\n\\n\\n\\n\\n\\n\\n\\n      float \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    } \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nTo make a type definition of an array, you first provide the type of \\n\\n\\n\"}]","[{\"text\":\"\\nelement, and then establish the number of elements at the end of \\n\\n\\n\\ntype \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    typedef char array_of_bytes \\n\\n\\n\\n\\n    array_of_bytes five_bytes = {0, 1, 2, 3, \\n\\n\\n\\n\\nWhen selecting names for types, you should avoid ending \"}]","[{\"text\":\"your type \\n\\n\\n\\n\\n\\nwith a _t suffix. The compiler will allow you to do this, but the \\n\\n\\n\\n\\n\\nstandard reserves \"}]","[{\"text\":\"use of the _t suffix for standard library type \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Program Structure and Scope, Previous: Statements, Up: Top  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n5 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can write functions to separate parts of your program into \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nsubprocedures. To write a function, you must at least create a \\n\\n\\n\\n\\n\\n\\n\\n\\ndefinition. It is a good idea also to have an explicit \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ndeclaration; you don’t have to, but if you leave it out, then \\n\\n\\n\\ndefault implicit declaration might not match the function itself, \\n\\n\\n\\nyou will get some compile-time \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nEvery program requires at least one function, called main. That is \\n\\n\\n\\n\\n\\nthe program’s execution \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n  ------------------------------------------------ ---- \\n\\n\\n  • Function Declarations:                              \\n  • Function Definitions:                               \\n  • Calling Functions:                                  \"}]","[{\"text\":\"\\n  • Function Parameters:                                \\n  • Variable Length Parameter Lists:                    \\n  • Calling Functions Through Function Pointers:        \\n  • The main Function:                                  \\n  • Recursive \"}]","[{\"text\":\"Functions:                                \\n  • Static Functions:                                   \\n  • Nested Functions:                                   \\n  ------------------------------------------------ ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Function Definitions, Up: Functions   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n5.1 Function \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou write a function declaration to \"}]","[{\"text\":\"specify the name of a function, \\n\\nlist of parameters, and the function’s return type. A \\n\\n\\n\\n\\n\\n\\n\\n\\ndeclaration ends with a semicolon. \"}]","[{\"text\":\"Here is the general \\n\\n\\n\\n\\n\\n\\n    return-type function-name \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nreturn-type indicates the data type of the value returned by \\n\\n\\n\\nfunction. You can declare a function that doesn’t return anything \\n\\n\\nusing the return type \\n\\n\\n\\n\"}]","[{\"text\":\"\\nfunction-name can be any valid identifier (see \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nparameter-list consists of zero or more parameters, separated by \\n\\n\\n\\n\\n\\n\\n\\nA typical parameter consists of a data type and an optional name for \\n\\n\\n\"}]","[{\"text\":\"\\nparameter. You can also declare a function that has a variable number \\n\\n\\nparameters (see Variable Length Parameter Lists), or no parameters \\n\\n\\n\\n\\n\\nvoid. Leaving out \"}]","[{\"text\":\"parameter-list entirely also indicates no \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nbut it is better \"}]","[{\"text\":\"to specify it explicitly with \\n\\n\\n\\n\\n\\n\\nHere is an example of a function declaration with two \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    int foo (int, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nIf you include a name for a parameter, the name immediately follows \\n\\n\\n\"}]","[{\"text\":\"\\ndata type, like \\n\\n\\n\\n\\n\\n\\n    int foo (int x, double \\n\\n\\n\\n\\nThe parameter names can be any identifier (see \"}]","[{\"text\":\"Identifiers), and if \\n\\n\\n\\nhave more than one parameter, you can’t use the same name more than \\n\\n\\n\\n\\nwithin a single declaration. The parameter names in the \"}]","[{\"text\":\"declaration \\n\\n\\n\\n\\nnot match the names in the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nYou should write the function declaration above the first use of \\n\\n\\n\\nfunction. You can put it in a header file and use the #include \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nto include that function declaration in any source code files that \\n\\n\\n\\nthe \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Calling Functions, Previous: Function Declarations, Up: \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n5.2 Function \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou write a function definition to \"}]","[{\"text\":\"specify what a function \\n\\n\\n\\n\\n\\n\\n\\n\\ndoes. A function definition consists of information regarding \\n\\n\\n\"}]","[{\"text\":\"\\nfunction’s name, return type, and types and names of parameters, \\n\\n\\n\\n\\n\\nwith the body of the function. The function body is a series \\n\\n\\nstatements \"}]","[{\"text\":\"enclosed in braces; in fact it is simply a block \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nHere is the general form of a function \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    function-name \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nreturn-type and function-name are the same as what you use in \\n\\n\\n\\nfunction declaration (see Function \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nparameter-list is the same as the parameter list used in the \\n\\n\\n\\n\\n\\n\\n\\n\\ndeclaration (see Function Declarations), except you \"}]","[{\"text\":\"_must_ include \\n\\n\\n\\n\\n\\nfor the parameters in a function \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nHere is an simple example of a function definition—it takes two \\n\\n\\n\\n\\n\\n\\n\\n\\nas its parameters and returns the sum of them as its \"}]","[{\"text\":\"return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    add_values (int x, int \\n\\n\\n\\n\\n\\n\\n\\n\\n      return x + \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nFor compatibility with the original design of C, you can also \\n\\n\\n\\n\\n\\n\\n\\nthe type of the function parameters _after_ the closing parenthesis \\n\\n\"}]","[{\"text\":\"\\nthe parameter list, like \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    add_values (x, \\n\\n\\n        int x, int \\n\\n\\n\\n\\n\\n\\n\\n\\n      return x + \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nHowever, we strongly discourage this style of coding; it can \\n\\n\\n\\n\\n\\nsubtle problems with type casting, among other \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Function Parameters, Previous: Function Definitions, Up: \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n5.3 Calling \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can call a function by using its name and supplying any \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nparameters. Here is the general form of a function \\n\\n\\n\\n\\n\\n\\n    function-name \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nA function call can make up an entire statement, or it can be used as \\n\\nsubexpression. Here is an example of a standalone function \\n\\n\\n\\n\\n\\n\\n    foo \\n\\n\"}]","[{\"text\":\"\\n\\nIn that example, the function ‘foo’ is called with the parameter \\n\\n\\n\\nHere is an example of a function call used as a \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    a = square \\n\\n\\n\\n\\n\\nSupposing that the function ‘square’ squares its parameter, the \\n\\n\\n\\n\\n\\nexample assigns the value 25 to \\n\"}]","[{\"text\":\"\\n\\nIf a parameter takes more than one argument, you separate \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nwith \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    a = quux (5, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Variable Length Parameter Lists, Previous: Calling Functions, \\n\\n\\n\\nFunctions   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n5.4 Function \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nFunction parameters can be any expression—a literal value, a \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nstored in variable, an address in memory, or a more complex \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nbuilt by \"}]","[{\"text\":\"combining \\n\\n\\n\\n\\n\\n\\n\\nWithin the function body, the parameter is a local copy of the \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\npassed into the function; you cannot change the value passed in \\n\\n\\nchanging the local \\n\\n\\n\\n\\n\\n\\n    int x = \\n\\n\\n\"}]","[{\"text\":\"\\n    foo \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    /* Definition for function foo. \\n\\n\\n    int foo (int \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      a = 2 * \\n\\n\\n      return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nIn that example, even though the parameter a is \"}]","[{\"text\":\"modified in the \\n\\n\\n\\n\\n\\n\\n\\n\\n‘foo’, the variable x that is passed to the function does not change. \\n\\n\\nyou wish to use \"}]","[{\"text\":\"the function to change the original value of x, then \\n\\n\\n\\nwould have to incorporate the function call into an \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    x = foo \\n\\n\\n\\n\\n\\nIf the value that you pass to a function is a memory address (that is, \\n\\npointer), then you can access (and change) the data stored at the \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\naddress. This achieves an effect similar to pass-by-reference in \\n\\n\\n\\n\\n\\nlanguages, but is not the same: the memory address is simply a \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\njust like any other value, and cannot itself be changed. The \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nbetween passing a \"}]","[{\"text\":\"pointer and passing an integer lies in what you can \\n\\n\\nusing the value within the \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nHere is an example of calling a function with a pointer \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    foo (int \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      *x = *x + \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    int a = \\n\\n\\n\\n    foo \\n\\n\\n\\n\\n\\n\\nThe formal parameter for the function is of type pointer-to-int, and \\n\\n\"}]","[{\"text\":\"\\ncall the function by passing it the address of a variable of type \\n\\n\\n\\n\\nBy dereferencing the pointer within the function body, we can both \\n\\n\\n\\nand change the \"}]","[{\"text\":\"value stored in the address. The above changes the \\n\\n\\n\\n\\n\\nof a to \\n\\n\\n\\n\\n\\n\\nEven if you don’t \"}]","[{\"text\":\"want to change the value stored in the \\n\\n\\n\\n\\n\\n\\n\\n\\npassing the address of a variable rather than the variable itself can \\n\\n\"}]","[{\"text\":\"\\nuseful if the variable type is large and you need to conserve \\n\\n\\n\\n\\n\\n\\nspace or limit the performance impact of parameter copying. For \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    struct \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      int \\n\\n\\n      float \\n\\n\\n      double \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    void bar (const struct foo \\n\\n\\n\\n\\n\\nIn this case, unless you are working on a computer with very \\n\\n\\n\\n\\n\\nmemory addresses, \"}]","[{\"text\":\"it will take less memory to pass a pointer to \\n\\n\\n\\nstructure than to pass an instance of the \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nOne type of parameter that is always passed as a pointer is any sort \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    void foo (int \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    int \\n\\n\\n\\n\\n\\n\\n\\n    foo \\n\\n\\n\\n\\n\\nIn this example, calling the function foo with the \"}]","[{\"text\":\"parameter a does \\n\\n\\n\\ncopy the entire array into a new local parameter within foo; rather, \\n\\n\\npasses x as a pointer to the first element in x. Be careful, \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nwithin the function, you cannot use sizeof to determine the size of \\n\\n\\n\\narray x—sizeof instead tells you the size of the pointer x. Indeed, \\n\\n\\n\\nabove code is equivalent \\n\\n\"}]","[{\"text\":\"\\n    void foo (int \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    int \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    foo \\n\\n\\n\\n\\n\\nExplicitly specifying the length of the array in the \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ndeclaration will not help. If you really need to pass an array by \\n\\n\\n\\n\\n\\n\\nyou can wrap it in a struct, though doing this will rarely be \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n(passing a const-qualified pointer is normally sufficient to \\n\\n\\n\\n\\n\\n\\n\\n\\nthat the caller should not modify the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Calling Functions Through Function Pointers, Previous: \\n\\n\\n\\n\\n\\n\\n\\n\\nParameters, Up: Functions   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n5.5 Variable Length Parameter \\n\\n\\n\\n\\n\\n\\nYou can write a function that takes a variable number of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nthese are called _variadic functions_. To do this, the function needs \\n\\n\\nhave at least one parameter of a known data type, but the \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nparameters are optional, and can vary in both quantity and data \\n\\n\\n\\n\\n\\n\\nYou list the initial parameters as normal, but then after that, use \\n\\n\"}]","[{\"text\":\"\\nellipsis: ‘...’. Here is an example function \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    int add_multiple_values (int \"}]","[{\"text\":\"number, \\n\\n\\n\\n\\n\\n\\nTo work with the optional parameters in the function definition, \\n\\n\\n\\nneed to use macros that are defined \"}]","[{\"text\":\"in the library header \\n\\n\\n\\n\\n‘<stdarg.h>’, so you must #include that file. For a detailed \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nof these macros, see The GNU C Library manual’s section on \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nHere is an \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    add_multiple_values (int number, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      int counter, total = \\n\\n\"}]","[{\"text\":\"\\n      \\n      /* Declare a variable of type ‘va_list’. \\n\\n\\n      va_list \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      /* Call the ‘va_start’ function. \\n\\n\\n      va_start (parameters, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      for \"}]","[{\"text\":\"(counter = 0; counter < number; \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          /* Get the values of the optional parameters. \\n\\n\\n          total += va_arg (parameters, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      /* End use of the ‘parameters’ variable. \\n\\n\\n      va_end \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nTo use optional \"}]","[{\"text\":\"parameters, you need to have a way to know how \\n\\n\\n\\n\\nthere are. This can vary, so it can’t be hard-coded, but if you \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nknow how many optional parameters you have, then you could \\n\\n\\n\\n\\ndifficulty knowing when to stop using the ‘va_arg’ function. In \\n\\n\\n\\nabove example, \"}]","[{\"text\":\"the first parameter to the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nfunction, ‘number’, is the number of optional parameters \\n\\n\\n\\n\\n\\n\\n\\n\\npassed. So, we might call the function like \\n\\n\\n\"}]","[{\"text\":\"\\n    sum = add_multiple_values (3, 12, 34, \\n\\n\\n\\n\\n\\n\\nThe first parameter indicates how many optional parameters follow \\n\\n\\n\"}]","[{\"text\":\"\\nAlso, note that you don’t actually need to use ‘va_end’ function. \\n\\n\\nfact, with GCC it doesn’t do anything at all. However, you might want \\n\\n\\ninclude it to maximize compatibility with other \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nSee Variadic Functions in The GNU C Library Reference \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: The main Function, Previous: Variable Length Parameter Lists, \\n\\n\\n\\nFunctions   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n5.6 Calling Functions Through Function \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can also call a function identified by a pointer. The \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\noperator * is optional when doing \\n\\n\\n\\n\\n\\n\\n    #include \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    void foo (int \\n\\n\\n\\n\\n\\n\\n\\n\\n      printf (\\\"foo %d!\\\\n\\\", \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    void bar (int \\n\\n\\n\\n\\n\\n\\n\\n\\n      printf (\\\"%d bar!\\\\n\\\", \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    void message (void (*func)(int), int \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      int \\n\\n\\n      for (j=0; j<times; \\n\\n\\n\\n\\n        func (j);  /* (*func) (j); would be equivalent. \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    void example (int want_foo) \\n\\n\\n\\n\\n\\n\\n      void (*pf)(int) = &bar; /* The & is optional. \\n\\n\\n      if \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        pf = \\n\\n\\n\\n\\n      message (pf, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Recursive Functions, Previous: Calling Functions Through \\n\\n\\n\\n\\n\\n\\n\\n\\nPointers, Up: Functions   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n5.7 The main \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nEvery program requires at least one function, called ‘main’. This \\n\\n\\nwhere the program \"}]","[{\"text\":\"begins executing. You do not need to write \\n\\ndeclaration or prototype for main, but you do need to define \\n\\n\\n\\n\\nThe return type for main is always int. You do not have to specify \\n\\n\\n\"}]","[{\"text\":\"\\nreturn type for main, but you can. However, you _cannot_ specify that \\n\\n\\nhas a return type other than \\n\\n\\n\\n\\n\\nIn general, the return value from main indicates the program’s \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nstatus_. A value of zero or EXIT_SUCCESS indicates success \\n\\n\\n\\nEXIT_FAILURE indicates an error. Otherwise, the significance of \\n\\n\\n\\nvalue returned is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nReaching the } at the end of main without a return, or executing \\n\\nreturn statement with no value (that is, return;) are both \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nIn C89, the effect of this is undefined, but in C99 the effect \\n\\n\\nequivalent to return \\n\\n\\n\\n\\nYou can write your main function to have no parameters (that is, \\n\\n\"}]","[{\"text\":\"\\nint main (void)), or to accept parameters from the command line. Here \\n\\n\\na very simple main function with no \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    main \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      puts (\\\"Hi \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nTo accept command line parameters, you need to have two parameters \\n\\n\"}]","[{\"text\":\"\\nthe main function, int argc followed by char *argv[]. You can change \\n\\n\\n\\nnames of those parameters, but they must have those data types—int \\n\\n\\n\\narray of pointers to char. argc is \"}]","[{\"text\":\"the number of command \\n\\n\\n\\n\\nparameters, including the name of the program itself. argv is an \\n\\n\\n\\n\\n\\nof the \"}]","[{\"text\":\"parameters, as character strings. argv[0], the first element \\n\\n\\nthe array, is the name of the program as typed at the command line⁴; \\n\\n\\n\\nfollowing array elements are the parameters that \"}]","[{\"text\":\"followed the name \\n\\n\\nthe \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHere is an example main function that accepts command line \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nand prints out what those parameters \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    main (int argc, char \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      int \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      for (counter = 0; counter < argc; \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        printf (\\\"%s\\\\n\\\", \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      \\n      return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Static Functions, Previous: The main Function, Up: Functions  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n5.8 Recursive \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can write a function that is recursive—a function that calls \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nHere is an example that computes the factorial of an \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    factorial (int \\n\\n\\n\\n\\n\\n\\n\\n\\n      if (x < \\n\\n\\n        return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        return (x * factorial (x - \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nBe careful that you do not write a \"}]","[{\"text\":\"function that is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nrecursive. In the above example, once x is 1, the recursion \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nHowever, in the following example, the recursion does not stop until \\n\\n\\n\\nprogram is interrupted or runs out of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    watermelon (int \\n\\n\\n\\n\\n\\n\\n\\n\\n      return (watermelon \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nFunctions can also be indirectly recursive, of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Nested Functions, Previous: Recursive Functions, Up: Functions  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n5.9 Static \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYou can define a function to be static if you want it to be \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nonly within the source file where it is \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    static \\n\\n\\n\\n    foo (int \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      return x + \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThis is useful if you are building a reusable library of functions \\n\\n\\n\"}]","[{\"text\":\"\\nneed to include some subroutines that should not be callable by the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nFunctions which \"}]","[{\"text\":\"are defined in this way are said to have \\n\\n\\n\\n\\n\\n\\n\\nlinkage_. Unfortunately the static keyword has multiple \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nStorage Class \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Static Functions, Up: Functions   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n5.10 Nested \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nAs a GNU C extension, you can define functions within other functions, \\n\"}]","[{\"text\":\"\\ntechnique known as nesting \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHere is an example of a tail-recursive factorial \"}]","[{\"text\":\"function, defined \\n\\n\\n\\n\\n\\na nested \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    factorial (int \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      factorial_helper (int a, int \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        if (a < \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          return factorial_helper ((a - 1), (a * \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n     return factorial_helper (x, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nNote that nested functions must be defined along with \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ndeclarations at the beginning of a function, and all other \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: A Sample Program, Previous: Functions, Up: Top   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n6 Program Structure and \\n\\n\\n\\n\\n\\n\\nNow that we have seen all of the fundamental elements of C \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nit’s time to look at the big \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  ---------------------- ---- \\n\\n\\n  • Program Structure:        \\n  • \"}]","[{\"text\":\"Scope:                    \\n  ---------------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Scope, Up: Program Structure and Scope   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n6.1 Program \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nA C program may exist entirely within a single source file, but \\n\\n\\n\\n\"}]","[{\"text\":\"\\ncommonly, any non-trivial program will consist of several custom \\n\\n\\n\\n\\n\\n\\nfiles and source files, and will also include and link with files \\n\\n\\n\\n\"}]","[{\"text\":\"\\nexisting \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nBy convention, header files (with a “.h” extension) contain variable \\n\\n\\n\"}]","[{\"text\":\"\\nfunction declarations, and source files (with a “.c” extension) \\n\\n\\n\\n\\n\\n\\n\\nthe corresponding definitions. Source files may also store \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nif these declarations are not for objects which need to be seen by \\n\\n\\n\\n\\n\\nfiles. However, header files almost certainly should not contain \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nFor example, if you write a function that computes square roots, and \\n\\n\\n\\nwanted this function to be accessible to files other than where \\n\\n\\n\\ndefine the function, then you would \"}]","[{\"text\":\"put the function declaration into \\n\\nheader file (with a “.h” file \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    /* sqrt.h \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    computeSqrt (double \\n\\n\\n\\n\\nThis header file could be included by other source files which need \\n\\n\\nuse your function, but do not need to know how it was \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nThe implementation of the function would then go into a \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nsource file (with a “.c” file \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    /* sqrt.c \\n\\n\"}]","[{\"text\":\"\\n    #include \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    computeSqrt (double \\n\\n\\n\\n\\n\\n\\n\\n\\n      double \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Program Structure, Up: Program Structure and Scope  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n6.2 \\n\\n\\n\\n\\n\\n\\nScope refers to what parts of the program can “see” a declared object. \\n\\ndeclared object can be visible only within a particular function, \\n\\n\"}]","[{\"text\":\"\\nwithin a particular file, or may be visible to an entire set of files \\n\\n\\nway of including header files and using extern \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nUnless explicitly stated otherwise, declarations made at the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nof a file (i.e., not within a \"}]","[{\"text\":\"function) are visible to the entire \\n\\n\\n\\n\\n\\nincluding from within functions, but are not visible outside of \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nDeclarations made within functions are visible only within \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nA declaration is not visible to declarations that came before it; \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    int x = \\n\\n\\n    int y = x + \\n\\n\\n\\n\\nwill work, \\n\\n\\n\\n\\n\\n    int x = y + \\n\\n\\n\\n    int y = \\n\"}]","[{\"text\":\"\\n\\nwill \\n\\n\\n\\n\\n\\nSee Storage Class Specifiers, for more information on changing the \\n\\n\\n\\n\\n\\nof declared objects. Also see Static \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Overflow, Previous: Program Structure and Scope, Up: Top  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n7 A Sample \\n\\n\\n\\n\\n\\n\\n\\n\\nTo conclude our description of C, here is a complete program written \\n\\n\\nC, consisting of \"}]","[{\"text\":\"both a C source file and a header file. This program \\n\\n\\nan expanded version of the quintessential “hello world” program, \\n\\n\\n\\nserves as an example of how to format and structure C code for use \\n\\n\"}]","[{\"text\":\"\\nprograms for FSF Project GNU. (You can always download the most \\n\\n\\n\\n\\n\\n\\nversion of this program, including sample makefiles and other \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nof how to produce GNU software, from \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThis program uses features of the preprocessor; for a description \\n\\n\\npreprocessor macros, see The C Preprocessor, available as part of \\n\\n\\n\\nGCC \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n  ------------- ---- \\n\\n\\n  • hello.c:         \\n  • system.h:        \\n  ------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: system.h, Up: A Sample Program   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n7.1 \\n\\n\\n\\n\\n\\n\\n\\n\\n    /* hello.c -- print a greeting message and \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n       Copyright (C) 1992, 1995, 1996, 1997, 1998, 1999, 2000, 2001, \\n\\n\\n\\n\\n\\n       2005, 2006, 2007 Free Software Foundation, \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n       This program is free software; you can redistribute it and/or \\n\\n\\n\\n\\n\\n\\n       it under the terms of the GNU General Public License as published \\n\\n\"}]","[{\"text\":\"\\n       the Free Software Foundation; either version 3, or (at your \\n\\n\\n\\n\\n\\n\\n\\n       any later \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n       This program is distributed in the hope that it will be \\n\\n\\n\\n\\n\\n\\n\\n       but WITHOUT ANY WARRANTY; without even the implied warranty \\n\\n\"}]","[{\"text\":\"\\n       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See \\n\\n\\n\\n       GNU General Public License for more \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n       You should have received a copy of the GNU General Public \\n\\n\\n\\n\\n\\n\\n\\n       along with this program; if not, write to the Free Software \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n       Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  \\n\\n\\n\\n    #include \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    #include \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    /* String containing name the program is called with.  \\n\\n\"}]","[{\"text\":\"\\n    const char \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    static const struct option longopts[] \\n\\n\\n\\n\\n\\n\\n\\n      { \\\"greeting\\\", required_argument, NULL, 'g' \\n\\n\\n      { \\\"help\\\", \"}]","[{\"text\":\"no_argument, NULL, 'h' \\n\\n\\n      { \\\"next-generation\\\", no_argument, NULL, 'n' \\n\\n\\n      { \\\"traditional\\\", no_argument, NULL, 't' \\n\\n\\n      { \\\"version\\\", no_argument, NULL, 'v' \\n\\n\"}]","[{\"text\":\"\\n      { NULL, 0, NULL, 0 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    static void print_help \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    static void print_version \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    main (int argc, char \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      int \\n\\n\\n\\n\\n\\n      int t = 0, n = 0, lose = \\n\\n\\n      const char *greeting = \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      program_name = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      /* Set locale via LC_ALL.  \\n\\n\\n      setlocale (LC_ALL, \\n\\n\"}]","[{\"text\":\"\\n\\n    #if \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      /* Set the text message domain.  \\n\\n\"}]","[{\"text\":\"\\n      bindtextdomain (PACKAGE, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      textdomain \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n      /* Even exiting has subtleties.  The /dev/full device on \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n         can be used for testing \"}]","[{\"text\":\"whether writes are checked properly.  \\n\\n\\n\\n         instance, hello >/dev/full should exit unsuccessfully.  On \\n\\n\\n\\n\\n\\n         if any \"}]","[{\"text\":\"writes failed, change the exit status.  This \\n\\n\\n         implemented in the Gnulib module \\\"closeout\\\".  \\n\\n\\n      atexit \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      while ((optc = getopt_long (argc, argv, \\\"g:hntv\\\", longopts, NULL)) != \\n\\n\\n\\n        switch \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          /* One goal here is having --help and --version exit \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n             per GNU coding standards.  \\n\\n\\n          case \\n\\n\\n\\n\\n            print_version \\n\\n\\n\\n            exit \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          case \\n\\n\\n\\n\\n            greeting = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          case \\n\\n\\n\\n\\n            print_help \\n\\n\\n\\n            exit \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          case \\n\\n\\n\\n\\n            n = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          case \\n\\n\\n\\n\\n            t = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n            lose = \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      if (lose || optind < \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          /* Print error message and exit.  \\n\\n\\n          if (optind < \\n\\n\\n\\n\\n\\n            fprintf (stderr, _(\\\"%s: extra operand: \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n             program_name, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          fprintf (stderr, _(\\\"Try `%s --help' for more \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          exit \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      /* Print greeting message and exit. \\n\\n\\n      if \\n\\n\\n\\n        printf (_(\\\"hello, \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      else if \\n\\n\\n\\n        /* TRANSLATORS: Use box drawing characters or other fancy \\n\\n\\n\\n\\n\\n           if your encoding (e.g., UTF-8) allows it.  \"}]","[{\"text\":\"If done so add \\n\\n\\n\\n           following note, \\n\\n\\n\\n\\n\\n\\n\\n\\n           [Note: For best viewing \"}]","[{\"text\":\"results use a UTF-8 locale, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        printf \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    | Hello, world! \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          if \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n            greeting = _(\\\"Hello, \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          puts \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      \\n      exit \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    \\f\\n    /* Print help info.  This long message is split \\n\\n\\n\\n\\n       several pieces to help translators be able to align \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n       blocks and identify the various pieces.  \\n\\n\\n\\n    static \\n\\n\\n\\n\\n    print_help \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      /* TRANSLATORS: --help output 1 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n         no-wrap \\n\\n\"}]","[{\"text\":\"\\n            printf \\n\\n\\n\\n\\n\\n    Usage: %s [OPTION]...\\\\n\\\"), \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n      /* TRANSLATORS: --help output 2 (brief \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n         no-wrap \\n\\n\\n      fputs \\n\\n\\n\\n\\n\\n    Print a friendly, customizable greeting.\\\\n\\\"), \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n      puts \\n\\n\\n\\n\\n\\n      /* TRANSLATORS: --help output 3: options \\n\\n\\n\\n         no-wrap \\n\\n\\n      fputs \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      -h, --help          display this help and \\n\\n\\n\\n\\n\\n\\n\\n      -v, --version       display version information and exit\\\\n\\\"), \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n      puts \\n\\n\\n\\n\\n\\n      /* TRANSLATORS: --help output 4: options \\n\\n\\n\\n         no-wrap \\n\\n\\n      fputs \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      -t, --traditional       use traditional greeting \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      -n, --next-generation   use next-generation \"}]","[{\"text\":\"greeting \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      -g, --greeting=TEXT     use TEXT as the greeting message\\\\n\\\"), \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n      printf \\n\\n\\n\\n\\n\\n\\n\\n      /* TRANSLATORS: --help output 5 \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n         TRANSLATORS: the placeholder indicates the bug-reporting \\n\\n\\n\\n\\n\\n\\n\\n         for this application.  Please add _another line_ with \\n\\n\\n\"}]","[{\"text\":\"\\n         address for translation \\n\\n\\n\\n\\n\\n         no-wrap \\n\\n\\n      printf \\n\\n\\n\\n\\n\\n    Report bugs \"}]","[{\"text\":\"to <%s>.\\\\n\\\"), \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    \\f\\n    /* Print version and copyright information.  \\n\\n\\n\\n    static \\n\\n\\n\\n\\n    print_version \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      printf (\\\"hello (GNU %s) %s\\\\n\\\", PACKAGE, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      /* xgettext: no-wrap \\n\\n\"}]","[{\"text\":\"\\n      puts \\n\\n\\n\\n\\n\\n      \\n      /* It is important to separate the year from the rest of the \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n         as done here, to avoid having to retranslate the message when a \\n\\n\\n\\n         year comes around.  \\n\\n\\n      printf \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    Copyright (C) %s Free Software Foundation, \\n\\n\\n\\n\\n\\n\\n\\n    License GPLv3+: GNU GPL version 3 or \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    This is free software: you are free to change and redistribute \\n\\n\\n\\n\\n\\n\\n    There is NO WARRANTY, to the extent permitted by \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: hello.c, Up: A Sample Program   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n7.2 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    /* system.h: system-dependent declarations; include this \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n       Copyright (C) 1996, 2005, 2006, 2007 Free Software Foundation, \\n\\n\\n\\n\\n\\n       This program is free software; you can redistribute it and/or \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n       it under the terms of the GNU General Public License as published \\n\\n\\n       the Free Software Foundation; either version 3, or (at your \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n       any later \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n       This program is distributed in the hope that it will be \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n       but WITHOUT ANY WARRANTY; without even the implied warranty \\n\\n\\n       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See \\n\\n\\n\\n       GNU General Public License for more \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n       You should have received a copy of the GNU General Public \\n\\n\\n\\n\\n\\n\\n\\n       along with this program; if not, write to the Free Software \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n       Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  \\n\\n\\n\\n    #ifndef \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    #define \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    /* Assume ANSI C89 headers are available.  \\n\\n\\n    #include \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    #include \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    #include \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    #include \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    /* Use POSIX headers.  If they are not available, we use the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n       provided by gnulib.  \\n\\n\\n    #include \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    #include \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    /* Internationalization.  \\n\\n\\n    #include \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    #define _(str) gettext \\n\\n\\n\\n\\n\\n    #define N_(str) gettext_noop \\n\\n\\n\\n\\n\\n\\n    /* Check for \"}]","[{\"text\":\"errors on write.  \\n\\n\\n    #include \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    #endif /* HELLO_SYSTEM_H \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: GNU Free Documentation License, Previous: A Sample Program, \\n\\n\\n\\nTop   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nAppendix A \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n[This appendix, written principally by Paul Eggert, is from the \\n\\n\\n\"}]","[{\"text\":\"\\nAutoconf manual. We thought that it would be helpful to include \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nIn practice many portable C programs assume that signed integer \\n\\n\\n\\n\\n\\n\\n\\n\\nwraps around reliably using two’s complement \"}]","[{\"text\":\"arithmetic. Yet the \\n\\nstandard says that program behavior is undefined on overflow, and in \\n\\nfew cases C programs do not work on some modern implementations \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ntheir overflows do not wrap around as their authors \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nConversely, in signed integer remainder, the C standard \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\noverflow behavior that is commonly not \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n  -------------------------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n  • Integer Overflow Basics:            Why integer overflow is a \\n\\n\\n\\n\\n\\n\\n\\n  • Signed Overflow Examples:           Examples of code assuming \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n  • Optimization and Wraparound:        Optimizations that break uses of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  • Signed \"}]","[{\"text\":\"Overflow Advice:             Practical advice for signed overflow \\n\\n\\n\\n\\n\\n\\n  • Signed Integer Division:            INT_MIN / -1 and INT_MIN % \\n\\n\"}]","[{\"text\":\"\\n  -------------------------------- ---- \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Signed Overflow Examples, Up: Overflow   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nA.1 Basics of Integer \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nIn languages like C, unsigned integer overflow reliably wraps \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ne.g., UINT_MAX + 1 yields zero. This is guaranteed by the C standard \\n\\n\\n\\nis portable in practice, unless you specify aggressive, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\noptimization options suitable only for special \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nIn contrast, the C standard says that signed integer overflow leads \\n\\n\\nundefined behavior where a program can do anything, including \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ncore or overrunning a buffer. The misbehavior can even precede \\n\\n\\n\\noverflow. Such an overflow can occur during addition, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nmultiplication, division, and left \\n\\n\\n\\n\\n\\n\\n\\nDespite this requirement of the standard, many C programs assume \\n\\n\\n\\n\"}]","[{\"text\":\"\\nsigned integer overflow silently wraps around modulo a power of \\n\\n\\n\\n\\nusing two’s complement arithmetic, so long as you cast the \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nvalue to a signed integer type or store it into a signed \\n\\n\\n\\n\\n\\n\\n\\nvariable. If you use conservative optimization flags, such programs \\n\\n\\n\"}]","[{\"text\":\"\\ngenerally portable to the vast majority of modern platforms, with a \\n\\n\\n\\nexceptions discussed \\n\\n\\n\\n\\n\\n\\n\\nFor historical \"}]","[{\"text\":\"reasons the C standard also allows implementations \\n\\n\\n\\n\\nones’ complement or signed magnitude arithmetic, but it is safe \\n\\n\\nassume two’s complement \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nAlso, overflow can occur when converting an out-of-range value to \\n\\nsigned integer type. Here a standard implementation must define \\n\\n\\n\\n\\nhappens, but this might include raising an exception. \"}]","[{\"text\":\"In practice \\n\\n\\n\\nknown implementations support silent wraparound in this case, so \\n\\n\\n\\nneed not worry about other \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Optimization and Wraparound, Previous: Integer Overflow \\n\\n\\n\\n\\n\\n\\n\\nUp: Overflow   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nA.2 Examples of Code Assuming Wraparound \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThere has long been a tension between what the C standard requires \\n\\n\\n\"}]","[{\"text\":\"\\nsigned integer overflow, and what C programs commonly assume. \\n\\n\\n\\nstandard allows aggressive optimizations based on assumptions \\n\\n\\n\\n\\noverflow never \"}]","[{\"text\":\"occurs, but many practical C programs rely on \\n\\n\\n\\n\\n\\n\\n\\n\\nwrapping around. These programs do not conform to the standard, but \\n\\n\\n\\n\"}]","[{\"text\":\"\\ncommonly work in practice because compiler writers are \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nreluctant to implement optimizations that would break many \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nunless perhaps a user specifies \"}]","[{\"text\":\"aggressive \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThe C Standard says that if a program has signed integer overflow \\n\\n\\n\\nbehavior is undefined, and the undefined behavior can even precede \\n\\n\\n\\noverflow. To take an extreme \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    if (password == \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      allow_superuser_privileges \\n\\n\\n\\n    else if (counter++ == \\n\\n\\n\\n\\n\\n\\n\\n\\n      abort \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      printf (\\\"%d password mismatches\\\\n\\\", \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nIf the int variable counter equals \"}]","[{\"text\":\"INT_MAX, counter++ must overflow \\n\\n\\n\\nthe behavior is undefined, so the C standard allows the compiler \\n\\n\\noptimize away the test against INT_MAX and the abort call. Worse, if \\n\\n\"}]","[{\"text\":\"\\nearlier bug in the program lets the compiler deduce \\n\\n\\n\\n\\ncounter == INT_MAX or that counter previously overflowed, the C \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nallows the compiler to optimize away the password test and generate \\n\\n\\n\\n\\nthat allows superuser privileges \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nDespite this requirement by the standard, it has long been common for \\n\\ncode to assume wraparound arithmetic after signed overflow, and \\n\\n\\n\\nknown practical C implementations support some C idioms that \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nwraparound signed arithmetic, even if the idioms do not conform \\n\\n\\n\\n\\n\\n\\n\\n\\nto the standard. If your code looks like the following \"}]","[{\"text\":\"examples it \\n\\n\\n\\n\\nalmost surely work with real-world \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nHere is an example derived from the 7th Edition Unix implementation \\n\\n\\natoi \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    char \\n\\n\\n\\n    int f, \\n\\n\\n\\n\\n\\n\\n\\n\\n    while (*p >= '0' && *p <= \\n\\n\\n\\n\"}]","[{\"text\":\"\\n      n = n * 10 + *p++ - \\n\\n\\n\\n\\n    return (f ? -n : \\n\\n\\n\\n\\nEven if the input string is in range, on most modern machines this \\n\\n\\n\"}]","[{\"text\":\"\\nsigned overflow when computing the most negative integer (the \\n\\n\\noverflows) or a value near an extreme integer (the first + \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nHere is another example, derived from the 7th Edition implementation \\n\\n\\nrand (1979-01-10). Here the programmer expects both multiplication \\n\\n\\n\\naddition to wrap on \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    static long int randx = \\n\\n\\n\\n\\n\\n\\n\\n\\n    randx = randx * 1103515245 + \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    return (randx >> 16) & \\n\\n\\n\\n\\n\\n\\n\\n\\nIn the following example, derived from the GNU C Library \\n\\n\\n\"}]","[{\"text\":\"\\nimplementation of mktime (2006-09-09), the code assumes \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\narithmetic in + \"}]","[{\"text\":\"to detect signed \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    time_t t, t1, \\n\\n\\n\"}]","[{\"text\":\"\\n    int sec_requested, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    t1 = t + \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    t2 = t1 + \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    if (((t1 < t) != (sec_requested < \\n\\n\\n\\n        || ((t2 < t1) != (sec_adjustment < \\n\\n\\n\\n\\n      return \\n\\n\\n\"}]","[{\"text\":\"\\nIf your code looks like these examples, it is probably safe even \\n\\n\\n\\n\\n\\n\\nit does not strictly conform to the C standard. This might lead one \\n\\n\"}]","[{\"text\":\"\\nbelieve that one can generally assume wraparound on overflow, but \\n\\n\\n\\n\\nis not always true, as can be seen in the next \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Signed Overflow Advice, Previous: Signed Overflow Examples, \\n\\n\\n\\nOverflow   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nA.3 Optimizations That Break Wraparound \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nCompilers sometimes generate code \"}]","[{\"text\":\"that is incompatible with \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ninteger arithmetic. A simple example is an algebraic \"}]","[{\"text\":\"simplification: \\n\\ncompiler might translate (i * 2000) / 1000 to i * 2 because it \\n\\n\\n\\n\\n\\n\\n\\nthat i * 2000 does not overflow. The translation is not \"}]","[{\"text\":\"equivalent \\n\\n\\nthe original when overflow occurs: e.g., in the typical case of \\n\\n\\n\\n\\n\\n\\nsigned two’s complement wraparound int, if i has type \"}]","[{\"text\":\"int and \\n\\n\\n\\n\\n\\n1073742, the original expression returns -2147483 but the \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nversion returns the mathematically correct value \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nMore subtly, loop induction optimizations often exploit the \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nbehavior of signed overflow. Consider the following contrived \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    sumc (int lo, int \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      int sum = \\n\\n\\n      int \\n\\n\"}]","[{\"text\":\"\\n      for (i = lo; i <= hi; \\n\\n\\n\\n\\n        sum ^= i * \\n\\n\\n\\n      return \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nTo avoid multiplying by 53 each time through the loop, an \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ncompiler might \"}]","[{\"text\":\"internally transform sumc to the equivalent of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    transformed_sumc (int lo, int \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      int sum = \\n\\n\\n      int hic = hi * \\n\\n\\n\"}]","[{\"text\":\"\\n      int \\n\\n\\n\\n      for (ic = lo * 53; ic <= hic; ic += \\n\\n\\n\\n        sum ^= \\n\\n\\n\\n      return \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nThis transformation is allowed by the C standard, but it is invalid \\n\\n\\n\\nwraparound arithmetic when INT_MAX / 53 < hi, because then the \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nin computing expressions like hi * 53 can cause the expression i <= \\n\\n\\nto yield a different value from the transformed expression ic <= \\n\\n\\n\\n\\n\\nFor this reason, compilers that use \"}]","[{\"text\":\"loop induction and \\n\\n\\n\\n\\n\\n\\n\\ntechniques often do not support reliable wraparound arithmetic when \\n\\nloop induction variable like ic is \"}]","[{\"text\":\"involved. Since loop \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvariables are generated by the compiler, and are not visible in \\n\\n\\n\"}]","[{\"text\":\"\\nsource code, it is not always trivial to say whether the problem \\n\\n\\n\\n\\n\\n\\n\\nyour \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nHardly any code actually depends on wraparound arithmetic in cases \\n\\n\\n\\n\\nthese, so in practice these loop induction optimizations are \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nalways useful. However, edge cases in this area can cause problems. \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    int \\n\\n\\n    for (j = 1; 0 < j; j *= \\n\\n\\n      test \\n\\n\\n\\n\\n\\nHere, the loop attempts to iterate through all powers of 2 that int \\n\\n\\n\"}]","[{\"text\":\"\\nrepresent, but the C standard allows a compiler to optimize away \\n\\n\\n\\ncomparison and generate an infinite loop, under the argument \\n\\n\\n\\n\\nbehavior is \"}]","[{\"text\":\"undefined on overflow. As of this writing this \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nis not done by any production version of GCC with -O2, but it might \\n\\n\\nperformed by other compilers, or by more aggressive GCC \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\noptions, and the GCC developers have not decided whether it \\n\\n\\n\\n\\ncontinue to work with GCC and \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Signed Integer Division, Previous: Optimization and \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nUp: Overflow   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nA.4 Practical Advice for Signed Overflow \\n\\n\\n\\n\\n\\n\\n\\nIdeally the safest approach is to avoid signed integer \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nentirely. For example, instead of multiplying two signed integers, \\n\\n\\n\\ncan convert them to unsigned integers, multiply the unsigned \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nthen test whether the result is in signed \\n\\n\\n\\n\\n\\n\\n\\nRewriting code in this way will be inconvenient, though, particularly \\n\\n\\nthe signed values \"}]","[{\"text\":\"might be negative. Also, it may hurt \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nUsing unsigned \"}]","[{\"text\":\"arithmetic to check for overflow is particularly \\n\\n\\n\\n\\n\\n\\n\\nto do portably and efficiently when dealing with an integer type \\n\\n\\n\\n\"}]","[{\"text\":\"\\nuid_t whose width and signedness vary from platform to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nFurthermore, many C applications \"}]","[{\"text\":\"pervasively assume wraparound \\n\\n\\n\\n\\n\\n\\n\\n\\nand typically it is not easy to find and remove all these \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nHence it is often useful to maintain nonstandard code that \\n\\n\\n\\n\\n\\n\\n\\nwraparound on overflow, instead of rewriting the code. The rest of \\n\\n\\n\\n\"}]","[{\"text\":\"\\nsection attempts to give practical advice for this \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nIf your code wants to detect signed \"}]","[{\"text\":\"integer overflow in sum = a + b, \\n\\n\\nis generally safe to use an expression like (sum < a) != (b < \\n\\n\\n\\n\\nIf your code uses a signed loop index, make sure that the index \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\noverflow, along with all signed expressions derived from the index. \\n\\n\\n\\n\\nis a contrived example of problematic code with two instances \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    for (i = INT_MAX - 10; i <= INT_MAX; \\n\\n\\n\\n\\n      if (i + 1 < \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n          report_overflow \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nBecause of the two overflows, a compiler might optimize away \\n\\n\\ntransform the two comparisons in a way that is incompatible with \\n\\n\\n\\nwraparound \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nIf your code uses an expression like (i * 2000) / 1000 and you \\n\\n\\n\\n\\n\\n\\n\\n\\nwant the multiplication to wrap around on overflow, use \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\narithmetic to do it, e.g., ((int) (i * 2000u)) / \\n\\n\\n\\n\\n\\n\\nIf your code assumes wraparound behavior and you want to insulate \\n\\n\\nagainst any GCC \"}]","[{\"text\":\"optimizations that would fail to support that \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nyou should use GCC’s -fwrapv option, which causes \"}]","[{\"text\":\"signed overflow \\n\\n\\nwrap around reliably (except for division and remainder, as discussed \\n\\n\\nthe next \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nIf you need to port to platforms where signed integer overflow does \\n\\n\\n\\nreliably wrap around (e.g., due to hardware overflow checking, or \\n\\n\\nhighly aggressive optimizations), you should consider \"}]","[{\"text\":\"debugging \\n\\n\\n\\n\\nGCC’s -ftrapv option, which causes signed overflow to raise \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: Signed Overflow Advice, Up: Overflow   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nA.5 Signed Integer Division and Integer \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nOverflow in signed integer division is not always harmless: for \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\non CPUs of the i386 family, dividing INT_MIN by -1 yields a \\n\\n\\n\\n\\n\\n\\nsignal which by default terminates the program. Worse, taking \\n\\n\\n\"}]","[{\"text\":\"\\nremainder of these two values typically yields the same signal on \\n\\n\\n\\n\\n\\nCPUs, even though the C standard requires INT_MIN % -1 to yield \\n\\n\\n\\n\"}]","[{\"text\":\"\\nbecause the expression does not \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nNext: Index, Previous: Overflow, Up: Top   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nGNU Free Documentation \\n\\n\\n\\n\\n\\n\\n\\n\\nVersion 1.3, 3 November \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    Everyone is permitted to copy and distribute verbatim \\n\\n\\n\\n\\n\\n\\n    of this license document, but changing it is not \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n1.  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    The purpose of this License is to make a manual, textbook, or \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    functional and useful document _free_ in the sense of freedom: \\n\\n\\n    assure everyone the effective freedom to copy and redistribute \\n\\n\\n\\n    with or without modifying it, either commercially \\n\\n\"}]","[{\"text\":\"\\n    noncommercially. Secondarily, this License preserves for the \\n\\n\\n\\n\\n\\n\\n    and publisher a way to get credit for their work, while not \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    considered responsible for modifications made by \\n\\n\\n\\n\\n\\n\\n\\n\\n    This License is a kind of “copyleft”, which means that \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    works of the document must themselves be free in the same sense. \\n\\n\\n    complements the GNU General Public License, which is a \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    license designed for free \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    We have designed this License in order to use it \"}]","[{\"text\":\"for manuals \\n\\n\\n\\n    free software, because free software needs free documentation: \\n\\n    free program should come with manuals providing the same \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    that the software does. But this License is not limited to \\n\\n\\n\\n\\n\\n\\n\\n\\n    manuals; it can be used for any textual work, \"}]","[{\"text\":\"regardless of \\n\\n\\n\\n\\n\\n\\n\\n    matter or whether it is published as a printed book. We \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    this License principally for works whose purpose is instruction \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n2.  APPLICABILITY AND \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    This License \"}]","[{\"text\":\"applies to any manual or other work, in any \\n\\n\\n\\n\\n\\n\\n\\n    that contains a notice placed by the copyright holder saying it \\n\\n\\n\"}]","[{\"text\":\"\\n    be distributed under the terms of this License. Such a notice \\n\\n\\n\\n\\n\\n\\n    a world-wide, royalty-free license, unlimited in duration, to \\n\\n\\n\"}]","[{\"text\":\"\\n    that work under the conditions stated herein. The “Document”, \\n\\n\\n\\n\\n\\n\\n    refers to any such manual or work. Any member of the public is \\n\\n    licensee, and \"}]","[{\"text\":\"is addressed as “you”. You accept the license if \\n\\n\\n\\n    copy, modify or distribute the work in a way requiring \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    under copyright \\n\\n\\n\\n\\n\\n    A “Modified Version” of the Document means any work containing \\n\\n\\n\\n    Document or a portion of it, either copied \"}]","[{\"text\":\"verbatim, or \\n\\n\\n\\n\\n    modifications and/or translated into another \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    A “Secondary Section” is a named appendix or a front-matter \\n\\n\\n\\n\\n\\n\\n\\n    of the Document that deals exclusively with the relationship of \\n\\n\\n\"}]","[{\"text\":\"\\n    publishers or authors of the Document to the Document’s \\n\\n\\n\\n\\n\\n\\n\\n    subject (or to related matters) and contains nothing that could \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    directly within that overall subject. (Thus, if the Document is \\n\\n\\n    part a textbook of mathematics, a Secondary Section may not \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    any mathematics.) The relationship could be a matter of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    connection \"}]","[{\"text\":\"with the subject or with related matters, or of \\n\\n\\n\\n\\n\\n\\n    commercial, philosophical, ethical or political position \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    The “Invariant Sections” are certain Secondary Sections whose \\n\\n\\n\\n\\n\\n\\n    are designated, as being those of Invariant Sections, in the \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    that says that the Document is released under this License. If \\n\\n    section does not fit the above definition of Secondary then it \\n\\n\\n    not allowed to be designated as Invariant. The Document may \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    zero Invariant Sections. If the Document does not identify \\n\\n\\n\\n    Invariant Sections then there are \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    The “Cover Texts” are certain short passages of text that \\n\\n\\n\\n    listed, as Front-Cover Texts or Back-Cover Texts, in the notice \\n\\n\\n\\n\\n    says that the \"}]","[{\"text\":\"Document is released under this License. A \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    Text may be \"}]","[{\"text\":\"at most 5 words, and a Back-Cover Text may be at most \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    A “Transparent” copy of the Document means a machine-readable \\n\\n\\n\\n\\n\\n    represented in a format whose specification is available to \\n\\n\\n\"}]","[{\"text\":\"\\n    general public, that is suitable for revising the \\n\\n\\n\\n\\n\\n\\n\\n\\n    straightforwardly with generic text editors or (for images \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    of pixels) generic paint programs or (for drawings) some \\n\\n\\n\\n\\n\\n\\n    available drawing editor, and that is suitable for input to \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    formatters or for automatic translation to a variety of \\n\\n\\n\\n\\n\\n\\n\\n    suitable for input to text formatters. A copy made in an \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    Transparent file format whose markup, or absence of markup, has \\n\\n\\n\\n\\n    arranged to thwart or discourage subsequent modification by \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    is not Transparent. An image format is not Transparent if used \\n\\n\\n\\n    any substantial amount of text. A copy that is not “Transparent” \\n\\n\\n    called \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    Examples of suitable formats for Transparent copies include \\n\\n\\n\\n\\n\\n    ASCII without markup, Texinfo input format, LaTeX input format, \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    or XML using a publicly available DTD, and \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    simple HTML, PostScript or PDF designed for human \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    Examples of transparent image formats include PNG, XCF and \\n\\n\\n\\n\\n    Opaque formats include proprietary formats that can be read \\n\\n\\n\\n    edited only \"}]","[{\"text\":\"by proprietary word processors, SGML or XML for \\n\\n\\n\\n\\n\\n    the DTD and/or processing tools are not generally available, and \\n\\n\\n\"}]","[{\"text\":\"\\n    machine-generated HTML, PostScript or PDF produced by some \\n\\n\\n\\n\\n    processors for output purposes \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    The “Title Page” means, for a printed book, the title page \\n\\n\\n\\n\\n\\n\\n\\n    plus such following pages as are needed to hold, legibly, \\n\\n\\n\"}]","[{\"text\":\"\\n    material this License requires to appear in the title page. \\n\\n\\n\\n    works in formats which do not have any title page as such, \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    Page” means the text near the most prominent appearance of \\n\\n\\n\\n    work’s title, preceding the beginning of the body of the \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    The “publisher” means any person or entity that distributes \\n\\n\\n\\n\\n\\n\\n    of the Document to the \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    A section “Entitled XYZ” means a named subunit of the Document \\n\\n\\n\\n\\n\\n    title either is precisely XYZ or contains XYZ in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    following text that translates XYZ in another language. (Here \\n\\n\\n\\n    stands for a specific section name mentioned below, such \\n\\n\\n    “Acknowledgements”, “Dedications”, “Endorsements”, \"}]","[{\"text\":\"or “History”.) \\n\\n\\n    “Preserve the Title” of such a section when you modify the \\n\\n\\n\\n\\n\\n\\n\\n\\n    means that it \"}]","[{\"text\":\"remains a section “Entitled XYZ” according to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    The Document may include Warranty Disclaimers next to the \\n\\n\\n\\n\\n\\n\\n    which states that this License applies to the Document. \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    Warranty Disclaimers are considered to be included by reference \\n\\n\\n    this License, but only as regards disclaiming warranties: any \\n\\n\\n\\n\\n\\n    implication \"}]","[{\"text\":\"that these Warranty Disclaimers may have is void and \\n\\n\\n\\n    no effect on the meaning of this \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n3.  VERBATIM \\n\\n\\n\\n\\n\\n\\n\\n\\n    You may copy and distribute the Document in any medium, \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    commercially or noncommercially, provided that this License, \\n\\n\\n\\n    copyright notices, and the license notice saying this \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    applies to the Document are reproduced in all copies, and that \\n\\n\\n\\n    add no other conditions whatsoever to those of this License. You \\n\\n\\n\\n    not use technical measures to \"}]","[{\"text\":\"obstruct or control the reading \\n\\n\\n    further copying of the copies you make or distribute. However, \\n\\n\\n\\n    may accept compensation in exchange for copies. If you distribute \\n\\n    large enough \"}]","[{\"text\":\"number of copies you must also follow the conditions \\n\\n\\n    section \\n\\n\\n\\n    You may also lend copies, under the same conditions stated \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    and you may publicly display \\n\\n\\n\\n\\n\\n\\n\\n\\n4.  COPYING IN \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    If you publish printed copies (or copies in media that commonly \\n\\n\\n\\n\\n    printed covers) of the Document, numbering more than 100, and \\n\\n\\n\\n    Document’s \"}]","[{\"text\":\"license notice requires Cover Texts, you must enclose \\n\\n\\n\\n    copies in covers that carry, clearly and legibly, all these \\n\\n\\n\\n\\n\\n    Texts: \"}]","[{\"text\":\"Front-Cover Texts on the front cover, and Back-Cover Texts \\n\\n\\n    the back cover. Both covers must also clearly and legibly \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    you as the publisher of these copies. The front cover must \\n\\n\\n\\n\\n\\n\\n\\n    the full title with all words of the title equally prominent \\n\\n\\n\"}]","[{\"text\":\"\\n    visible. You may add other material on the covers in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    Copying with changes limited to \"}]","[{\"text\":\"the covers, as long as they \\n\\n\\n\\n\\n\\n\\n\\n\\n    the title of the Document and satisfy these conditions, can \\n\\n\"}]","[{\"text\":\"\\n    treated as verbatim copying in other \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    If the required texts for either \"}]","[{\"text\":\"cover are too voluminous to \\n\\n\\n\\n    legibly, you should put the first ones listed (as many as \\n\\n\\n\\n    reasonably) on the actual cover, and continue the rest onto \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    If you publish or distribute Opaque copies of the Document \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    more than 100, you must either \"}]","[{\"text\":\"include a \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    Transparent copy along with each Opaque copy, or state in or \\n\\n\\n\\n\\n    each Opaque copy a computer-network location from which the \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    network-using public has access to download using \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    network protocols a complete Transparent copy of the Document, \\n\\n\\n\\n\\n    of added material. If you use the latter option, you must \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    reasonably prudent steps, when you begin distribution of \\n\\n\\n\\n\\n\\n\\n    copies in quantity, to ensure that this Transparent copy will \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    thus accessible at the stated location until at least one year \\n\\n\\n\\n\\n\\n    the last time you distribute an Opaque copy (directly or \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    your agents or retailers) of that edition to the \\n\\n\\n\\n\\n\\n\\n\\n\\n    It is requested, but not required, that you contact the authors \\n\\n\"}]","[{\"text\":\"\\n    the Document well before redistributing any large number of \\n\\n\\n\\n\\n\\n\\n\\n    to give them a chance to provide you with an updated version of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n5.  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    You may copy and distribute a Modified Version of the Document \\n\\n\\n\\n\\n\\n    the conditions of sections 2 and 3 above, provided that you \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    the Modified Version under precisely this License, with the \\n\\n\\n\\n\\n\\n\\n\\n\\n    Version filling the role of the Document, thus \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    distribution and modification of the Modified Version to \\n\\n\\n\\n\\n\\n\\n\\n    possesses a copy of it. In addition, you must do these things in \\n\\n\\n\"}]","[{\"text\":\"\\n    Modified \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    1.  Use in the Title Page (and on the covers, if any) a \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        distinct from that of the Document, and from those of \\n\\n\\n\\n\\n\\n\\n\\n\\n        versions (which should, if there were any, be \"}]","[{\"text\":\"listed in \\n\\n\\n\\n        History section of the Document). You may use the same title \\n\\n\\n        a previous version if the original publisher of that \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        gives \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    2.  List on the Title Page, as authors, one or more \"}]","[{\"text\":\"persons \\n\\n\\n        entities responsible for authorship of the modifications in \\n\\n\\n\\n        Modified Version, together with at least five of the \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        authors of the Document (all of its principal authors, if it \\n\\n\\n\\n        fewer than five), unless they release you from this \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    3.  State on the Title page the name of the publisher of \\n\\n\\n\\n        Modified Version, as the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    4.  Preserve all the copyright notices of the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    5.  Add an appropriate copyright notice for your \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        adjacent to the other copyright \\n\\n\\n\\n\\n\\n\\n\\n\\n    6.  Include, immediately after the copyright notices, a \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        notice giving the public permission to use the Modified \\n\\n\\n\\n\\n\\n\\n\\n        under the terms of this License, in the form shown in \\n\\n\\n\"}]","[{\"text\":\"\\n        Addendum \\n\\n\\n\\n\\n\\n\\n    7.  Preserve in that license notice the full lists of \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        Sections and required Cover Texts given in the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        license \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    8.  Include an unaltered copy of this \\n\\n\\n\\n\\n\\n\\n\\n\\n    9.  Preserve the section Entitled “History”, Preserve its Title, \\n\\n\\n\"}]","[{\"text\":\"\\n        add to it an item stating at least the title, year, new \\n\\n\\n\\n\\n\\n\\n\\n\\n        and publisher of the Modified Version as given \"}]","[{\"text\":\"on the \\n\\n\\n\\n\\n\\n        Page. If there is no section Entitled “History” in the \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        create one stating the title, year, authors, and publisher \\n\\n\\n        the Document as given on its Title Page, then add an \\n\\n\\n\\n\\n        describing the Modified \"}]","[{\"text\":\"Version as stated in the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    10. Preserve the network location, if any, given in the Document \\n\\n\\n\\n        public access to a Transparent copy of the Document, \\n\\n\\n\\n        likewise the network \"}]","[{\"text\":\"locations given in the Document \\n\\n\\n\\n        previous versions it was based on. These may be placed in \\n\\n\\n\\n        “History” section. You may omit a network location for a \\n\\n\\n\\n\"}]","[{\"text\":\"\\n        that was published at least four years before the \\n\\n\\n\\n\\n\\n\\n\\n\\n        itself, or if the original publisher of the \"}]","[{\"text\":\"version it refers \\n\\n\\n        gives \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    11. For any \"}]","[{\"text\":\"section Entitled “Acknowledgements” or \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        Preserve the Title of the section, and preserve in the \\n\\n\\n\\n\\n\\n\\n\\n        all the substance and tone of each of the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        acknowledgements and/or dedications given \\n\\n\\n\\n\\n\\n\\n\\n\\n    12. Preserve all the Invariant Sections of the Document, \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        in their text and in their titles. Section numbers or \\n\\n\\n\\n        equivalent are not considered part of the section \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    13. Delete any section Entitled “Endorsements”. Such a section \\n\\n\\n\\n        not be included in the Modified \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    14. Do not retitle any existing section to be \\n\\n\\n\\n\\n\\n\\n\\n\\n        “Endorsements” or to conflict in title with any \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    15. Preserve any Warranty \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    If the \"}]","[{\"text\":\"Modified Version includes new front-matter sections \\n\\n\\n    appendices that qualify as Secondary Sections and contain \\n\\n\\n    material copied from the Document, you may at your option \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    some or all of these sections as invariant. To do this, add \\n\\n\\n\\n\\n\\n    titles to the list of Invariant Sections in the Modified \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    license notice. These titles must be distinct from any other \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    You may add a section Entitled “Endorsements”, provided it \\n\\n\\n\\n\\n\\n\\n\\n\\n    nothing but endorsements of your Modified Version \"}]","[{\"text\":\"by \\n\\n\\n\\n\\n\\n\\n\\n    parties—for example, statements of peer review or that the text \\n\\n\\n\\n    been approved \"}]","[{\"text\":\"by an organization as the authoritative definition \\n\\n\\n    a \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    You may add a passage of up to five words as a Front-Cover Text, \\n\\n\\n\\n    a passage of up to 25 words as a Back-Cover Text, to the end of \\n\\n\\n\\n    list of Cover Texts in the \"}]","[{\"text\":\"Modified Version. Only one passage \\n\\n\\n    Front-Cover Text and one of Back-Cover Text may be added by \\n\\n\\n\\n    through arrangements made by) any one entity. If the \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    already includes a cover text for the same cover, previously \\n\\n\\n\\n\\n\\n    by you or by arrangement made by the same entity you are acting \\n\\n\\n    behalf of, \"}]","[{\"text\":\"you may not add another; but you may replace the old \\n\\n\\n\\n\\n    on explicit permission from the previous publisher that added \\n\\n\\n\\n    old \\n\\n\\n\"}]","[{\"text\":\"\\n\\n    The author(s) and publisher(s) of the Document do not by \\n\\n\\n\\n\\n    License give permission to use their names for publicity for or \\n\\n\\n    assert or imply endorsement of \"}]","[{\"text\":\"any Modified \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n6.  COMBINING \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    You may combine the Document with other documents released \\n\\n\\n\\n\\n\\n    this License, under the terms defined in section 4 above \\n\\n\\n\"}]","[{\"text\":\"\\n    modified versions, provided that you include in the combination \\n\\n\\n\\n    of the Invariant Sections of all of the original \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    unmodified, and list them all as Invariant Sections of your \\n\\n\\n\\n\\n\\n\\n\\n\\n    work in its license notice, and that you preserve \"}]","[{\"text\":\"all their \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    The combined work need only contain one copy of this License, \\n\\n\\n\\n    multiple identical Invariant Sections may be replaced with a \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    copy. If there are multiple Invariant Sections with the same \\n\\n\\n\\n\\n    but different contents, make the title of each such section \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    by adding at the end of it, in parentheses, the name of the \\n\\n\\n\\n\\n\\n\\n\\n\\n    author or publisher of that section if known, or \"}]","[{\"text\":\"else a \\n\\n\\n\\n\\n\\n\\n    number. Make the same adjustment to the section titles in the \\n\\n\\n\\n\\n    of Invariant \"}]","[{\"text\":\"Sections in the license notice of the combined \\n\\n\\n\\n\\n\\n\\n    In the combination, you must combine any sections Entitled \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    in the various original documents, forming one section \\n\\n\\n\\n\\n\\n\\n\\n\\n    “History”; likewise combine any sections \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    “Acknowledgements”, and any sections Entitled “Dedications”. \\n\\n\\n\\n    must delete all sections Entitled \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n7.  COLLECTIONS OF \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    You may make a collection consisting of the \"}]","[{\"text\":\"Document and \\n\\n\\n\\n\\n\\n    documents released under this License, and replace the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    copies of this License in the various documents with a single \\n\\n\\n\\n\\n    that is included in the collection, provided that you follow \\n\\n\\n\\n    rules of this \"}]","[{\"text\":\"License for verbatim copying of each of the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    in all other \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    You may extract a single document from such a collection, \\n\\n\\n\\n    distribute it individually under this License, provided you insert \\n\\n    copy of this License into the extracted document, and follow \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    License in all other respects regarding verbatim copying of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n8.  AGGREGATION WITH INDEPENDENT \\n\\n\\n\\n\\n\\n\\n    A compilation of the Document or its derivatives with other \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    and independent documents or works, in or on a volume of a \\n\\n\\n\\n\\n\\n\\n\\n    or distribution medium, is called an “aggregate” if the \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    resulting from the compilation is not used to limit the legal \\n\\n\\n\\n\\n\\n\\n    of the compilation’s users beyond what the individual works \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    When the Document is included in an aggregate, this License does \\n\\n\\n\\n    apply to the other works in the aggregate which are not \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    derivative works of the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    If the Cover Text requirement of section 3 is \"}]","[{\"text\":\"applicable to \\n\\n\\n\\n\\n\\n    copies of the Document, then if the Document is less than one \\n\\n\\n\\n\\n    of the entire aggregate, the \"}]","[{\"text\":\"Document’s Cover Texts may be placed \\n\\n\\n    covers that bracket the Document within the aggregate, or \\n\\n\\n\\n    electronic equivalent of covers if the Document is in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    form. Otherwise they must appear on printed covers that bracket \\n\\n\\n\\n    whole \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n9.  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    Translation is considered a kind \"}]","[{\"text\":\"of modification, so you \\n\\n\\n\\n    distribute translations of the Document under the terms of \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    4. Replacing Invariant Sections with translations requires \\n\\n\\n\\n\\n\\n\\n\\n    permission from their copyright holders, but you may \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    translations of some or all Invariant Sections in addition to \\n\\n\\n\\n    original versions of these Invariant Sections. You may include \\n\\n    translation of this License, and all the license notices in \\n\\n\\n\"}]","[{\"text\":\"\\n    Document, and any Warranty Disclaimers, provided that you \\n\\n\\n\\n\\n    include the original English version of this License and \\n\\n\\n\\n    original \"}]","[{\"text\":\"versions of those notices and disclaimers. In case of \\n\\n    disagreement between the translation and the original version \\n\\n\\n    this License or a notice or disclaimer, the original version \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    If a section in the Document is Entitled \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    “Dedications”, or “History”, the requirement (section 4) to \\n\\n\\n\\n\\n\\n\\n\\n\\n    its Title (section 1) will typically require \"}]","[{\"text\":\"changing the \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n10. \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    You may not copy, modify, \"}]","[{\"text\":\"sublicense, or distribute the \\n\\n\\n\\n\\n\\n\\n\\n\\n    except as expressly provided under this License. Any \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    otherwise to copy, modify, sublicense, or distribute it is void, \\n\\n\\n\\n    will automatically terminate your rights under this \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    However, if you cease all violation of this License, then \\n\\n\\n\\n\\n    license from a particular copyright holder is reinstated \\n\\n\\n\"}]","[{\"text\":\"\\n    provisionally, unless and until the copyright holder explicitly \\n\\n\\n\\n    finally terminates your license, and (b) permanently, if \\n\\n\\n\\n    copyright holder fails to notify \"}]","[{\"text\":\"you of the violation by \\n\\n\\n\\n\\n    reasonable means prior to 60 days after the \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n    Moreover, your license from a particular copyright holder \\n\\n\\n    reinstated permanently if the copyright holder notifies you of \\n\\n\\n\\n    violation by some reasonable means, this is the \"}]","[{\"text\":\"first time you \\n\\n\\n\\n\\n    received notice of violation of this License (for any work) \\n\\n\\n\\n\\n    that copyright holder, and you cure the violation \"}]","[{\"text\":\"prior to 30 \\n\\n\\n\\n\\n    after your receipt of the \\n\\n\\n\\n\\n\\n\\n\\n\\n    Termination \"}]","[{\"text\":\"of your rights under this section does not terminate \\n\\n\\n\\n    licenses of parties who have received copies or rights from \\n\\n\\n\\n    under this License. If your rights have been \"}]","[{\"text\":\"terminated and \\n\\n\\n\\n    permanently reinstated, receipt of a copy of some or all of the \\n\\n\\n\\n\\n    material does not give you any rights to use \\n\\n\\n\"}]","[{\"text\":\"\\n11. FUTURE REVISIONS OF THIS \\n\\n\\n\\n\\n\\n\\n\\n\\n    The Free Software Foundation may publish new, revised versions \\n\\n\"}]","[{\"text\":\"\\n    the GNU Free Documentation License from time to time. Such \\n\\n\\n\\n    versions will be similar in spirit to the present version, but \\n\\n\\n\\n    differ in detail to address new \"}]","[{\"text\":\"problems or concerns. \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    Each version of the License is given a distinguishing \\n\\n\\n\\n\\n\\n\\n\\n    number. If the Document specifies that a particular numbered \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    of this License “or any later version” applies to it, you have \\n\\n\\n\\n    option of following the terms and conditions either of \\n\\n\\n\\n\\n    specified \"}]","[{\"text\":\"version or of any later version that has been \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    (not as a draft) by the Free Software Foundation. \"}]","[{\"text\":\"If the \\n\\n\\n\\n\\n\\n\\n\\n\\n    does not specify a version number of this License, you may \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    any version ever published (not as a draft) by the Free \\n\\n\\n\\n\\n\\n\\n\\n\\n    Foundation. If the Document specifies that a proxy \"}]","[{\"text\":\"can decide \\n\\n\\n\\n\\n\\n    future versions of this License can be used, that proxy’s \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    statement of acceptance of a version permanently authorizes you \\n\\n\\n    choose that version for the \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n12. \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    “Massive Multiauthor \"}]","[{\"text\":\"Collaboration Site” (or “MMC Site”) means \\n\\n\\n\\n    World Wide Web server that publishes copyrightable works and \\n\\n\\n\\n\\n    provides prominent facilities \"}]","[{\"text\":\"for anybody to edit those works. \\n\\n    public wiki that anybody can edit is an example of such a server. \\n\\n    “Massive Multiauthor Collaboration” (or “MMC”) contained in the \\n\\n\\n\\n\\n    means any set \"}]","[{\"text\":\"of copyrightable works thus published on the MMC \\n\\n\\n\\n\\n\\n\\n    “CC-BY-SA” means the Creative Commons Attribution-Share Alike \\n\\n\\n\"}]","[{\"text\":\"\\n    license published by Creative Commons Corporation, a \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    corporation with a principal place of business in San \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    California, \"}]","[{\"text\":\"as well as future copyleft versions of that \\n\\n\\n\\n\\n\\n\\n\\n    published by that same \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    “Incorporate” means to publish or republish a Document, in whole \\n\\n\\n    in part, as part of another \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    An MMC is “eligible for relicensing” if it is licensed under \\n\\n\\n\\n\\n    License, and if all works that were first published under \\n\\n\\n\\n\"}]","[{\"text\":\"\\n    License somewhere other than this MMC, and subsequently \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    in whole or in part into the MMC, (1) had no cover texts \\n\\n\\n    invariant sections, and (2) were thus incorporated prior to \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n    1, \\n\\n\\n\\n\\n\\n\\n    The operator of an MMC Site may republish an MMC contained in \\n\\n\\n\\n    site under CC-BY-SA on the same \"}]","[{\"text\":\"site at any time before August \\n\\n\\n    2009, provided the MMC is eligible for \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nADDENDUM: How to use this License for your \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nTo use this License in a document \"}]","[{\"text\":\"you have written, include a copy \\n\\n\\nthe License in the document and put the following copyright and \\n\\n\\n\\n\\n\\n\\n\\nnotices just \"}]","[{\"text\":\"after the title \\n\\n\\n\\n\\n\\n\\n      Copyright (C)  year  your \\n\\n\\n\\n\\n\\n      Permission is granted to copy, \"}]","[{\"text\":\"distribute and/or modify this \\n\\n\\n\\n\\n\\n\\n\\n\\n      under the terms of the GNU Free Documentation License, Version \\n\\n\\n\"}]","[{\"text\":\"\\n      or any later version published by the Free Software \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n      with no Invariant Sections, no Front-Cover Texts, and no \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      Texts.  A \"}]","[{\"text\":\"copy of the license is included in the section entitled \\n\\n\\n\\n\\n\\n      Free Documentation \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nIf you have Invariant Sections, Front-Cover Texts and Back-Cover \\n\\n\\n\\n\\n\\n\\nreplace the “with…Texts.” line with \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        with the Invariant Sections being list their titles, \\n\\n\\n\\n\\n        the Front-Cover Texts being list, and with the Back-Cover \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n        being \\n\\n\\n\\n\\n\\n\\nIf you have Invariant Sections without Cover Texts, or some \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ncombination of the three, merge those two alternatives to suit \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nIf your document contains nontrivial examples of program code, \\n\\n\\nrecommend releasing these examples in parallel under your choice of \\n\\n\\n\\n\\nsoftware license, such as the GNU \"}]","[{\"text\":\"General Public License, to \\n\\n\\n\\n\\n\\n\\ntheir use in free \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nPrevious: GNU Free Documentation License, Up: Top   \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n  ------------ \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n  Jump to:     A   B   C   D   E   F   G   H   I   K   L   M   N   O   P   Q   R   S   T   U   V   W  \\n  ------------ \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nIndex \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\naccessing array \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nAccessing Array \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\naccessing structure \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nAccessing Structure \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\naccessing union \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nAccessing Union \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\narithmetic \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nArithmetic \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\narray elements, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nAccessing Array \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\narray \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nArray \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\narrays as \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nArrays as \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\narrays of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nArrays of \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\narrays of \\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nArrays of \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\narrays, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nDeclaring \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\narrays, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nInitializing \\n\\n\\n\\n\\n\\n\\n\\narrays, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nMultidimensional \\n\\n\\n\\n\\n\\n\\n\\nassignment \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nAssignment \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nauto storage class \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nStorage Class \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nbit \\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nBit \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nbit \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nBit \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nbitwise logical \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nBitwise Logical \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nbreak \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nThe break \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ncalling \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nCalling \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nType \\n\\n\\n\\n\\n\\n\\nchar data \\n\\n\\n\\n\\n\\n\\n \\n\\nInteger \\n\\n\\n\\n\"}]","[{\"text\":\"\\ncharacter \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nCharacter \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ncomma \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nThe Comma \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\ncomparison \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nComparison \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ncomplex \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nComplex \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ncomplex number \\n\\n\\n\\n\\n\\n\\n\\n \\n\\nComplex Number \\n\\n\\n\\n\\n\\n\\ncompound \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nconditional \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nConditional \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nComplex \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nconst type \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nType \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nconstants, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nCharacter \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nconstants, floating \\n\\n\\n\\n\\n\\n\\n\\n \\n\\nReal Number \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nconstants, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nInteger \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nconstants, real \\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nReal Number \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ncontinue \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nThe continue \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ndata \\n\\n\\n\\n\\n\\n\\n\\n \\n\\nData \\n\\n\\n\\n\\n\\n\\ndata types, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\ndata types, complex \\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nComplex Number \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ndata types, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\ndata types, floating \\n\\n\\n\\n\\n\\n\\n\\n \\n\\nReal Number \\n\\n\\n\\n\\n\\n\\ndata types, \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nInteger \\n\\n\\n\\n\\n\\n\\ndata types, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\ndata types, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nPrimitive \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ndata types, real \\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nReal Number \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ndata types, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\ndata types, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\ndeclarations inside \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nStatements \"}]","[{\"text\":\"and Declarations in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndeclarations, \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nFunction \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndeclaring \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nDeclaring \\n\\n\\n\\n\\n\\n\\n\\ndeclaring \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nDeclaring \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndeclaring \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nDeclaring \\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndeclaring string \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nArrays as \\n\\n\\n\\n\\n\\n\\n\\n\\ndeclaring structure \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nDeclaring Structure \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndeclaring structure variables after \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nDeclaring Structure Variables After \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndeclaring structure variables at \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nDeclaring Structure Variables at \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndeclaring union \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nDeclaring Union \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndeclaring union variables after \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nDeclaring Union Variables After \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndeclaring union variables at \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nDeclaring Union Variables at \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndecrement \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nIncrementing and \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndefining \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nDefining \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndefining \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nDefining \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndefining \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nDefining \\n\\n\\n\\n\\n\\n\\n\\ndefinitions, \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nFunction \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndivision, \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nSigned Integer \\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndo \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nThe do \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndouble data \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nReal Number \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nelse \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nThe if \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nenumerations, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nDeclaring \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nenumerations, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nDefining \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nenumerations, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nIncomplete \\n\\n\\n\\n\"}]","[{\"text\":\"\\nexit \\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nThe main \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nThe main \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nThe main \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nexpression \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nExpression \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nexpressions containing \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nStatements and \"}]","[{\"text\":\"Declarations in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nexpressions, \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nConditional \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nextern storage class \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nStorage Class \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nfields, \\n\\n\\n\\n\\n\\n \\n\\nBit \\n\\n\\n\\n\\n\\n\\n\\nfloat data \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nReal Number \\n\\n\\n\\n\\n\\n\\nfloating point \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nReal Number \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfloating point \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nReal Number \\n\\n\\n\\n\\n\\n\\nfor \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nThe for \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction calls, as \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nFunction Calls as \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nFunction \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nFunction \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction parameter lists, variable \\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nVariable Length Parameter \\n\\n\\n\\n\\n\\n\\nfunction \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nFunction \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction pointers, calling \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nCalling Functions Through Function \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction, \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nThe main \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nfunctions, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nCalling \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nfunctions, \\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nNested \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nfunctions, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nRecursive \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nfunctions, \\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nStatic \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ngoto \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nThe goto \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nhello \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nA Sample \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nif \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nThe if \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nincomplete \\n\\n\\n\\n\\n\\n\\n\\n \\n\\nIncomplete \\n\\n\\n\\n\\n\\n\\nincrement \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nIncrementing and \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nindirect member \"}]","[{\"text\":\"access \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nMember Access \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ninitializing \\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nInitializing \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\ninitializing \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nInitializing \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\ninitializing string \\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nArrays as \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ninitializing structure \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nInitializing Structure \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ninitializing union \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nInitializing Union \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nint data \\n\\n\\n\\n\\n\\n\\n \\n\\nInteger \\n\\n\\n\\n\\n\\n\\ninteger \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nInteger \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ninteger \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nInteger Overflow \\n\\n\\n\\n\\n\\n\\n\\ninteger \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nSigned Overflow \\n\\n\\n\\n\\n\\n\\n\\n\\n\\ninteger \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nSigned Overflow \\n\\n\\n\\n\\n\\n\\n\\ninteger \\n\\n\\n\\n\\n\\n\\n\\n \\n\\nInteger \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nlabeled \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nlexical \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nLexical \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nlogical \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nLogical \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nlogical operators, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nBitwise Logical \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nlong double data \\n\\n\\n\\n\\n\\n\\n \\n\\nReal Number \\n\\n\\n\\n\\n\\n\\nlong int data \\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nInteger \\n\\n\\n\\n\\n\\n\\nlong long int data \\n\\n\\n\\n\\n\\n\\n \\n\\nInteger \\n\\n\\n\"}]","[{\"text\":\"\\nloop \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nOptimization and \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nmacros, statements in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nStatements \"}]","[{\"text\":\"and Declarations in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nmain \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nThe main \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nmember access \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nMember Access \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nmultidimensional \\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nMultidimensional \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nnested \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nNested \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nnull \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nThe Null \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\noperator \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nOperator \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\noperator, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nIncrementing and \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\noperator, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nIncrementing and \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\noperators as lexical \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\noperators, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nArithmetic \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\noperators, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nAssignment \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\noperators, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nComparison \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\noverflow, signed \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nInteger Overflow \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\noverflow, signed \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nSigned Overflow \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\noverflow, signed \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nSigned Overflow \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nparameters lists, variable \\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nVariable Length Parameter \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nparameters, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nFunction \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\npointer \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nPointer \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\npointers to \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nPointers to \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\npointers to \\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nPointers to \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\npointers, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nDeclaring \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\npointers, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nInitializing \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nprecedence, \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nOperator \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nprimitive data \\n\\n\\n\\n\\n\\n\\n\\n \\n\\nPrimitive \\n\\n\\n\\n\\n\\n\\nprogram \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nProgram \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nqualifiers, \\n\\n\\n\\n\\n\\n\\n \\n\\nType \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nreal number \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nReal Number \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nreal number \\n\\n\\n\\n\\n\\n\\n\\n \\n\\nReal Number \\n\\n\\n\\n\\n\\n\\nrecursive \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nRecursive \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nregister storage class \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nStorage Class \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nrenaming \\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nRenaming \\n\\n\\n\\n\\n\\n\\nreturn \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nThe return \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nreturn value of \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nThe main \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nsample \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nA Sample \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nsequence \\n\\n\\n\\n\\n\\n\\n\\n \\n\\nSequence \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nBit \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nshort int data \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nInteger \\n\\n\\n\\n\\n\\n\\nside \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nSide \\n\\n\\n\\n\\n\\n\\n\\n\\nside effects, macro \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nStatements and Declarations in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nsigned char data \\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nInteger \\n\\n\\n\\n\\n\\n\\nsigned integer \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nInteger Overflow \\n\\n\\n\\n\\n\\n\\n\\nsigned integer \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nSigned Overflow \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nsigned integer \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nSigned Overflow \\n\\n\\n\\n\\n\\n\\n\\nsize of \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nSize of \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nsize of \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nSize of \\n\\n\\n\\n\\n\\n\\n\\nsizeof \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nThe sizeof \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nspecifiers, storage \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nStorage Class \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nstatement, \\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nThe Null \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nstatements inside \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nStatements \"}]","[{\"text\":\"and Declarations in \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nstatements, \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nExpression \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nstatements, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nstatic \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nStatic \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nstatic \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nStatic \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nstatic storage class \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nStorage Class \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nstorage class \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nStorage Class \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nstring arrays, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nArrays as \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nstring arrays, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nArrays as \\n\\n\\n\\n\\n\\n\\n\\n\\nstring \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nString \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nstring \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nString \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nstrings, arrays \\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nArrays as \\n\\n\\n\\n\\n\\n\\n\\n\\nstructure members, \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nAccessing Structure \\n\\n\\n\\n\\n\\n\\n\\n\\nstructure members, \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nInitializing Structure \\n\\n\\n\\n\\n\\n\\n\\n\\nstructure variables, \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nDeclaring Structure \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nstructure variables, declaring after \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nDeclaring Structure Variables After \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nstructure variables, declaring at \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nDeclaring Structure Variables at \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nstructure, \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nProgram \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nstructures, arrays \\n\\n\\n\\n\\n \\n\\nArrays of \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nstructures, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nDefining \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nstructures, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nIncomplete \\n\\n\\n\\n\"}]","[{\"text\":\"\\nstructures, pointers \\n\\n\\n\\n\\n \\n\\nPointers to \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nstructures, size \\n\\n\\n\\n\\n \\n\\nSize of \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nswitch \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nThe switch \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nternary \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nConditional \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ntype \\n\\n\\n\\n\\n\\n\\n\\n \\n\\nType \\n\\n\\n\\n\\n\\n\\ntype \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nType \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ntypedef \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nThe typedef \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nData \\n\\n\\n\\n\\n\\n\\ntypes, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\ntypes, complex \\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nComplex Number \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ntypes, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\ntypes, floating \\n\\n\\n\\n\\n\\n\\n\\n \\n\\nReal Number \\n\\n\\n\\n\\n\\n\\ntypes, \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nIncomplete \\n\\n\\n\\n\\n\\n\\ntypes, \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nInteger \\n\\n\\n\\n\\n\\n\\ntypes, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\ntypes, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nPrimitive \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ntypes, real \\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nReal Number \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ntypes, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nRenaming \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\ntypes, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\ntypes, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nunion members, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nAccessing Union \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nunion members, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nInitializing Union \\n\\n\\n\\n\\n\\n\\n\\n\\nunion variables, \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nDeclaring Union \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nunion variables, declaring after \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nDeclaring Union Variables After \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nunion variables, declaring at \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nDeclaring Union Variables at \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nunions, arrays \\n\\n\\n\\n\\n \\n\\nArrays of \\n\\n\\n\\n\\n\\n\\n\\nunions, \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nDefining \\n\\n\\n\\n\\n\\n\\n\\nunions, \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nIncomplete \\n\\n\\n\\n\\n\\n\\nunions, pointers \\n\\n\\n\\n\\n \\n\\nPointers to \\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\nunions, size \\n\\n\\n\\n\\n \\n\\nSize of \\n\\n\\n\\n\\n\\n\\n\\nunsigned char data \\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nInteger \\n\\n\\n\\n\\n\\n\\nunsigned int data \\n\\n\\n\\n\\n\\n\\n \\n\\nInteger \\n\\n\\n\"}]","[{\"text\":\"\\nunsigned long int data \\n\\n\\n\\n\\n\\n\\n \\n\\nInteger \\n\\n\\n\\n\\n\\n\\nunsigned long \"}]","[{\"text\":\"long int data \\n\\n\\n\\n\\n\\n\\n \\n\\nInteger \\n\\n\\n\\n\\n\\n\\nunsigned short int data \\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nInteger \\n\\n\\n\\n\\n\\n\\nunspecified \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n \\n\\nSequence Points Constrain \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nvariable length parameter \\n\\n\\n\\n\\n\\n\\n\\n \\n\\nVariable Length Parameter \\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nvolatile type \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nType \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nwhile \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\n\\nThe while \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nwhite \\n\\n\\n\\n\\n\\n\\n\\n \\n\\nWhite \\n\\n\\n\\n\\n\\n\\nwraparound \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nInteger Overflow \\n\\n\\n\\n\\n\\n\\n\\nwraparound \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nSigned Overflow \\n\\n\\n\\n\\n\\n\\n\\n\\n\\nwraparound \\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n \\n\\nSigned Overflow \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n\\n  ------------ \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\n  Jump to:     A   B   C   D   E   F   G   H   I   K   L   M   N   O   P   Q   R   S   T   U   V   W  \\n  ------------ \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nC++ also has complex number support, but it is incompatible with the \\n\\n\\n\\nC99 \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\na full declarator is a declaration of a function or an object which \\n\\n\\nnot part of another \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nHowever if for example MAX is INT_MAX and x is of type int, we \\n\\n\\n\\n\\n\\n\\n\\nhave a problem with overflow. See \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\nRarely, argv[0] can be a null pointer (in this case argc is 0) \\n\\n\\nargv[0][0] can be the null character. In any case, argv[argc] is a \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]"]} 1
