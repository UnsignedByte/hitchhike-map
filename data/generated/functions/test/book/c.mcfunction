give @s minecraft:written_book{title: "The GNU C Reference Manual", author: "GNU", resolved: 1b, pages: ["[{\"text\":\"The GNU C Reference Manual\\n\\n\\n\\nTHE GNU C REFERENCE MANUAL\\n\\n\\nTable of Contents\\n\\n-   Preface\\n    -   Credits\\n-   1 Lexical Elements\\n    -   1.1 Identifiers\\n    -   1.2 Keywords\\n    -   1.3 Constants\\n        -   1.3.1 Integer Constants\\n        -   1.3.2 Character Consta\"}]","[{\"text\":\"nts\\n        -   1.3.3 Real Number Constants\\n        -   1.3.4 String Constants\\n    -   1.4 Operators\\n    -   1.5 Separators\\n    -   1.6 White Space\\n-   2 Data Types\\n    -   2.1 Primitive Data Types\\n        -   2.1.1 Integer Types\\n        -   2.1.2 Real Number Types\"}]","[{\"text\":\"\\n        -   2.1.3 Complex Number Types\\n            -   2.1.3.1 Standard Complex Number Types\\n            -   2.1.3.2 GNU Extensions for Complex Number Types\\n    -   2.2 Enumerations\\n        -   2.2.1 Defining Enumerations\\n        -   2.2.2 Declaring Enumerations\"}]","[{\"text\":\"\\n    -   2.3 Unions\\n        -   2.3.1 Defining Unions\\n        -   2.3.2 Declaring Union Variables\\n            -   2.3.2.1 Declaring Union Variables at Definition\\n            -   2.3.2.2 Declaring Union Variables After Definition\\n            -   2.3.2.3 Initializing \"}]","[{\"text\":\"Union Members\\n        -   2.3.3 Accessing Union Members\\n        -   2.3.4 Size of Unions\\n    -   2.4 Structures\\n        -   2.4.1 Defining Structures\\n        -   2.4.2 Declaring Structure Variables\\n            -   2.4.2.1 Declaring Structure Variables at Definition\"}]","[{\"text\":\"\\n            -   2.4.2.2 Declaring Structure Variables After Definition\\n            -   2.4.2.3 Initializing Structure Members\\n        -   2.4.3 Accessing Structure Members\\n        -   2.4.4 Bit Fields\\n        -   2.4.5 Size of Structures\\n    -   2.5 Arrays\"}]","[{\"text\":\"\\n        -   2.5.1 Declaring Arrays\\n        -   2.5.2 Initializing Arrays\\n        -   2.5.3 Accessing Array Elements\\n        -   2.5.4 Multidimensional Arrays\\n        -   2.5.5 Arrays as Strings\\n        -   2.5.6 Arrays of Unions\\n        -   2.5.7 Arrays of Structur\"}]","[{\"text\":\"es\\n    -   2.6 Pointers\\n        -   2.6.1 Declaring Pointers\\n        -   2.6.2 Initializing Pointers\\n        -   2.6.3 Pointers to Unions\\n        -   2.6.4 Pointers to Structures\\n    -   2.7 Incomplete Types\\n    -   2.8 Type Qualifiers\\n    -   2.9 Storage Class Spec\"}]","[{\"text\":\"ifiers\\n    -   2.10 Renaming Types\\n-   3 Expressions and Operators\\n    -   3.1 Expressions\\n    -   3.2 Assignment Operators\\n    -   3.3 Incrementing and Decrementing\\n    -   3.4 Arithmetic Operators\\n    -   3.5 Complex Conjugation\\n    -   3.6 Comparison Operators\"}]","[{\"text\":\"\\n    -   3.7 Logical Operators\\n    -   3.8 Bit Shifting\\n    -   3.9 Bitwise Logical Operators\\n    -   3.10 Pointer Operators\\n    -   3.11 The sizeof Operator\\n    -   3.12 Type Casts\\n    -   3.13 Array Subscripts\\n    -   3.14 Function Calls as Expressions\\n    -   3.1\"}]","[{\"text\":\"5 The Comma Operator\\n    -   3.16 Member Access Expressions\\n    -   3.17 Conditional Expressions\\n    -   3.18 Statements and Declarations in Expressions\\n    -   3.19 Operator Precedence\\n    -   3.20 Order of Evaluation\\n        -   3.20.1 Side Effects\\n        -   3.2\"}]","[{\"text\":\"0.2 Sequence Points\\n        -   3.20.3 Sequence Points Constrain Expressions\\n        -   3.20.4 Sequence Points and Signal Delivery\\n-   4 Statements\\n    -   4.1 Labels\\n    -   4.2 Expression Statements\\n    -   4.3 The if Statement\\n    -   4.4 The switch Statement\"}]","[{\"text\":\"\\n    -   4.5 The while Statement\\n    -   4.6 The do Statement\\n    -   4.7 The for Statement\\n    -   4.8 Blocks\\n    -   4.9 The Null Statement\\n    -   4.10 The goto Statement\\n    -   4.11 The break Statement\\n    -   4.12 The continue Statement\\n    -   4.13 The retur\"}]","[{\"text\":\"n Statement\\n    -   4.14 The typedef Statement\\n-   5 Functions\\n    -   5.1 Function Declarations\\n    -   5.2 Function Definitions\\n    -   5.3 Calling Functions\\n    -   5.4 Function Parameters\\n    -   5.5 Variable Length Parameter Lists\\n    -   5.6 Calling Functions \"}]","[{\"text\":\"Through Function Pointers\\n    -   5.7 The main Function\\n    -   5.8 Recursive Functions\\n    -   5.9 Static Functions\\n    -   5.10 Nested Functions\\n-   6 Program Structure and Scope\\n    -   6.1 Program Structure\\n    -   6.2 Scope\\n-   7 A Sample Program\\n    -   7.1 he\"}]","[{\"text\":\"llo.c\\n    -   7.2 system.h\\n-   Appendix A Overflow\\n    -   A.1 Basics of Integer Overflow\\n    -   A.2 Examples of Code Assuming Wraparound Overflow\\n    -   A.3 Optimizations That Break Wraparound Arithmetic\\n    -   A.4 Practical Advice for Signed Overflow Issues\"}]","[{\"text\":\"\\n    -   A.5 Signed Integer Division and Integer Overflow\\n-   GNU Free Documentation License\\n-   Index\\n\\nNext: Preface, Up: (dir)   [Contents][Index]\\n\\n\\n\\nTHE GNU C REFERENCE MANUAL\\n\\n\\nThis is the GNU C reference manual.\\n\\n  ----------------------------------- ---- --\"}]","[{\"text\":\"\\n  • Preface:                               \\n  • Lexical Elements:                      \\n  • Data Types:                            \\n  • Expressions and Operators:             \\n  • Statements:                            \\n  • Functions:                             \"}]","[{\"text\":\"\\n  • Program Structure and Scope:           \\n  • A Sample Program:                      \\n  • Overflow:                              \\n  • GNU Free Documentation License:        \\n  • Index:                                 \\n  ----------------------------------- ---- --\"}]","[{\"text\":\"\\n\\n------------------------------------------------------------------------\\n\\nNext: Lexical Elements, Previous: Top, Up: Top   [Contents][Index]\\n\\n\\nPreface\\n\\nThis is a reference manual for the C programming language as implemented\\nby the GNU Compiler Collection (GCC). S\"}]","[{\"text\":\"pecifically, this manual aims to\\ndocument:\\n\\n-   The 1989 ANSI C standard, commonly known as “C89”\\n-   The 1999 ISO C standard, commonly known as “C99”, to the extent that\\n    C99 is implemented by GCC\\n-   The current state of GNU extensions to standard C\\n\\nThis manua\"}]","[{\"text\":\"l describes C89 as its baseline. C99 features and GNU\\nextensions are explicitly labeled as such.\\n\\nBy default, GCC will compile code as C89 plus GNU-specific extensions.\\nMuch of C99 is supported; once full support is available, the default\\ncompilation dialect will b\"}]","[{\"text\":\"e C99 plus GNU-specific extensions. (Some of\\nthe GNU extensions to C89 ended up, sometimes slightly modified, as\\nstandard language features in C99.)\\n\\nThe C language includes a set of preprocessor directives, which are used\\nfor things such as macro text replacement, \"}]","[{\"text\":\"conditional compilation, and\\nfile inclusion. Although normally described in a C language manual, the\\nGNU C preprocessor has been thoroughly documented in The C Preprocessor,\\na separate manual which covers preprocessing for C, C++, and Objective-C\\nprograms, so it is \"}]","[{\"text\":\"not included here.\\n\\nCredits\\n\\nThanks to everyone who has helped with editing, proofreading, ideas,\\ntypesetting, and administrivia, including: Diego Andres Alvarez Marin,\\nNelson H. F. Beebe, Karl Berry, Robert Chassell, Hanfeng Chen, Mark de\\nVolld, Antonio Diaz Diaz, \"}]","[{\"text\":\"dine, Andreas Foerster, Denver Gingerich, Lisa\\nGoldstein, Robert Hansen, Jean-Christophe Helary, Mogens Hetsholm, Teddy\\nHogeborn, Joe Humphries, J. Wren Hunt, Dutch Ingraham, Adam Johansen,\\nVladimir Kadlec, Benjamin Kagia, Dright Kayorent, Sugun Kedambadi, Felix\\nLee\"}]","[{\"text\":\", Bjorn Liencres, Steve Morningthunder, Aljosha Papsch, Matthew\\nPlant, Jonathan Sisti, Richard Stallman, J. Otto Tennant, Ole Tetlie,\\nKeith Thompson, T.F. Torrey, James Youngman, and Steve Zachar. Trevis\\nRothwell serves as project maintainer and, along with James Yo\"}]","[{\"text\":\"ungman,\\nwrote the bulk of the text.\\n\\nSome example programs are based on algorithms in Donald Knuth’s The Art\\nof Computer Programming.\\n\\nPlease send bug reports and suggestions to gnu-c-manual@gnu.org.\\n\\n-----------------------------------------------------------------\"}]","[{\"text\":\"-------\\n\\nNext: Data Types, Previous: Preface, Up: Top   [Contents][Index]\\n\\n\\n1 Lexical Elements\\n\\nThis chapter describes the lexical elements that make up C source code\\nafter preprocessing. These elements are called _tokens_. There are five\\ntypes of tokens: keywords, \"}]","[{\"text\":\"identifiers, constants, operators, and\\nseparators. White space, sometimes required to separate tokens, is also\\ndescribed in this chapter.\\n\\n  ---------------- ---- --\\n  • Identifiers:        \\n  • Keywords:           \\n  • Constants:          \\n  • Operators:          \"}]","[{\"text\":\"\\n  • Separators:         \\n  • White Space:        \\n  ---------------- ---- --\\n\\n------------------------------------------------------------------------\\n\\nNext: Keywords, Up: Lexical Elements   [Contents][Index]\\n\\n1.1 Identifiers\\n\\nIdentifiers are sequences of character\"}]","[{\"text\":\"s used for naming variables,\\nfunctions, new data types, and preprocessor macros. You can include\\nletters, decimal digits, and the underscore character ‘_’ in\\nidentifiers.\\n\\nThe first character of an identifier cannot be a digit.\\n\\nLowercase letters and uppercase lette\"}]","[{\"text\":\"rs are distinct, such that foo and\\nFOO are two different identifiers.\\n\\nWhen using GNU extensions, you can also include the dollar sign\\ncharacter ‘$’ in identifiers.\\n\\n------------------------------------------------------------------------\\n\\nNext: Constants, Previous\"}]","[{\"text\":\": Identifiers, Up: Lexical Elements  \\n[Contents][Index]\\n\\n1.2 Keywords\\n\\nKeywords are special identifiers reserved for use as part of the\\nprogramming language itself. You cannot use them for any other purpose.\\n\\nHere is a list of keywords recognized by ANSI C89:\\n\\n    a\"}]","[{\"text\":\"uto break case char const continue default do double else enum extern\\n    float for goto if int long register return short signed sizeof static\\n    struct switch typedef union unsigned void volatile while\\n\\nISO C99 adds the following keywords:\\n\\n    inline _Bool _Comp\"}]","[{\"text\":\"lex _Imaginary\\n\\nand GNU extensions add these keywords:\\n\\n    __FUNCTION__ __PRETTY_FUNCTION__ __alignof __alignof__ __asm\\n    __asm__ __attribute __attribute__ __builtin_offsetof __builtin_va_arg\\n    __complex __complex__ __const __extension__ __func__ __imag __imag_\"}]","[{\"text\":\"_ \\n    __inline __inline__ __label__ __null __real __real__ \\n    __restrict __restrict__ __signed __signed__ __thread __typeof\\n    __volatile __volatile__ \\n\\nIn both ISO C99 and C89 with GNU extensions, the following is also\\nrecognized as a keyword:\\n\\n    restrict\\n\\n--\"}]","[{\"text\":\"----------------------------------------------------------------------\\n\\nNext: Operators, Previous: Keywords, Up: Lexical Elements  \\n[Contents][Index]\\n\\n1.3 Constants\\n\\nA constant is a literal numeric or character value, such as 5 or 'm'.\\nAll constants are of a particu\"}]","[{\"text\":\"lar data type; you can use type casting to\\nexplicitly specify the type of a constant, or let the compiler use the\\ndefault type based on the value of the constant.\\n\\n  -------------------------- ---- --\\n  • Integer Constants:            \\n  • Character Constants\"}]","[{\"text\":\":          \\n  • Real Number Constants:        \\n  • String Constants:             \\n  -------------------------- ---- --\\n\\n------------------------------------------------------------------------\\n\\nNext: Character Constants, Up: Constants   [Contents][Index]\\n\\n1.3.1 Inte\"}]","[{\"text\":\"ger Constants\\n\\nAn integer constant is a sequence of digits, with an optional prefix to\\ndenote a number base.\\n\\nIf the sequence of digits is preceded by 0x or 0X (zero x or zero X),\\nthen the constant is considered to be hexadecimal (base 16). Hexadecimal\\nvalues may us\"}]","[{\"text\":\"e the digits from 0 to 9, as well as the letters a to f and\\nA to F. Here are some examples:\\n\\n    0x2f\\n    0x88\\n    0xAB43\\n    0xAbCd\\n    0x1\\n\\nIf the first digit is 0 (zero), and the next character is not ‘x’ or\\n‘X’, then the constant is considered to be octal (base \"}]","[{\"text\":\"8). Octal values\\nmay only use the digits from 0 to 7; 8 and 9 are not allowed. Here are\\nsome examples:\\n\\n    057\\n    012\\n    03\\n    0241\\n\\nIn all other cases, the sequence of digits is assumed to be decimal\\n(base 10). Decimal values may use the digits from 0 to 9. Her\"}]","[{\"text\":\"e are some\\nexamples:\\n\\n    459\\n    23901\\n    8\\n    12\\n\\nThere are various integer data types, for short integers, long integers,\\nsigned integers, and unsigned integers. You can force an integer\\nconstant to be of a long and/or unsigned integer type by appending a\\nseque\"}]","[{\"text\":\"nce of one or more letters to the end of the constant:\\n\\nu\\nU\\n\\n    Unsigned integer type.\\n\\nl\\nL\\n\\n    Long integer type.\\n\\nFor example, 45U is an unsigned int constant. You can also combine\\nletters: 45UL is an unsigned long int constant. (The letters may be used\\nin any o\"}]","[{\"text\":\"rder.)\\n\\nBoth ISO C99 and GNU C extensions add the integer types long long int\\nand unsigned long long int. You can use two ‘L’s to get a long long int\\nconstant; add a ‘U’ to that and you have an unsigned long long int\\nconstant. For example: 45ULL.\\n\\n------------------\"}]","[{\"text\":\"------------------------------------------------------\\n\\nNext: Real Number Constants, Previous: Integer Constants, Up: Constants\\n  [Contents][Index]\\n\\n1.3.2 Character Constants\\n\\nA character constant is usually a single character enclosed within\\nsingle quotation marks\"}]","[{\"text\":\", such as 'Q'. A character constant is of type int\\nby default.\\n\\nSome characters, such as the single quotation mark character itself,\\ncannot be represented using only one character. To represent such\\ncharacters, there are several “escape sequences” that you can use:\"}]","[{\"text\":\"\\n\\n\\\\\\\\\\n\\n    Backslash character.\\n\\n\\\\?\\n\\n    Question mark character.\\n\\n\\\\'\\n\\n    Single quotation mark.\\n\\n\\\\\\\"\\n\\n    Double quotation mark.\\n\\n\\\\a\\n\\n    Audible alert.\\n\\n\\\\b\\n\\n    Backspace character.\\n\\n\\\\e\\n\\n    <ESC> character. (This is a GNU extension.)\\n\\n\\\\f\\n\\n    Form feed.\\n\\n\\\\n\\n\\n    N\"}]","[{\"text\":\"ewline character.\\n\\n\\\\r\\n\\n    Carriage return.\\n\\n\\\\t\\n\\n    Horizontal tab.\\n\\n\\\\v\\n\\n    Vertical tab.\\n\\n\\\\o, \\\\oo, \\\\ooo\\n\\n    Octal number.\\n\\n\\\\xh, \\\\xhh, \\\\xhhh, …\\n\\n    Hexadecimal number.\\n\\nTo use any of these escape sequences, enclose the sequence in single\\nquotes, and treat it as \"}]","[{\"text\":\"if it were any other character. For example, the\\nletter m is 'm' and the newline character is '\\\\n'.\\n\\nThe octal number escape sequence is the backslash character followed by\\none, two, or three octal digits (0 to 7). For example, 101 is the octal\\nequivalent of 65, whi\"}]","[{\"text\":\"ch is the ASCII character 'A'. Thus, the character\\nconstant '\\\\101' is the same as the character constant 'A'.\\n\\nThe hexadecimal escape sequence is the backslash character, followed by\\nx and an unlimited number of hexadecimal digits (0 to 9, and a to f or A\\nto F).\\n\\nWh\"}]","[{\"text\":\"ile the length of possible hexadecimal digit strings is unlimited, the\\nnumber of character constants in any given character set is not. (The\\nmuch-used extended ASCII character set, for example, has only 256\\ncharacters in it.) If you try to use a hexadecimal value th\"}]","[{\"text\":\"at is outside\\nthe range of characters, you will get a compile-time error.\\n\\n------------------------------------------------------------------------\\n\\nNext: String Constants, Previous: Character Constants, Up: Constants  \\n[Contents][Index]\\n\\n1.3.3 Real Number Constants\"}]","[{\"text\":\"\\n\\nA real number constant is a value that represents a fractional (floating\\npoint) number. It consists of a sequence of digits which represents the\\ninteger (or “whole”) part of the number, a decimal point, and a sequence\\nof digits which represents the fractional part\"}]","[{\"text\":\".\\n\\nEither the integer part or the fractional part may be omitted, but not\\nboth. Here are some examples:\\n\\n    double a, b, c, d, e, f;\\n\\n    a = 4.7;\\n\\n    b = 4.;\\n\\n    c = 4;\\n\\n    d = .7;\\n\\n    e = 0.7;\\n\\n(In the third assignment statement, the integer constant 4 is\\naut\"}]","[{\"text\":\"omatically converted from an integer value to a double value.)\\n\\nReal number constants can also be followed by e or E, and an integer\\nexponent. The exponent can be either positive or negative.\\n\\n    double x, y;\\n\\n    x = 5e2;   /* x is 5 * 100, or 500.0. */\\n    y = 5e\"}]","[{\"text\":\"-2;  /* y is 5 * (1/100), or 0.05. */\\n\\nYou can append a letter to the end of a real number constant to cause it\\nto be of a particular type. If you append the letter F (or f) to a real\\nnumber constant, then its type is float. If you append the letter L (or\\nl), then i\"}]","[{\"text\":\"ts type is long double. If you do not append any letters, then\\nits type is double.\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Real Number Constants, Up: Constants   [Contents][Index]\\n\\n1.3.4 String Constants\\n\\nA string constan\"}]","[{\"text\":\"t is a sequence of zero or more characters, digits, and\\nescape sequences enclosed within double quotation marks. A string\\nconstant is of type “array of characters”. All string constants contain\\na null termination character (\\\\0) as their last character. Strings are\\ns\"}]","[{\"text\":\"tored as arrays of characters, with no inherent size attribute. The\\nnull termination character lets string-processing functions know where\\nthe string ends.\\n\\nAdjacent string constants are concatenated (combined) into one string,\\nwith the null termination character ad\"}]","[{\"text\":\"ded to the end of the final\\nconcatenated string.\\n\\nA string cannot contain double quotation marks, as double quotation\\nmarks are used to enclose the string. To include the double quotation\\nmark character in a string, use the \\\\\\\" escape sequence. You can use any\\nof th\"}]","[{\"text\":\"e escape sequences that can be used as character constants in\\nstrings. Here are some example of string constants:\\n\\n    /* This is a single string constant. */\\n    \\\"tutti frutti ice cream\\\"\\n\\n    /* These string constants will be concatenated, same as above. */\\n    \\\"tu\"}]","[{\"text\":\"tti \\\" \\\"frutti\\\" \\\" ice \\\" \\\"cream\\\"\\n\\n    /* This one uses two escape sequences. */\\n    \\\"\\\\\\\"hello, world!\\\\\\\"\\\"\\n\\nIf a string is too long to fit on one line, you can use a backslash \\\\ to\\nbreak it up onto separate lines.\\n\\n    \\\"Today's special is a pastrami sandwich on rye brea\"}]","[{\"text\":\"d with \\\\\\n    a potato knish and a cherry soda.\\\"\\n\\nAdjacent strings are automatically concatenated, so you can also have\\nstring constants span multiple lines by writing them as separate,\\nadjacent, strings. For example:\\n\\n    \\\"Tomorrow's special is a corned beef sandwic\"}]","[{\"text\":\"h on \\\"\\n    \\\"pumpernickel bread with a kasha knish and seltzer water.\\\"\\n\\nis the same as\\n\\n    \\\"Tomorrow's special is a corned beef sandwich on \\\\\\n    pumpernickel bread with a kasha knish and seltzer water.\\\"\\n\\nTo insert a newline character into the string, so that when t\"}]","[{\"text\":\"he string\\nis printed it will be printed on two different lines, you can use the\\nnewline escape sequence ‘\\\\n’.\\n\\n    printf (\\\"potato\\\\nknish\\\");\\n\\nprints\\n\\n    potato\\n    knish\\n\\n------------------------------------------------------------------------\\n\\nNext: Separators, Pr\"}]","[{\"text\":\"evious: Constants, Up: Lexical Elements  \\n[Contents][Index]\\n\\n1.4 Operators\\n\\nAn operator is a special token that performs an operation, such as\\naddition or subtraction, on either one, two, or three operands. Full\\ncoverage of operators can be found in a later chapter\"}]","[{\"text\":\". See Expressions\\nand Operators.\\n\\n------------------------------------------------------------------------\\n\\nNext: White Space, Previous: Operators, Up: Lexical Elements  \\n[Contents][Index]\\n\\n1.5 Separators\\n\\nA separator separates tokens. White space (see next section\"}]","[{\"text\":\") is a\\nseparator, but it is not a token. The other separators are all\\nsingle-character tokens themselves:\\n\\n    ( ) [ ] { } ; , . :\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Separators, Up: Lexical Elements   [Contents][Inde\"}]","[{\"text\":\"x]\\n\\n1.6 White Space\\n\\nWhite space is the collective term used for several characters: the\\nspace character, the tab character, the newline character, the vertical\\ntab character, and the form-feed character. White space is ignored\\n(outside of string and character const\"}]","[{\"text\":\"ants), and is therefore optional,\\nexcept when it is used to separate tokens. This means that\\n\\n    #include <stdio.h>\\n\\n    int\\n    main()\\n    {\\n      printf( \\\"hello, world\\\\n\\\" );\\n      return 0;\\n    }\\n\\nand\\n\\n    #include <stdio.h> int main(){printf(\\\"hello, world\\\\n\\\");\"}]","[{\"text\":\"\\n    return 0;}\\n\\nare functionally the same program.\\n\\nAlthough you must use white space to separate many tokens, no white\\nspace is required between operators and operands, nor is it required\\nbetween other separators and that which they separate.\\n\\n    /* All of these \"}]","[{\"text\":\"are valid. */\\n\\n    x++;\\n    x ++ ;\\n    x=y+z;\\n    x = y + z ;\\n    x=array[2];\\n    x = array [ 2 ] ;\\n    fraction=numerator / *denominator_ptr;\\n    fraction = numerator / * denominator_ptr ;\\n\\nFurthermore, wherever one space is allowed, any amount of white space is\\nal\"}]","[{\"text\":\"lowed.\\n\\n    /* These two statements are functionally identical. */\\n    x++;\\n\\n    x\\n           ++       ;\\n\\nIn string constants, spaces and tabs are not ignored; rather, they are\\npart of the string. Therefore,\\n\\n    \\\"potato knish\\\"\\n\\nis not the same as\\n\\n    \\\"potat\"}]","[{\"text\":\"o                        knish\\\"\\n\\n------------------------------------------------------------------------\\n\\nNext: Expressions and Operators, Previous: Lexical Elements, Up: Top  \\n[Contents][Index]\\n\\n\\n2 Data Types\\n\\n  ----------------------------- ---- --\\n  • Primitive \"}]","[{\"text\":\"Types:                 \\n  • Enumerations:                    \\n  • Unions:                          \\n  • Structures:                      \\n  • Arrays:                          \\n  • Pointers:                        \\n  • Incomplete Types:                \\n  • Type Quali\"}]","[{\"text\":\"fiers:                 \\n  • Storage Class Specifiers:        \\n  • Renaming Types:                  \\n  ----------------------------- ---- --\\n\\n------------------------------------------------------------------------\\n\\nNext: Enumerations, Up: Data Types   [Contents][Ind\"}]","[{\"text\":\"ex]\\n\\n2.1 Primitive Data Types\\n\\n  ------------------------- ---- --\\n  • Integer Types:               \\n  • Real Number Types:           \\n  • Complex Number Types:        \\n  ------------------------- ---- --\\n\\n------------------------------------------------------------\"}]","[{\"text\":\"------------\\n\\nNext: Real Number Types, Up: Primitive Types   [Contents][Index]\\n\\n2.1.1 Integer Types\\n\\nThe integer data types range in size from at least 8 bits to at least 32\\nbits. The C99 standard extends this range to include integer sizes of at\\nleast 64 bits. You \"}]","[{\"text\":\"should use integer types for storing whole number\\nvalues (and the char data type for storing characters). The sizes and\\nranges listed for these types are minimums; depending on your computer\\nplatform, these sizes and ranges may be larger.\\n\\nWhile these ranges provid\"}]","[{\"text\":\"e a natural ordering, the standard does not\\nrequire that any two types have a different range. For example, it is\\ncommon for int and long to have the same range. The standard even allows\\nsigned char and long to have the same range, though such platforms are\\nvery unu\"}]","[{\"text\":\"sual.\\n\\n-   signed char\\n    The 8-bit signed char data type can hold integer values in the range\\n    of -128 to 127.\\n-   unsigned char\\n    The 8-bit unsigned char data type can hold integer values in the\\n    range of 0 to 255.\\n-   char\\n    Depending on your system, t\"}]","[{\"text\":\"he char data type is defined as having\\n    the same range as either the signed char or the unsigned char data\\n    type (they are three distinct types, however). By convention, you\\n    should use the char data type specifically for storing ASCII\\n    characters (such \"}]","[{\"text\":\"as `m'), including escape sequences (such as `\\\\n').\\n-   short int\\n    The 16-bit short int data type can hold integer values in the range\\n    of -32,768 to 32,767. You may also refer to this data type as short,\\n    signed short int, or signed short.\\n-   unsigned sho\"}]","[{\"text\":\"rt int\\n    The 16-bit unsigned short int data type can hold integer values in\\n    the range of 0 to 65,535. You may also refer to this data type as\\n    unsigned short.\\n-   int\\n    The 32-bit int data type can hold integer values in the range of\\n    -2,147,483,648 t\"}]","[{\"text\":\"o 2,147,483,647. You may also refer to this data\\n    type as signed int or signed.\\n-   unsigned int\\n    The 32-bit unsigned int data type can hold integer values in the\\n    range of 0 to 4,294,967,295. You may also refer to this data type\\n    simply as unsigned.\"}]","[{\"text\":\"\\n-   long int\\n    The 32-bit long int data type can hold integer values in the range\\n    of at least -2,147,483,648 to 2,147,483,647. (Depending on your\\n    system, this data type might be 64-bit, in which case its range is\\n    identical to that of the long long in\"}]","[{\"text\":\"t data type.) You may also\\n    refer to this data type as long, signed long int, or signed long.\\n-   unsigned long int\\n    The 32-bit unsigned long int data type can hold integer values in\\n    the range of at least 0 to 4,294,967,295. (Depending on your system,\"}]","[{\"text\":\"\\n    this data type might be 64-bit, in which case its range is identical\\n    to that of the unsigned long long int data type.) You may also refer\\n    to this data type as unsigned long.\\n-   long long int\\n    The 64-bit long long int data type can hold integer value\"}]","[{\"text\":\"s in the\\n    range of -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.\\n    You may also refer to this data type as long long,\\n    signed long long int or signed long long. This type is not part of\\n    C89, but is both part of C99 and a GNU C extension.\\n-   u\"}]","[{\"text\":\"nsigned long long int\\n    The 64-bit unsigned long long int data type can hold integer values\\n    in the range of at least 0 to 18,446,744,073,709,551,615. You may\\n    also refer to this data type as unsigned long long. This type is not\\n    part of C89, but is both \"}]","[{\"text\":\"part of C99 and a GNU C extension.\\n\\nHere are some examples of declaring and defining integer variables:\\n\\n    int foo;\\n    unsigned int bar = 42;\\n    char quux = 'a';\\n\\nThe first line declares an integer named foo but does not define its\\nvalue; it is left uninitialize\"}]","[{\"text\":\"d, and its value should not be assumed to\\nbe anything in particular.\\n\\n------------------------------------------------------------------------\\n\\nNext: Complex Number Types, Previous: Integer Types, Up: Primitive Types\\n  [Contents][Index]\\n\\n2.1.2 Real Number Types\\n\\nThe\"}]","[{\"text\":\"re are three data types that represent fractional numbers. While the\\nsizes and ranges of these types are consistent across most computer\\nsystems in use today, historically the sizes of these types varied from\\nsystem to system. As such, the minimum and maximum value\"}]","[{\"text\":\"s are stored in\\nmacro definitions in the library header file float.h. In this section,\\nwe include the names of the macro definitions in place of their possible\\nvalues; check your system’s float.h for specific numbers.\\n\\n-   float\\n    The float data type is the smalle\"}]","[{\"text\":\"st of the three floating point\\n    types, if they differ in size at all. Its minimum value is stored in\\n    the FLT_MIN, and should be no greater than 1e-37. Its maximum value\\n    is stored in FLT_MAX, and should be no less than 1e37.\\n-   double\\n    The double data \"}]","[{\"text\":\"type is at least as large as the float type, and it\\n    may be larger. Its minimum value is stored in DBL_MIN, and its\\n    maximum value is stored in DBL_MAX.\\n-   long double\\n    The long double data type is at least as large as the float type,\\n    and it may be lar\"}]","[{\"text\":\"ger. Its minimum value is stored in LDBL_MIN, and\\n    its maximum value is stored in LDBL_MAX.\\n\\nAll floating point data types are signed; trying to use unsigned float,\\nfor example, will cause a compile-time error.\\n\\nHere are some examples of declaring and defining re\"}]","[{\"text\":\"al number variables:\\n\\n    float foo;\\n    double bar = 114.3943;\\n\\nThe first line declares a float named foo but does not define its value;\\nit is left uninitialized, and its value should not be assumed to be\\nanything in particular.\\n\\nThe real number types provided in \"}]","[{\"text\":\"C are of finite precision, and\\naccordingly, not all real numbers can be represented exactly. Most\\ncomputer systems that GCC compiles for use a binary representation for\\nreal numbers, which is unable to precisely represent numbers such as,\\nfor example, 4.2. For this \"}]","[{\"text\":\"reason, we recommend that you consider not\\ncomparing real numbers for exact equality with the == operator, but\\nrather check that real numbers are within an acceptable tolerance.\\n\\nThere are other more subtle implications of these imprecise\\nrepresentations; for more d\"}]","[{\"text\":\"etails, see David Goldberg’s paper What Every\\nComputer Scientist Should Know About Floating-Point Arithmetic and\\nsection 4.2.2 of Donald Knuth’s The Art of Computer Programming.\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Rea\"}]","[{\"text\":\"l Number Types, Up: Primitive Types   [Contents][Index]\\n\\n2.1.3 Complex Number Types\\n\\nGCC introduced some complex number types as an extension to C89. Similar\\nfeatures were introduced in C99¹, but there were a number of\\ndifferences. We describe the standard complex n\"}]","[{\"text\":\"umber types first.\\n\\n  -------------------------------------------- ---- --\\n  • Standard Complex Number Types:                  \\n  • GNU Extensions for Complex Number Types:        \\n  -------------------------------------------- ---- --\\n\\n-----------------------------\"}]","[{\"text\":\"-------------------------------------------\\n\\nNext: GNU Extensions for Complex Number Types, Up: Complex Number Types\\n  [Contents][Index]\\n\\n2.1.3.1 Standard Complex Number Types\\n\\nComplex types were introduced in C99. There are three complex types:\\n\\n-   float _Complex\"}]","[{\"text\":\"\\n-   double _Complex\\n-   long double _Complex\\n\\nThe names here begin with an underscore and an uppercase letter in order\\nto avoid conflicts with existing programs’ identifiers. However, the C99\\nstandard header file <complex.h> introduces some macros which make using\"}]","[{\"text\":\"\\ncomplex types easier.\\n\\n-   complex\\n    Expands to _Complex. This allows a variable to be declared as\\n    double complex which seems more natural.\\n-   I\\n    A constant of type const float _Complex having the value of the\\n    imaginary unit normally referred to as _i\"}]","[{\"text\":\"_.\\n\\nThe <complex.h> header file also declares a number of functions for\\nperforming computations on complex numbers, for example the creal and\\ncimag functions which respectively return the real and imaginary parts\\nof a double complex number. Other functions are also \"}]","[{\"text\":\"provided, as shown\\nin this example:\\n\\n    #include <complex.h>    \\n    #include <stdio.h>  \\n\\n    void example (void) \\n    {    \\n      complex double z = 1.0 + 3.0*I; \\n      printf (\\\"Phase is %f, modulus is %f\\\\n\\\", carg (z), cabs (z));        \\n    }  \\n\\n----------------\"}]","[{\"text\":\"--------------------------------------------------------\\n\\nPrevious: Standard Complex Number Types, Up: Complex Number Types  \\n[Contents][Index]\\n\\n2.1.3.2 GNU Extensions for Complex Number Types\\n\\nGCC also introduced complex types as a GNU extension to C89, but the\\nspe\"}]","[{\"text\":\"lling is different. The floating-point complex types in GCC’s C89\\nextension are:\\n\\n-   __complex__ float\\n-   __complex__ double\\n-   __complex__ long double\\n\\nGCC’s extension allow for complex types other than floating-point, so\\nthat you can declare complex character t\"}]","[{\"text\":\"ypes and complex integer types;\\nin fact __complex__ can be used with any of the primitive data types. We\\nwon’t give you a complete list of all possibilities, but here are some\\nexamples:\\n\\n-   __complex__ float\\n    The __complex__ float data type has two components: \"}]","[{\"text\":\"a real part and\\n    an imaginary part, both of which are of the float data type.\\n-   __complex__ int\\n    The __complex__ int data type also has two components: a real part\\n    and an imaginary part, both of which are of the int data type.\\n\\nTo extract the real part o\"}]","[{\"text\":\"f a complex-valued expression, use the keyword\\n__real__, followed by the expression. Likewise, use __imag__ to extract\\nthe imaginary part.\\n\\n    __complex__ float a = 4 + 3i;\\n\\n    float b = __real__ a;          /* b is now 4. */\\n    float c = __imag__ a;          /* \"}]","[{\"text\":\"c is now 3. */\\n\\nThis example creates a complex floating point variable a, and defines\\nits real part as 4 and its imaginary part as 3. Then, the real part is\\nassigned to the floating point variable b, and the imaginary part is\\nassigned to the floating point variable \"}]","[{\"text\":\"c.\\n\\n------------------------------------------------------------------------\\n\\nNext: Unions, Previous: Primitive Types, Up: Data Types  \\n[Contents][Index]\\n\\n2.2 Enumerations\\n\\nAn enumeration is a custom data type used for storing constant integer\\nvalues and referring t\"}]","[{\"text\":\"o them by names. By default, these values are of\\ntype signed int; however, you can use the -fshort-enums GCC compiler\\noption to cause the smallest possible integer type to be used instead.\\nBoth of these behaviors conform to the C89 standard, but mixing the use\\nof th\"}]","[{\"text\":\"ese options within the same program can produce incompatibilities.\\n\\n  --------------------------- ---- --\\n  • Defining Enumerations:         \\n  • Declaring Enumerations:        \\n  --------------------------- ---- --\\n\\n-------------------------------------------------\"}]","[{\"text\":\"-----------------------\\n\\nNext: Declaring Enumerations, Up: Enumerations   [Contents][Index]\\n\\n2.2.1 Defining Enumerations\\n\\nYou define an enumeration using the enum keyword, followed by the name\\nof the enumeration (this is optional), followed by a list of constant\\nnam\"}]","[{\"text\":\"es (separated by commas and enclosed in braces), and ending with a\\nsemicolon.\\n\\n    enum fruit {grape, cherry, lemon, kiwi};\\n\\nThat example defines an enumeration, fruit, which contains four constant\\ninteger values, grape, cherry, lemon, and kiwi, whose values are, by\"}]","[{\"text\":\"\\ndefault, 0, 1, 2, and 3, respectively. You can also specify one or more\\nof the values explicitly:\\n\\n    enum more_fruit {banana = -17, apple, blueberry, mango};\\n\\nThat example defines banana to be -17, and the remaining values are\\nincremented by 1: apple is -16, blue\"}]","[{\"text\":\"berry is -15, and mango is -14.\\nUnless specified otherwise, an enumeration value is equal to one more\\nthan the previous value (and the first value defaults to 0).\\n\\nYou can also refer to an enumeration value defined earlier in the same\\nenumeration:\\n\\n    enum yet_more\"}]","[{\"text\":\"_fruit {kumquat, raspberry, peach,\\n                         plum = peach + 2};\\n\\nIn that example, kumquat is 0, raspberry is 1, peach is 2, and plum is\\n4.\\n\\nYou can’t use the same name for an enum as a struct or union in the same\\nscope.\\n\\n------------------------------\"}]","[{\"text\":\"------------------------------------------\\n\\nPrevious: Defining Enumerations, Up: Enumerations   [Contents][Index]\\n\\n2.2.2 Declaring Enumerations\\n\\nYou can declare variables of an enumeration type both when the\\nenumeration is defined and afterward. This example declare\"}]","[{\"text\":\"s one\\nvariable, named my_fruit of type enum fruit, all in a single statement:\\n\\n    enum fruit {banana, apple, blueberry, mango} my_fruit;\\n\\nwhile this example declares the type and variable separately:\\n\\n    enum fruit {banana, apple, blueberry, mango};\\n    enum frui\"}]","[{\"text\":\"t my_fruit;\\n\\n(Of course, you couldn’t declare it that way if you hadn’t named the\\nenumeration.)\\n\\nAlthough such variables are considered to be of an enumeration type, you\\ncan assign them any value that you could assign to an int variable,\\nincluding values from other \"}]","[{\"text\":\"enumerations. Furthermore, any variable that\\ncan be assigned an int value can be assigned a value from an\\nenumeration.\\n\\nHowever, you cannot change the values in an enumeration once it has been\\ndefined; they are constant values. For example, this won’t work:\\n\\n    enu\"}]","[{\"text\":\"m fruit {banana, apple, blueberry, mango};\\n    banana = 15;  /* You can’t do this! */\\n\\nEnumerations are useful in conjunction with the switch statement,\\nbecause the compiler can warn you if you have failed to handle one of\\nthe enumeration values. Using the example a\"}]","[{\"text\":\"bove, if your code handles\\nbanana, apple and mango only but not blueberry, GCC can generate a\\nwarning.\\n\\n------------------------------------------------------------------------\\n\\nNext: Structures, Previous: Enumerations, Up: Data Types  \\n[Contents][Index]\\n\\n2.3 Unions\"}]","[{\"text\":\"\\n\\nA union is a custom data type used for storing several variables in the\\nsame memory space. Although you can access any of those variables at any\\ntime, you should only read from one of them at a time—assigning a value\\nto one of them overwrites the values in the oth\"}]","[{\"text\":\"ers.\\n\\n  ------------------------------ ---- --\\n  • Defining Unions:                  \\n  • Declaring Union Variables:        \\n  • Accessing Union Members:          \\n  • Size of Unions:                   \\n  ------------------------------ ---- --\\n\\n---------------------\"}]","[{\"text\":\"---------------------------------------------------\\n\\nNext: Declaring Union Variables, Up: Unions   [Contents][Index]\\n\\n2.3.1 Defining Unions\\n\\nYou define a union using the union keyword followed by the declarations\\nof the union’s members, enclosed in braces. You decla\"}]","[{\"text\":\"re each member of a\\nunion just as you would normally declare a variable—using the data type\\nfollowed by one or more variable names separated by commas, and ending\\nwith a semicolon. Then end the union definition with a semicolon after\\nthe closing brace.\\n\\nYou should a\"}]","[{\"text\":\"lso include a name for the union between the union keyword\\nand the opening brace. This is syntactically optional, but if you leave\\nit out, you can’t refer to that union data type later on (without a\\ntypedef, see The typedef Statement).\\n\\nHere is an example of definin\"}]","[{\"text\":\"g a simple union for holding an integer\\nvalue and a floating point value:\\n\\n    union numbers\\n      {\\n        int i;\\n        float f;\\n      };\\n\\nThat defines a union named numbers, which contains two members, i and f,\\nwhich are of type int and float, respectively.\\n\\n--\"}]","[{\"text\":\"----------------------------------------------------------------------\\n\\nNext: Accessing Union Members, Previous: Defining Unions, Up: Unions  \\n[Contents][Index]\\n\\n2.3.2 Declaring Union Variables\\n\\nYou can declare variables of a union type when both you initially defin\"}]","[{\"text\":\"e\\nthe union and after the definition, provided you gave the union type a\\nname.\\n\\n  ----------------------------------------------- ---- --\\n  • Declaring Union Variables at Definition:           \\n  • Declaring Union Variables After Definition:        \\n  • Initializin\"}]","[{\"text\":\"g Union Members:                        \\n  ----------------------------------------------- ---- --\\n\\n------------------------------------------------------------------------\\n\\nNext: Declaring Union Variables After Definition, Up: Declaring Union\\nVariables   [Contents]\"}]","[{\"text\":\"[Index]\\n\\n2.3.2.1 Declaring Union Variables at Definition\\n\\nYou can declare variables of a union type when you define the union type\\nby putting the variable names after the closing brace of the union\\ndefinition, but before the final semicolon. You can declare more tha\"}]","[{\"text\":\"n\\none such variable by separating the names with commas.\\n\\n    union numbers\\n      {\\n        int i;\\n        float f;\\n      } first_number, second_number;\\n\\nThat example declares two variables of type union numbers, first_number\\nand second_number.\\n\\n--------------------\"}]","[{\"text\":\"----------------------------------------------------\\n\\nNext: Initializing Union Members, Previous: Declaring Union Variables at\\nDefinition, Up: Declaring Union Variables   [Contents][Index]\\n\\n2.3.2.2 Declaring Union Variables After Definition\\n\\nYou can declare variable\"}]","[{\"text\":\"s of a union type after you define the union by\\nusing the union keyword and the name you gave the union type, followed\\nby one or more variable names separated by commas.\\n\\n    union numbers\\n      {\\n        int i;\\n        float f;\\n      };\\n    union numbers first_numb\"}]","[{\"text\":\"er, second_number;\\n\\nThat example declares two variables of type union numbers, first_number\\nand second_number.\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Declaring Union Variables After Definition, Up: Declaring\\nUnion Variab\"}]","[{\"text\":\"les   [Contents][Index]\\n\\n2.3.2.3 Initializing Union Members\\n\\nYou can initialize the first member of a union variable when you declare\\nit:\\n\\n    union numbers\\n      {\\n        int i;\\n        float f;\\n      };\\n    union numbers first_number = { 5 };\\n\\nIn that example, th\"}]","[{\"text\":\"e i member of first_number gets the value 5. The f\\nmember is left alone.\\n\\nAnother way to initialize a union member is to specify the name of the\\nmember to initialize. This way, you can initialize whichever member you\\nwant to, not just the first one. There are two me\"}]","[{\"text\":\"thods that you can\\nuse—either follow the member name with a colon, and then its value, like\\nthis:\\n\\n    union numbers first_number = { f: 3.14159 };\\n\\nor precede the member name with a period and assign a value with the\\nassignment operator, like this:\\n\\n    union numbe\"}]","[{\"text\":\"rs first_number = { .f = 3.14159 };\\n\\nYou can also initialize a union member when you declare the union\\nvariable during the definition:\\n\\n    union numbers\\n      {\\n        int i;\\n        float f;\\n      } first_number = { 5 };\\n\\n-----------------------------------------\"}]","[{\"text\":\"-------------------------------\\n\\nNext: Size of Unions, Previous: Declaring Union Variables, Up: Unions  \\n[Contents][Index]\\n\\n2.3.3 Accessing Union Members\\n\\nYou can access the members of a union variable using the member access\\noperator. You put the name of the union \"}]","[{\"text\":\"variable on the left side of the\\noperator, and the name of the member on the right side.\\n\\n    union numbers\\n      {\\n        int i;\\n        float f;\\n      };\\n    union numbers first_number;\\n    first_number.i = 5;\\n    first_number.f = 3.9;\\n\\nNotice in that example tha\"}]","[{\"text\":\"t giving a value to the f member overrides the\\nvalue stored in the i member.\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Accessing Union Members, Up: Unions   [Contents][Index]\\n\\n2.3.4 Size of Unions\\n\\nThis size of a union is e\"}]","[{\"text\":\"qual to the size of its largest member.\\nConsider the first union example from this section:\\n\\n    union numbers\\n      {\\n        int i;\\n        float f;\\n      };\\n\\nThe size of the union data type is the same as sizeof (float), because\\nthe float type is larger than the \"}]","[{\"text\":\"int type. Since all of the members of\\na union occupy the same memory space, the union data type size doesn’t\\nneed to be large enough to hold the sum of all their sizes; it just\\nneeds to be large enough to hold the largest member.\\n\\n-----------------------------------\"}]","[{\"text\":\"-------------------------------------\\n\\nNext: Arrays, Previous: Unions, Up: Data Types   [Contents][Index]\\n\\n2.4 Structures\\n\\nA structure is a programmer-defined data type made up of variables of\\nother data types (possibly including other structure types).\\n\\n  ---------\"}]","[{\"text\":\"------------------------- ---- --\\n  • Defining Structures:                  \\n  • Declaring Structure Variables:        \\n  • Accessing Structure Members:          \\n  • Bit Fields:                           \\n  • Size of Structures:                   \\n  ---------------\"}]","[{\"text\":\"------------------- ---- --\\n\\n------------------------------------------------------------------------\\n\\nNext: Declaring Structure Variables, Up: Structures   [Contents][Index]\\n\\n2.4.1 Defining Structures\\n\\nYou define a structure using the struct keyword followed by the\"}]","[{\"text\":\"\\ndeclarations of the structure’s members, enclosed in braces. You declare\\neach member of a structure just as you would normally declare a\\nvariable—using the data type followed by one or more variable names\\nseparated by commas, and ending with a semicolon. Then end t\"}]","[{\"text\":\"he structure\\ndefinition with a semicolon after the closing brace.\\n\\nYou should also include a name for the structure in between the struct\\nkeyword and the opening brace. This is optional, but if you leave it\\nout, you can’t refer to that structure data type later on (\"}]","[{\"text\":\"without a\\ntypedef, see The typedef Statement).\\n\\nHere is an example of defining a simple structure for holding the X and\\nY coordinates of a point:\\n\\n    struct point\\n      {\\n        int x, y;\\n      };\\n\\nThat defines a structure type named struct point, which contains t\"}]","[{\"text\":\"wo\\nmembers, x and y, both of which are of type int.\\n\\nStructures (and unions) may contain instances of other structures and\\nunions, but of course not themselves. It is possible for a structure or\\nunion type to contain a field which is a pointer to the same type (see\"}]","[{\"text\":\"\\nIncomplete Types).\\n\\n------------------------------------------------------------------------\\n\\nNext: Accessing Structure Members, Previous: Defining Structures, Up:\\nStructures   [Contents][Index]\\n\\n2.4.2 Declaring Structure Variables\\n\\nYou can declare variables of a s\"}]","[{\"text\":\"tructure type when both you initially\\ndefine the structure and after the definition, provided you gave the\\nstructure type a name.\\n\\n  --------------------------------------------------- ---- --\\n  • Declaring Structure Variables at Definition:           \\n  • Declarin\"}]","[{\"text\":\"g Structure Variables After Definition:        \\n  • Initializing Structure Members:                        \\n  --------------------------------------------------- ---- --\\n\\n------------------------------------------------------------------------\\n\\nNext: Declaring Struc\"}]","[{\"text\":\"ture Variables After Definition, Up: Declaring\\nStructure Variables   [Contents][Index]\\n\\n2.4.2.1 Declaring Structure Variables at Definition\\n\\nYou can declare variables of a structure type when you define the\\nstructure type by putting the variable names after the clos\"}]","[{\"text\":\"ing brace of\\nthe structure definition, but before the final semicolon. You can\\ndeclare more than one such variable by separating the names with commas.\\n\\n    struct point\\n      {\\n        int x, y;\\n      } first_point, second_point;\\n\\nThat example declares two variable\"}]","[{\"text\":\"s of type struct point, first_point\\nand second_point.\\n\\n------------------------------------------------------------------------\\n\\nNext: Initializing Structure Members, Previous: Declaring Structure\\nVariables at Definition, Up: Declaring Structure Variables  \\n[Content\"}]","[{\"text\":\"s][Index]\\n\\n2.4.2.2 Declaring Structure Variables After Definition\\n\\nYou can declare variables of a structure type after defining the\\nstructure by using the struct keyword and the name you gave the\\nstructure type, followed by one or more variable names separated by\\nco\"}]","[{\"text\":\"mmas.\\n\\n    struct point\\n      {\\n        int x, y;\\n      };\\n    struct point first_point, second_point;\\n\\nThat example declares two variables of type struct point, first_point\\nand second_point.\\n\\n------------------------------------------------------------------------\"}]","[{\"text\":\"\\n\\nPrevious: Declaring Structure Variables After Definition, Up: Declaring\\nStructure Variables   [Contents][Index]\\n\\n2.4.2.3 Initializing Structure Members\\n\\nYou can initialize the members of a structure type to have certain\\nvalues when you declare structure variables.\"}]","[{\"text\":\"\\n\\nIf you do not initialize a structure variable, the effect depends on\\nwhether it has static storage (see Storage Class Specifiers) or not. If\\nit is, members with integral types are initialized with 0 and pointer\\nmembers are initialized to NULL; otherwise, the valu\"}]","[{\"text\":\"e of the structure’s\\nmembers is indeterminate.\\n\\nOne way to initialize a structure is to specify the values in a set of\\nbraces and separated by commas. Those values are assigned to the\\nstructure members in the same order that the members are declared in the\\nstructur\"}]","[{\"text\":\"e in definition.\\n\\n    struct point\\n      {\\n        int x, y;\\n      };\\n    struct point first_point = { 5, 10 };\\n\\nIn that example, the x member of first_point gets the value 5, and the y\\nmember gets the value 10.\\n\\nAnother way to initialize the members is to specify t\"}]","[{\"text\":\"he name of the\\nmember to initialize. This way, you can initialize the members in any\\norder you like, and even leave some of them uninitialized. There are two\\nmethods that you can use. The first method is available in C99 and as a\\nC89 extension in GCC:\\n\\n    struct po\"}]","[{\"text\":\"int first_point = { .y = 10, .x = 5 };\\n\\nYou can also omit the period and use a colon instead of ‘=’, though this\\nis a GNU C extension:\\n\\n    struct point first_point = { y: 10, x: 5 };\\n\\nYou can also initialize the structure variable’s members when you\\ndeclare the var\"}]","[{\"text\":\"iable during the structure definition:\\n\\n    struct point\\n      {\\n        int x, y;\\n      } first_point = { 5, 10 };\\n\\nYou can also initialize fewer than all of a structure variable’s\\nmembers:\\n\\n    struct pointy\\n      {\\n        int x, y;\\n        char *p;\\n      };\"}]","[{\"text\":\"\\n    struct pointy first_pointy = { 5 };\\n\\nHere, x is initialized with 5, y is initialized with 0, and p is\\ninitialized with NULL. The rule here is that y and p are initialized\\njust as they would be if they were static variables.\\n\\nHere is another example that initial\"}]","[{\"text\":\"izes a structure’s members which are\\nstructure variables themselves:\\n\\n    struct point\\n      {\\n        int x, y;\\n      };\\n\\n    struct rectangle\\n      {\\n        struct point top_left, bottom_right;\\n      };\\n\\n    struct rectangle my_rectangle = { {0, 5}, {10, 0} };\\n\\nT\"}]","[{\"text\":\"hat example defines the rectangle structure to consist of two point\\nstructure variables. Then it declares one variable of type\\nstruct rectangle and initializes its members. Since its members are\\nstructure variables, we used an extra set of braces surrounding the\\nmem\"}]","[{\"text\":\"bers that belong to the point structure variables. However, those\\nextra braces are not necessary; they just make the code easier to read.\\n\\n------------------------------------------------------------------------\\n\\nNext: Bit Fields, Previous: Declaring Structure Varia\"}]","[{\"text\":\"bles, Up:\\nStructures   [Contents][Index]\\n\\n2.4.3 Accessing Structure Members\\n\\nYou can access the members of a structure variable using the member\\naccess operator. You put the name of the structure variable on the left\\nside of the operator, and the name of the member \"}]","[{\"text\":\"on the right side.\\n\\n    struct point\\n      {\\n        int x, y;\\n      };\\n\\n    struct point first_point;\\n\\n    first_point.x = 0;\\n    first_point.y = 5;\\n\\nYou can also access the members of a structure variable which is itself\\na member of a structure variable.\\n\\n    stru\"}]","[{\"text\":\"ct rectangle\\n      {\\n        struct point top_left, bottom_right;\\n      };\\n\\n    struct rectangle my_rectangle;\\n\\n    my_rectangle.top_left.x = 0;\\n    my_rectangle.top_left.y = 5;\\n\\n    my_rectangle.bottom_right.x = 10;\\n    my_rectangle.bottom_right.y = 0;\\n\\n-----------\"}]","[{\"text\":\"-------------------------------------------------------------\\n\\nNext: Size of Structures, Previous: Accessing Structure Members, Up:\\nStructures   [Contents][Index]\\n\\n2.4.4 Bit Fields\\n\\nYou can create structures with integer members of nonstandard sizes,\\ncalled _bit fie\"}]","[{\"text\":\"lds_. You do this by specifying an integer (int, char,\\nlong int, etc.) member as usual, and inserting a colon and the number of\\nbits that the member should occupy in between the member’s name and the\\nsemicolon.\\n\\n    struct card\\n      {\\n        unsigned int suit : 2;\"}]","[{\"text\":\"\\n        unsigned int face_value : 4;\\n      };\\n\\nThat example defines a structure type with two bit fields, suit and\\nface_value, which take up 2 bits and 4 bits, respectively. suit can hold\\nvalues from 0 to 3, and face_value can hold values from 0 to 15. Notice\\nthat \"}]","[{\"text\":\"these bit fields were declared as unsigned int; had they been\\nsigned integers, then their ranges would have been from -2 to 1, and\\nfrom -8 to 7, respectively.\\n\\nMore generally, the range of an unsigned bit field of _N_ bits is from 0\\nto _2^N - 1_, and the range of a \"}]","[{\"text\":\"signed bit field of _N_ bits is from\\n_-(2^N) / 2_ to _((2^N) / 2) - 1_.\\n\\nBit fields can be specified without a name in order to control which\\nactual bits within the containing unit are used. However, the effect of\\nthis is not very portable and it is rarely useful. Y\"}]","[{\"text\":\"ou can also specify\\na bit field of size 0, which indicates that subsequent bit fields not\\nfurther bit fields should be packed into the unit containing the\\nprevious bit field. This is likewise not generally useful.\\n\\nYou may not take the address of a bit field with th\"}]","[{\"text\":\"e address operator &\\n(see Pointer Operators).\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Bit Fields, Up: Structures   [Contents][Index]\\n\\n2.4.5 Size of Structures\\n\\nThe size of a structure type is equal to the sum of the size \"}]","[{\"text\":\"of all of\\nits members, possibly including padding to cause the structure type to\\nalign to a particular byte boundary. The details vary depending on your\\ncomputer platform, but it would not be atypical to see structures padded\\nto align on four- or eight-byte boundari\"}]","[{\"text\":\"es. This is done in order to\\nspeed up memory accesses of instances of the structure type.\\n\\nAs a GNU extension, GCC allows structures with no members. Such\\nstructures have zero size.\\n\\nIf you wish to explicitly omit padding from your structure types (which\\nmay, in tur\"}]","[{\"text\":\"n, decrease the speed of structure memory accesses), then GCC\\nprovides multiple methods of turning packing off. The quick and easy\\nmethod is to use the -fpack-struct compiler option. For more details on\\nomitting packing, please see the GCC manual which corresponds t\"}]","[{\"text\":\"o your\\nversion of the compiler.\\n\\n------------------------------------------------------------------------\\n\\nNext: Pointers, Previous: Structures, Up: Data Types   [Contents][Index]\\n\\n2.5 Arrays\\n\\nAn array is a data structure that lets you store one or more elements\\ncon\"}]","[{\"text\":\"secutively in memory. In C, array elements are indexed beginning at\\nposition zero, not one.\\n\\n  ----------------------------- ---- --\\n  • Declaring Arrays:                \\n  • Initializing Arrays:             \\n  • Accessing Array Elements:        \\n  • Multidimensiona\"}]","[{\"text\":\"l Arrays:         \\n  • Arrays as Strings:               \\n  • Arrays of Unions:                \\n  • Arrays of Structures:            \\n  ----------------------------- ---- --\\n\\n------------------------------------------------------------------------\\n\\nNext: Initializin\"}]","[{\"text\":\"g Arrays, Up: Arrays   [Contents][Index]\\n\\n2.5.1 Declaring Arrays\\n\\nYou declare an array by specifying the data type for its elements, its\\nname, and the number of elements it can store. Here is an example that\\ndeclares an array that can store ten integers:\\n\\n    int my\"}]","[{\"text\":\"_array[10];\\n\\nFor standard C code, the number of elements in an array must be\\npositive.\\n\\nAs a GNU extension, the number of elements can be as small as zero.\\nZero-length arrays are useful as the last element of a structure which\\nis really a header for a variable-lengt\"}]","[{\"text\":\"h object:\\n\\n    struct line\\n    {\\n      int length;\\n      char contents[0];\\n    };\\n\\n    {\\n      struct line *this_line = (struct line *)\\n        malloc (sizeof (struct line) + this_length);\\n      this_line -> length = this_length;\\n    }\\n\\nAnother GNU extension allows \"}]","[{\"text\":\"you to declare an array size using\\nvariables, rather than only constants. For example, here is a function\\ndefinition that declares an array using its parameter as the number of\\nelements:\\n\\n    int\\n    my_function (int number)\\n    {\\n      int my_array[number];\\n      …\"}]","[{\"text\":\";\\n    }\\n\\n------------------------------------------------------------------------\\n\\nNext: Accessing Array Elements, Previous: Declaring Arrays, Up: Arrays  \\n[Contents][Index]\\n\\n2.5.2 Initializing Arrays\\n\\nYou can initialize the elements in an array when you declare it \"}]","[{\"text\":\"by\\nlisting the initializing values, separated by commas, in a set of\\nbraces. Here is an example:\\n\\n    int my_array[5] = { 0, 1, 2, 3, 4 };\\n\\nYou don’t have to explicitly initialize all of the array elements. For\\nexample, this code initializes the first three element\"}]","[{\"text\":\"s as specified,\\nand then initializes the last two elements to a default value of zero:\\n\\n    int my_array[5] = { 0, 1, 2 };\\n\\nWhen using either ISO C99, or C89 with GNU extensions, you can\\ninitialize array elements out of order, by specifying which array\\nindices to in\"}]","[{\"text\":\"itialize. To do this, include the array index in brackets,\\nand optionally the assignment operator, before the value. Here is an\\nexample:\\n\\n    int my_array[5] = { [2] 5, [4] 9 };\\n\\nOr, using the assignment operator:\\n\\n    int my_array[5] = { [2] = 5, [4] = 9 };\\n\\nBoth o\"}]","[{\"text\":\"f those examples are equivalent to:\\n\\n    int my_array[5] = { 0, 0, 5, 0, 9 };\\n\\nWhen using GNU extensions, you can initialize a range of elements to the\\nsame value, by specifying the first and last indices, in the form\\n [first] ... [last] . Here is an example:\\n\\n    i\"}]","[{\"text\":\"nt new_array[100] = { [0 ... 9] = 1, [10 ... 98] = 2, 3 };\\n\\nThat initializes elements 0 through 9 to 1, elements 10 through 98 to 2,\\nand element 99 to 3. (You also could explicitly write [99] = 3.) Also,\\nnotice that you _must_ have spaces on both sides of the ‘...’.\"}]","[{\"text\":\"\\n\\nIf you initialize every element of an array, then you do not have to\\nspecify its size; its size is determined by the number of elements you\\ninitialize. Here is an example:\\n\\n    int my_array[] = { 0, 1, 2, 3, 4 };\\n\\nAlthough this does not explicitly state that the a\"}]","[{\"text\":\"rray has five elements\\nusing my_array[5], it initializes five elements, so that is how many it\\nhas.\\n\\nAlternately, if you specify which elements to initialize, then the size\\nof the array is equal to the highest element number initialized, plus\\none. For example:\"}]","[{\"text\":\"\\n\\n    int my_array[] = { 0, 1, 2, [99] = 99 };\\n\\nIn that example, only four elements are initialized, but the last one\\ninitialized is element number 99, so there are 100 elements.\\n\\n------------------------------------------------------------------------\\n\\nNext: Multid\"}]","[{\"text\":\"imensional Arrays, Previous: Initializing Arrays, Up: Arrays\\n  [Contents][Index]\\n\\n2.5.3 Accessing Array Elements\\n\\nYou can access the elements of an array by specifying the array name,\\nfollowed by the element index, enclosed in brackets. Remember that the\\narray eleme\"}]","[{\"text\":\"nts are numbered starting with zero. Here is an example:\\n\\n    my_array[0] = 5;\\n\\nThat assigns the value 5 to the first element in the array, at position\\nzero. You can treat individual array elements like variables of whatever\\ndata type the array is made up of. For ex\"}]","[{\"text\":\"ample, if you have an array\\nmade of a structure data type, you can access the structure elements\\nlike this:\\n\\n    struct point\\n    {\\n      int x, y;\\n    };\\n    struct point point_array[2] = { {4, 5}, {8, 9} };\\n    point_array[0].x = 3;\\n\\n------------------------------\"}]","[{\"text\":\"------------------------------------------\\n\\nNext: Arrays as Strings, Previous: Accessing Array Elements, Up: Arrays\\n  [Contents][Index]\\n\\n2.5.4 Multidimensional Arrays\\n\\nYou can make multidimensional arrays, or “arrays of arrays”. You do this\\nby adding an extra set o\"}]","[{\"text\":\"f brackets and array lengths for every\\nadditional dimension you want your array to have. For example, here is a\\ndeclaration for a two-dimensional array that holds five elements in each\\ndimension (a two-element array consisting of five-element arrays):\\n\\n    int two_d\"}]","[{\"text\":\"imensions[2][5] { {1, 2, 3, 4, 5}, {6, 7, 8, 9, 10} };\\n\\nMultidimensional array elements are accessed by specifying the desired\\nindex of both dimensions:\\n\\n    two_dimensions[1][3] = 12;\\n\\nIn our example, two_dimensions[0] is itself an array. The element\\ntwo_dimensions\"}]","[{\"text\":\"[0][2] is followed by two_dimensions[0][3], not by\\ntwo_dimensions[1][2].\\n\\n------------------------------------------------------------------------\\n\\nNext: Arrays of Unions, Previous: Multidimensional Arrays, Up: Arrays  \\n[Contents][Index]\\n\\n2.5.5 Arrays as Strings\\n\\nYo\"}]","[{\"text\":\"u can use an array of characters to hold a string (see String\\nConstants). The array may be built of either signed or unsigned\\ncharacters.\\n\\nWhen you declare the array, you can specify the number of elements it\\nwill have. That number will be the maximum number of char\"}]","[{\"text\":\"acters that\\nshould be in the string, including the null character used to end the\\nstring. If you choose this option, then you do not have to initialize\\nthe array when you declare it. Alternately, you can simply initialize\\nthe array to a value, and its size will the\"}]","[{\"text\":\"n be exactly large enough to\\nhold whatever string you used to initialize it.\\n\\nThere are two different ways to initialize the array. You can specify of\\ncomma-delimited list of characters enclosed in braces, or you can\\nspecify a string literal enclosed in double quota\"}]","[{\"text\":\"tion marks.\\n\\nHere are some examples:\\n\\n    char blue[26];\\n    char yellow[26] = {'y', 'e', 'l', 'l', 'o', 'w', '\\\\0'};\\n    char orange[26] = \\\"orange\\\";\\n    char gray[] = {'g', 'r', 'a', 'y', '\\\\0'};\\n    char salmon[] = \\\"salmon\\\";\\n\\nIn each of these cases, the null charact\"}]","[{\"text\":\"er \\\\0 is included at the end of\\nthe string, even when not explicitly stated. (Note that if you\\ninitialize a string using an array of individual characters, then the\\nnull character is _not_ guaranteed to be present. It might be, but such\\nan occurrence would be one o\"}]","[{\"text\":\"f chance, and should not be relied upon.)\\n\\nAfter initialization, you cannot assign a new string literal to an array\\nusing the assignment operator. For example, this _will not work_:\\n\\n    char lemon[26] = \\\"custard\\\";\\n    lemon = \\\"steak sauce\\\";      /* Fails! */\\n\\nHowev\"}]","[{\"text\":\"er, there are functions in the GNU C library that perform\\noperations (including copy) on string arrays. You can also change one\\ncharacter at a time, by accessing individual string elements as you\\nwould any other array:\\n\\n    char name[] = \\\"bob\\\";\\n    name[0] = 'r';\\n\\nI\"}]","[{\"text\":\"t is possible for you to explicitly state the number of elements in the\\narray, and then initialize it using a string that has more characters\\nthan there are elements in the array. This is not a good thing. The\\nlarger string will _not_ override the previously specifi\"}]","[{\"text\":\"ed size of the\\narray, and you will get a compile-time warning. Since the original array\\nsize remains, any part of the string that exceeds that original size is\\nbeing written to a memory location that was not allocated for it.\\n\\n---------------------------------------\"}]","[{\"text\":\"---------------------------------\\n\\nNext: Arrays of Structures, Previous: Arrays as Strings, Up: Arrays  \\n[Contents][Index]\\n\\n2.5.6 Arrays of Unions\\n\\nYou can create an array of a union type just as you can an array of a\\nprimitive data type.\\n\\n    union numbers\\n      {\"}]","[{\"text\":\"\\n        int i;\\n        float f;\\n      };\\n    union numbers number_array [3];\\n\\nThat example creates a 3-element array of union numbers variables called\\nnumber_array. You can also initialize the first members of the elements\\nof a number array:\\n\\n    union numbers numb\"}]","[{\"text\":\"er_array [3] = { {3}, {4}, {5} };\\n\\nThe additional inner grouping braces are optional.\\n\\nAfter initialization, you can still access the union members in the\\narray using the member access operator. You put the array name and\\nelement number (enclosed in brackets) to th\"}]","[{\"text\":\"e left of the operator, and\\nthe member name to the right.\\n\\n    union numbers number_array [3];\\n    number_array[0].i = 2;\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Arrays of Unions, Up: Arrays   [Contents][Index]\\n\\n2.5.7 Arr\"}]","[{\"text\":\"ays of Structures\\n\\nYou can create an array of a structure type just as you can an array of\\na primitive data type.\\n\\n    struct point\\n      {\\n        int x, y;\\n      };\\n    struct point point_array [3];\\n\\nThat example creates a 3-element array of struct point variable\"}]","[{\"text\":\"s called\\npoint_array. You can also initialize the elements of a structure array:\\n\\n    struct point point_array [3] = { {2, 3}, {4, 5}, {6, 7} };\\n\\nAs with initializing structures which contain structure members, the\\nadditional inner grouping braces are optional. But\"}]","[{\"text\":\", if you use the\\nadditional braces, then you can partially initialize some of the\\nstructures in the array, and fully initialize others:\\n\\n    struct point point_array [3] = { {2}, {4, 5}, {6, 7} };\\n\\nIn that example, the first element of the array has only its x membe\"}]","[{\"text\":\"r\\ninitialized. Because of the grouping braces, the value 4 is assigned to\\nthe x member of the second array element, _not_ to the y member of the\\nfirst element, as would be the case without the grouping braces.\\n\\nAfter initialization, you can still access the structur\"}]","[{\"text\":\"e members in the\\narray using the member access operator. You put the array name and\\nelement number (enclosed in brackets) to the left of the operator, and\\nthe member name to the right.\\n\\n    struct point point_array [3];\\n    point_array[0].x = 2;\\n    point_array[0].\"}]","[{\"text\":\"y = 3;\\n\\n------------------------------------------------------------------------\\n\\nNext: Incomplete Types, Previous: Arrays, Up: Data Types  \\n[Contents][Index]\\n\\n2.6 Pointers\\n\\nPointers hold memory addresses of stored constants or variables. For any\\ndata type, includin\"}]","[{\"text\":\"g both primitive types and custom types, you can\\ncreate a pointer that holds the memory address of an instance of that\\ntype.\\n\\n  --------------------------- ---- --\\n  • Declaring Pointers:            \\n  • Initializing Pointers:         \\n  • Pointers to Unions\"}]","[{\"text\":\":            \\n  • Pointers to Structures:        \\n  --------------------------- ---- --\\n\\n------------------------------------------------------------------------\\n\\nNext: Initializing Pointers, Up: Pointers   [Contents][Index]\\n\\n2.6.1 Declaring Pointers\\n\\nYou declare a \"}]","[{\"text\":\"pointer by specifying a name for it and a data type. The\\ndata type indicates of what type of variable the pointer will hold\\nmemory addresses.\\n\\nTo declare a pointer, include the indirection operator (see Pointer\\nOperators) before the identifier. Here is the general f\"}]","[{\"text\":\"orm of a pointer\\ndeclaration:\\n\\n    data-type * name;\\n\\nWhite space is not significant around the indirection operator:\\n\\n    data-type *name;\\n    data-type* name;\\n\\nHere is an example of declaring a pointer to hold the address of an int\\nvariable:\\n\\n    int *ip;\\n\\nBe care\"}]","[{\"text\":\"ful, though: when declaring multiple pointers in the same\\nstatement, you must explicitly declare each as a pointer, using the\\nindirection operator:\\n\\n    int *foo, *bar;  /* Two pointers. */\\n    int *baz, quux;   /* A pointer and an integer variable. */\\n\\n------------\"}]","[{\"text\":\"------------------------------------------------------------\\n\\nNext: Pointers to Unions, Previous: Declaring Pointers, Up: Pointers  \\n[Contents][Index]\\n\\n2.6.2 Initializing Pointers\\n\\nYou can initialize a pointer when you first declare it by specifying a\\nvariable addre\"}]","[{\"text\":\"ss to store in it. For example, the following code\\ndeclares an int variable ‘i’, and a pointer which is initialized with\\nthe address of ‘i’:\\n\\n    int i;\\n    int *ip = &i;\\n\\nNote the use of the address operator (see Pointer Operators), used to\\nget the memory address o\"}]","[{\"text\":\"f a variable. After you declare a pointer, you\\ndo _not_ use the indirection operator with the pointer’s name when\\nassigning it a new address to point to. On the contrary, that would\\nchange the value of the variable that the points to, not the value of\\nthe pointer it\"}]","[{\"text\":\"self. For example:\\n\\n    int i, j;\\n    int *ip = &i;  /* ‘ip’ now holds the address of ‘i’. */\\n    ip = &j;       /* ‘ip’ now holds the address of ‘j’. */\\n    *ip = &i;      /* ‘j’ now holds the address of ‘i’. */\\n\\nThe value stored in a pointer is an integral number\"}]","[{\"text\":\": a location within\\nthe computer’s memory space. If you are so inclined, you can assign\\npointer values explicitly using literal integers, casting them to the\\nappropriate pointer type. However, we do not recommend this practice\\nunless you need to have extremely fine-\"}]","[{\"text\":\"tuned control over what is stored\\nin memory, and you know exactly what you are doing. It would be all too\\neasy to accidentally overwrite something that you did not intend to.\\nMost uses of this technique are also non-portable.\\n\\nIt is important to note that if you do \"}]","[{\"text\":\"not initialize a pointer with the\\naddress of some other existing object, it points nowhere in particular\\nand will likely make your program crash if you use it (formally, this\\nkind of thing is called _undefined behavior_).\\n\\n-------------------------------------------\"}]","[{\"text\":\"-----------------------------\\n\\nNext: Pointers to Structures, Previous: Initializing Pointers, Up:\\nPointers   [Contents][Index]\\n\\n2.6.3 Pointers to Unions\\n\\nYou can create a pointer to a union type just as you can a pointer to a\\nprimitive data type.\\n\\n    union numbers\"}]","[{\"text\":\"\\n      {\\n        int i;\\n        float f;\\n      };\\n    union numbers foo = {4};\\n    union numbers *number_ptr = &foo;\\n\\nThat example creates a new union type, union numbers, and declares (and\\ninitializes the first member of) a variable of that type named foo.\\nFinally\"}]","[{\"text\":\", it declares a pointer to the type union numbers, and gives it\\nthe address of foo.\\n\\nYou can access the members of a union variable through a pointer, but\\nyou can’t use the regular member access operator anymore. Instead, you\\nhave to use the indirect member access o\"}]","[{\"text\":\"perator (see Member Access\\nExpressions). Continuing with the previous example, the following\\nexample will change the value of the first member of foo:\\n\\n    number_ptr -> i = 450;\\n\\nNow the i member in foo is 450.\\n\\n-----------------------------------------------------\"}]","[{\"text\":\"-------------------\\n\\nPrevious: Pointers to Unions, Up: Pointers   [Contents][Index]\\n\\n2.6.4 Pointers to Structures\\n\\nYou can create a pointer to a structure type just as you can a pointer\\nto a primitive data type.\\n\\n    struct fish\\n      {\\n        float length, weight;\"}]","[{\"text\":\"\\n      };\\n    struct fish salmon = {4.3, 5.8};\\n    struct fish *fish_ptr = &salmon;\\n\\nThat example creates a new structure type, struct fish, and declares\\n(and initializes) a variable of that type named salmon. Finally, it\\ndeclares a pointer to the type struct fish, \"}]","[{\"text\":\"and gives it the address of\\nsalmon.\\n\\nYou can access the members of a structure variable through a pointer,\\nbut you can’t use the regular member access operator anymore. Instead,\\nyou have to use the indirect member access operator (see Member Access\\nExpressions). Con\"}]","[{\"text\":\"tinuing with the previous example, the following\\nexample will change the values of the members of salmon:\\n\\n    fish_ptr -> length = 5.1;\\n    fish_ptr -> weight = 6.2;\\n\\nNow the length and width members in salmon are 5.1 and 6.2,\\nrespectively.\\n\\n-----------------------\"}]","[{\"text\":\"-------------------------------------------------\\n\\nNext: Type Qualifiers, Previous: Pointers, Up: Data Types  \\n[Contents][Index]\\n\\n2.7 Incomplete Types\\n\\nYou can define structures, unions, and enumerations without listing\\ntheir members (or values, in the case of enume\"}]","[{\"text\":\"rations). Doing so results\\nin an incomplete type. You can’t declare variables of incomplete types,\\nbut you can work with pointers to those types.\\n\\n    struct point;\\n\\nAt some time later in your program you will want to complete the type.\\nYou do this by defining it a\"}]","[{\"text\":\"s you usually would:\\n\\n    struct point\\n      {\\n        int x, y;\\n      };\\n\\nThis technique is commonly used to for linked lists:\\n\\n    struct singly_linked_list\\n      {\\n        struct singly_linked_list *next;\\n        int x;\\n        /* other members here perhaps */\"}]","[{\"text\":\"\\n      };\\n    struct singly_linked_list *list_head;\\n\\n------------------------------------------------------------------------\\n\\nNext: Storage Class Specifiers, Previous: Incomplete Types, Up: Data\\nTypes   [Contents][Index]\\n\\n2.8 Type Qualifiers\\n\\nThere are two type qua\"}]","[{\"text\":\"lifiers that you can prepend to your variable\\ndeclarations which change how the variables may be accessed: const and\\nvolatile.\\n\\nconst causes the variable to be read-only; after initialization, its\\nvalue may not be changed.\\n\\n    const float pi = 3.14159f;\\n\\nIn additio\"}]","[{\"text\":\"n to helping to prevent accidental value changes, declaring\\nvariables with const can aid the compiler in code optimization.\\n\\nvolatile tells the compiler that the variable is explicitly changeable,\\nand seemingly useless accesses of the variable (for instance, via\\npoi\"}]","[{\"text\":\"nters) should not be optimized away. You might use volatile variables\\nto store data that is updated via callback functions or signal handlers.\\nSequence Points and Signal Delivery.\\n\\n    volatile float currentTemperature = 40.0;\\n\\n--------------------------------------\"}]","[{\"text\":\"----------------------------------\\n\\nNext: Renaming Types, Previous: Type Qualifiers, Up: Data Types  \\n[Contents][Index]\\n\\n2.9 Storage Class Specifiers\\n\\nThere are four storage class specifiers that you can prepend to your\\nvariable declarations which change how the var\"}]","[{\"text\":\"iables are stored in\\nmemory: auto, extern, register, and static.\\n\\nYou use auto for variables which are local to a function, and whose\\nvalues should be discarded upon return from the function in which they\\nare declared. This is the default behavior for variables decl\"}]","[{\"text\":\"ared within\\nfunctions.\\n\\n    void\\n    foo (int value)\\n    {\\n      auto int x = value;\\n      …\\n      return;\\n    }\\n\\nregister is nearly identical in purpose to auto, except that it also\\nsuggests to the compiler that the variable will be heavily used, and, if\\npossible, \"}]","[{\"text\":\"should be stored in a register. You cannot use the address-of\\noperator to obtain the address of a variable declared with register.\\nThis means that you cannot refer to the elements of an array declared\\nwith storage class register. In fact the only thing you can do wi\"}]","[{\"text\":\"th such\\nan array is measure its size with sizeof. GCC normally makes good\\nchoices about which values to hold in registers, and so register is not\\noften used.\\n\\nstatic is essentially the opposite of auto: when applied to variables\\nwithin a function or block, these var\"}]","[{\"text\":\"iables will retain their value even\\nwhen the function or block is finished. This is known as _static storage\\nduration_.\\n\\n    int\\n    sum (int x)\\n    {\\n      static int sumSoFar = 0;\\n      sumSoFar = sumSoFar + x;\\n      return sumSoFar;\\n    }\\n\\nYou can also declare va\"}]","[{\"text\":\"riables (or functions) at the top level (that is,\\nnot inside a function) to be static; such variables are visible (global)\\nto the current source file (but not other source files). This gives an\\nunfortunate double meaning to static; this second meaning is known as\\n_s\"}]","[{\"text\":\"tatic linkage_. Two functions or variables having static linkage in\\nseparate files are entirely separate; neither is visible outside the\\nfile in which it is declared.\\n\\nUninitialized variables that are declared as extern are given default\\nvalues of 0, 0.0, or NULL, d\"}]","[{\"text\":\"epending on the type. Uninitialized\\nvariables that are declared as auto or register (including the default\\nusage of auto) are left uninitialized, and hence should not be assumed\\nto hold any particular value.\\n\\nextern is useful for declaring variables that you want t\"}]","[{\"text\":\"o be visible to\\nall source files that are linked into your project. You cannot\\ninitialize a variable in an extern declaration, as no space is actually\\nallocated during the declaration. You must make both an extern\\ndeclaration (typically in a header file that is incl\"}]","[{\"text\":\"uded by the other\\nsource files which need to access the variable) and a non-extern\\ndeclaration which is where space is actually allocated to store the\\nvariable. The extern declaration may be repeated multiple times.\\n\\n    extern int numberOfClients;\\n\\n    …\\n\\n    int n\"}]","[{\"text\":\"umberOfClients = 0;\\n\\nSee Program Structure and Scope, for related information.\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Storage Class Specifiers, Up: Data Types   [Contents][Index]\\n\\n2.10 Renaming Types\\n\\nSometimes it is con\"}]","[{\"text\":\"venient to give a new name to a type. You can do this\\nusing the typedef statement. See The typedef Statement, for more\\ninformation.\\n\\n------------------------------------------------------------------------\\n\\nNext: Statements, Previous: Data Types, Up: Top   [Contents\"}]","[{\"text\":\"][Index]\\n\\n\\n3 Expressions and Operators\\n\\n  ----------------------------------------------- ---- --\\n  • Expressions:                                       \\n  • Assignment Operators:                              \\n  • Incrementing and Decrementing:                     \"}]","[{\"text\":\"\\n  • Arithmetic Operators:                              \\n  • Complex Conjugation:                               \\n  • Comparison Operators:                              \\n  • Logical Operators:                                 \\n  • Bit Shifting\"}]","[{\"text\":\":                                      \\n  • Bitwise Logical Operators:                         \\n  • Pointer Operators:                                 \\n  • The sizeof Operator:                               \\n  • Type Casts:                                        \"}]","[{\"text\":\"\\n  • Array Subscripts:                                  \\n  • Function Calls as Expressions:                     \\n  • The Comma Operator:                                \\n  • Member Access Expressions:                         \\n  • Conditional Expressions\"}]","[{\"text\":\":                           \\n  • Statements and Declarations in Expressions:        \\n  • Operator Precedence:                               \\n  • Order of Evaluation:                               \\n  ----------------------------------------------- ---- --\\n\\n----------\"}]","[{\"text\":\"--------------------------------------------------------------\\n\\nNext: Assignment Operators, Up: Expressions and Operators  \\n[Contents][Index]\\n\\n3.1 Expressions\\n\\nAn _expression_ consists of at least one operand and zero or more\\noperators. Operands are typed objects su\"}]","[{\"text\":\"ch as constants, variables, and\\nfunction calls that return values. Here are some examples:\\n\\n    47\\n    2 + 2\\n    cosine(3.14159) /* We presume this returns a floating point value. */\\n\\nParentheses group subexpressions:\\n\\n    ( 2 * ( ( 3 + 10 ) - ( 2 * 6 ) ) )\\n\\nInnermo\"}]","[{\"text\":\"st expressions are evaluated first. In the above example, 3 + 10\\nand 2 * 6 evaluate to 13 and 12, respectively. Then 12 is subtracted\\nfrom 13, resulting in 1. Finally, 1 is multiplied by 2, resulting in 2.\\nThe outermost parentheses are completely optional.\\n\\nAn _oper\"}]","[{\"text\":\"ator_ specifies an operation to be performed on its operand(s).\\nOperators may have one, two, or three operands, depending on the\\noperator.\\n\\n------------------------------------------------------------------------\\n\\nNext: Incrementing and Decrementing, Previous: Expre\"}]","[{\"text\":\"ssions, Up:\\nExpressions and Operators   [Contents][Index]\\n\\n3.2 Assignment Operators\\n\\nAssignment operators store values in variables. C provides several\\nvariations of assignment operators.\\n\\nThe standard assignment operator = simply stores the value of its right\\nopera\"}]","[{\"text\":\"nd in the variable specified by its left operand. As with all\\nassignment operators, the left operand (commonly referred to as the\\n“lvalue”) cannot be a literal or constant value.\\n\\n    int x = 10;\\n    float y = 45.12 + 2.0;\\n    int z = (2 * (3 + function () ));\"}]","[{\"text\":\"\\n\\n    struct foo {\\n      int bar;\\n      int baz;\\n    } quux = {3, 4};\\n\\nNote that, unlike the other assignment operators described below, you\\ncan use the plain assignment operator to store values of a structure\\ntype.\\n\\nCompound assignment operators perform an operatio\"}]","[{\"text\":\"n involving both the\\nleft and right operands, and then assign the resulting expression to the\\nleft operand. Here is a list of the compound assignment operators, and a\\nbrief description of what they do:\\n\\n-   +=\\n\\n    Adds the two operands together, and then assign th\"}]","[{\"text\":\"e result of the\\n    addition to the left operand.\\n\\n-   -=\\n\\n    Subtract the right operand from the left operand, and then assign\\n    the result of the subtraction to the left operand.\\n\\n-   *=\\n\\n    Multiply the two operands together, and then assign the result of\"}]","[{\"text\":\"\\n    the multiplication to the left operand.\\n\\n-   /=\\n\\n    Divide the left operand by the right operand, and assign the result\\n    of the division to the left operand.\\n\\n-   %=\\n\\n    Perform modular division on the two operands, and assign the result\\n    of the divisio\"}]","[{\"text\":\"n to the left operand.\\n\\n-   <<=\\n\\n    Perform a left shift operation on the left operand, shifting by the\\n    number of bits specified by the right operand, and assign the result\\n    of the shift to the left operand.\\n\\n-   >>=\\n\\n    Perform a right shift operation on t\"}]","[{\"text\":\"he left operand, shifting by the\\n    number of bits specified by the right operand, and assign the result\\n    of the shift to the left operand.\\n\\n-   &=\\n\\n    Perform a bitwise conjunction operation on the two operands, and\\n    assign the result of the operation to th\"}]","[{\"text\":\"e left operand.\\n\\n-   ^=\\n\\n    Performs a bitwise exclusive disjunction operation on the two\\n    operands, and assign the result of the operation to the left\\n    operand.\\n\\n-   |=\\n\\n    Performs a bitwise inclusive disjunction operation on the two\\n    operands, and assi\"}]","[{\"text\":\"gn the result of the operation to the left\\n    operand.\\n\\nHere is an example of using one of the compound assignment operators:\\n\\n    x += y;\\n\\nSince there are no side effects wrought by evaluating the variable x as\\nan lvalue, the above code produces the same result as\"}]","[{\"text\":\":\\n\\n    x = x + y;\\n\\n------------------------------------------------------------------------\\n\\nNext: Arithmetic Operators, Previous: Assignment Operators, Up:\\nExpressions and Operators   [Contents][Index]\\n\\n3.3 Incrementing and Decrementing\\n\\nThe increment operator ++ a\"}]","[{\"text\":\"dds 1 to its operand. The operand must be a\\neither a variable of one of the primitive data types, a pointer, or an\\nenumeration variable. You can apply the increment operator either before\\nor after the operand. Here are some examples:\\n\\n    char w = '1';\\n    int x = 5\"}]","[{\"text\":\";\\n    char y = 'B';\\n    float z = 5.2;\\n    int *p = &x;\\n\\n    ++w;   /* w is now the character ‘2’ (not the value 2). */\\n    x++;   /* x is now 6. */\\n    ++y;   /* y is now ‘C’ (on ASCII systems). */\\n    z++;   /* z is now 6.2. */\\n    ++p;   /* p is now &x + sizeof(i\"}]","[{\"text\":\"nt). */\\n\\n(Note that incrementing a pointer only makes sense if you have reason to\\nbelieve that the new pointer value will be a valid memory address.)\\n\\nA prefix increment adds 1 before the operand is evaluated. A postfix\\nincrement adds 1 after the operand is evaluate\"}]","[{\"text\":\"d. In the previous\\nexamples, changing the position of the operator would make no\\ndifference. However, there are cases where it does make a difference:\\n\\n    int x = 5;\\n    printf (\\\"%d \\\\n\\\", x++);    /* Print x and then increment it. */\\n    /* x is now equal to 6. */\"}]","[{\"text\":\"\\n    printf (\\\"%d \\\\n\\\", ++x);    /* Increment x and then print it. */\\n\\nThe output of the above example is:\\n\\n    5\\n    7\\n\\nLikewise, you can subtract 1 from an operand using the decrement\\noperator:\\n\\n    int x = 5;\\n\\n    x--; /* x is now 4. */\\n\\nThe concepts of prefix and \"}]","[{\"text\":\"postfix application apply here as with the\\nincrement operator.\\n\\n------------------------------------------------------------------------\\n\\nNext: Complex Conjugation, Previous: Incrementing and Decrementing, Up:\\nExpressions and Operators   [Contents][Index]\\n\\n3.4 Arith\"}]","[{\"text\":\"metic Operators\\n\\nC provides operators for standard arithmetic operations: addition,\\nsubtraction, multiplication, and division, along with modular division\\nand negation. Usage of these operators is straightforward; here are some\\nexamples:\\n\\n    /* Addition. */\\n    x \"}]","[{\"text\":\"= 5 + 3;\\n    y = 10.23 + 37.332;\\n    quux_pointer = foo_pointer + bar_pointer;\\n\\n    /* Subtraction. */\\n    x = 5 - 3;\\n    y = 57.223 - 10.903;\\n    quux_pointer = foo_pointer - bar_pointer;\\n\\nYou can add and subtract memory pointers, but you cannot multiply or\\ndivide \"}]","[{\"text\":\"them.\\n\\n    /* Multiplication. */\\n    x = 5 * 3;\\n    y = 47.4 * 1.001;\\n\\n    /* Division. */\\n    x = 5 / 3;\\n    y = 940.0 / 20.2;\\n\\nInteger division of positive values truncates towards zero, so 5/3 is 1.\\nHowever, if either operand is negative, the direction of roundin\"}]","[{\"text\":\"g is\\nimplementation-defined. Signed Integer Division for information about\\noverflow in signed integer division.\\n\\nYou use the modulus operator % to obtain the remainder produced by\\ndividing its two operands. You put the operands on either side of the\\noperator, and i\"}]","[{\"text\":\"t does matter which operand goes on which side: 3 % 5 and\\n5 % 3 do not have the same result. The operands must be expressions of a\\nprimitive data type.\\n\\n    /* Modular division. */\\n    x = 5 % 3;\\n    y = 74 % 47;\\n\\nModular division returns the remainder produced afte\"}]","[{\"text\":\"r performing integer\\ndivision on the two operands. The operands must be of a primitive\\ninteger type.\\n\\n    /* Negation. */\\n    int x = -5;\\n    float y = -3.14159;\\n\\nIf the operand you use with the negative operator is of an unsigned data\\ntype, then the result cannot n\"}]","[{\"text\":\"egative, but rather is the maximum value\\nof the unsigned data type, minus the value of the operand.\\n\\nMany systems use twos-complement arithmetic, and on such systems the\\nmost negative value a signed type can hold is further away from zero\\nthan the most positive valu\"}]","[{\"text\":\"e. For example, on one platform, this\\nprogram:\\n\\n    #include <limits.h>\\n    #include <stdio.h>\\n\\n    int main (int argc, char *argv[]) \\n    {\\n      int x;\\n      x = INT_MAX;\\n      printf(\\\"INT_MAX  = %d\\\\n\\\", x);\\n      x = INT_MIN;\\n      printf(\\\"INT_MIN  = %d\\\\n\\\", x);\"}]","[{\"text\":\"\\n      x = -x;\\n      printf(\\\"-INT_MIN = %d\\\\n\\\", x);\\n      return 0;\\n    }\\n\\nProduces this output:\\n\\n    INT_MAX  = 2147483647\\n    INT_MIN  = -2147483648\\n    -INT_MIN = -2147483648\\n\\nTrivially, you can also apply a positive operator to a numeric\\nexpression:\\n\\n    int x = \"}]","[{\"text\":\"+42;\\n\\nNumeric values are assumed to be positive unless explicitly made\\nnegative, so this operator has no effect on program operation.\\n\\n------------------------------------------------------------------------\\n\\nNext: Comparison Operators, Previous: Arithmetic Operator\"}]","[{\"text\":\"s, Up:\\nExpressions and Operators   [Contents][Index]\\n\\n3.5 Complex Conjugation\\n\\nAs a GNU extension, you can use the complex conjugation operator ~ to\\nperform complex conjugation on its operand — that is, it reverses the\\nsign of its imaginary component. The operand mu\"}]","[{\"text\":\"st be an expression of a\\ncomplex number type. Here is an example:\\n\\n    __complex__ int x = 5 + 17i;\\n     \\n    printf (\\\"%d  \\\\n\\\", (x * ~x));\\n\\nSince an imaginary number _(a + bi)_ multiplied by its conjugate is\\nequal to _a^2 + b^2_, the above printf statement will prin\"}]","[{\"text\":\"t 314, which\\nis equal to _25 + 289_.\\n\\n------------------------------------------------------------------------\\n\\nNext: Logical Operators, Previous: Complex Conjugation, Up: Expressions\\nand Operators   [Contents][Index]\\n\\n3.6 Comparison Operators\\n\\nYou use the compariso\"}]","[{\"text\":\"n operators to determine how two operands relate to\\neach other: are they equal to each other, is one larger than the other,\\nis one smaller than the other, and so on. When you use any of the\\ncomparison operators, the result is either 1 or 0, meaning true or\\nfalse, re\"}]","[{\"text\":\"spectively.\\n\\n(In the following code examples, the variables x and y stand for any two\\nexpressions of arithmetic types, or pointers.)\\n\\nThe equal-to operator == tests its two operands for equality. The result\\nis 1 if the operands are equal, and 0 if the operands are n\"}]","[{\"text\":\"ot equal.\\n\\n    if (x == y)\\n      puts (\\\"x is equal to y\\\");\\n    else\\n      puts (\\\"x is not equal to y\\\");\\n\\nThe not-equal-to operator != tests its two operands for inequality. The\\nresult is 1 if the operands are not equal, and 0 if the operands _are_\\nequal.\\n\\n    if (x \"}]","[{\"text\":\"!= y)\\n      puts (\\\"x is not equal to y\\\");\\n    else\\n      puts (\\\"x is equal to y\\\");\\n\\nComparing floating-point values for exact equality or inequality can\\nproduce unexpected results. Real Number Types for more information.\\n\\nYou can compare function pointers for equali\"}]","[{\"text\":\"ty or inequality; the\\ncomparison tests if two function pointers point to the same function or\\nnot.\\n\\nBeyond equality and inequality, there are operators you can use to test\\nif one value is less than, greater than, less-than-or-equal-to, or\\ngreater-than-or-equal-to an\"}]","[{\"text\":\"other value. Here are some code samples that\\nexemplify usage of these operators:\\n\\n    if (x < y)\\n      puts (\\\"x is less than y\\\");\\n\\n    if (x <= y)\\n      puts (\\\"x is less than or equal to y\\\");\\n\\n    if (x > y)\\n      puts (\\\"x is greater than y\\\");\\n\\n    if (x >= y)\"}]","[{\"text\":\"\\n      puts (\\\"x is greater than or equal to y\\\");\\n\\n------------------------------------------------------------------------\\n\\nNext: Bit Shifting, Previous: Comparison Operators, Up: Expressions and\\nOperators   [Contents][Index]\\n\\n3.7 Logical Operators\\n\\nLogical operator\"}]","[{\"text\":\"s test the truth value of a pair of operands. Any\\nnonzero expression is considered true in C, while an expression that\\nevaluates to zero is considered false.\\n\\nThe logical conjunction operator && tests if two expressions are both\\ntrue. If the first expression is fals\"}]","[{\"text\":\"e, then the second expression is\\nnot evaluated.\\n\\n    if ((x == 5) && (y == 10))\\n      printf (\\\"x is 5 and y is 10\\\");\\n\\nThe logical disjunction operator || tests if at least one of two\\nexpressions it true. If the first expression is true, then the second\\nexpression i\"}]","[{\"text\":\"s not evaluated.\\n\\n    if ((x == 5) || (y == 10))\\n       printf (\\\"x is 5 or y is 10\\\");\\n\\nYou can prepend a logical expression with a negation operator ! to flip\\nthe truth value:\\n\\n    if (!(x == 5))\\n      printf (\\\"x is not 5\\\");\\n\\nSince the second operand in a logical ex\"}]","[{\"text\":\"pression pair is not necessarily\\nevaluated, you can write code with perhaps unintuitive results:\\n\\n    if (foo && x++)\\n      bar();\\n\\nIf foo is ever zero, then not only would bar not be called, but x would\\nnot be incremented. If you intend to increment x regardless o\"}]","[{\"text\":\"f the value\\nof foo, you should do so outside of the conjunction expression.\\n\\n------------------------------------------------------------------------\\n\\nNext: Bitwise Logical Operators, Previous: Logical Operators, Up:\\nExpressions and Operators   [Contents][Index]\\n\\n3.\"}]","[{\"text\":\"8 Bit Shifting\\n\\nYou use the left-shift operator << to shift its first operand’s bits to\\nthe left. The second operand denotes the number of bit places to shift.\\nBits shifted off the left side of the value are discarded; new bits\\nadded on the right side will all be 0.\"}]","[{\"text\":\"\\n\\n    x = 47;    /* 47 is 00101111 in binary. */\\n    x << 1;    /* 00101111 << 1 is 01011110. */\\n\\nSimilarly, you use the right-shift operator >> to shift its first\\noperand’s bits to the right. Bits shifted off the right side are\\ndiscarded; new bits added on the lef\"}]","[{\"text\":\"t side are _usually_ 0, but if the\\nfirst operand is a signed negative value, then the added bits will be\\neither 0 _or_ whatever value was previously in the leftmost bit\\nposition.\\n\\n    x = 47;   /* 47 is 00101111 in binary. */\\n    x >> 1;   /* 00101111 >> 1 is 000101\"}]","[{\"text\":\"11. */\\n\\nFor both << and >>, if the second operand is greater than the bit-width\\nof the first operand, or the second operand is negative, the behavior is\\nundefined.\\n\\nYou can use the shift operators to perform a variety of interesting\\nhacks. For example, given a date \"}]","[{\"text\":\"with the day of the month numbered as\\nd, the month numbered as m, and the year y, you can store the entire\\ndate in a single number x:\\n\\n    int d = 12;\\n    int m = 6;\\n    int y = 1983;\\n    int x = (((y << 4) + m) << 5) + d;\\n\\nYou can then extract the original day, mon\"}]","[{\"text\":\"th, and year out of x using a\\ncombination of shift operators and modular division:\\n\\n    d = x % 32;\\n    m = (x >> 5) % 16;\\n    y = x >> 9;\\n\\n------------------------------------------------------------------------\\n\\nNext: Pointer Operators, Previous: Bit Shifting, Up\"}]","[{\"text\":\": Expressions and\\nOperators   [Contents][Index]\\n\\n3.9 Bitwise Logical Operators\\n\\nC provides operators for performing bitwise conjunction, inclusive\\ndisjunction, exclusive disjunction, and negation (complement).\\n\\nBiwise conjunction examines each bit in its two operand\"}]","[{\"text\":\"s, and when two\\ncorresponding bits are both 1, the resulting bit is 1. All other\\nresulting bits are 0. Here is an example of how this works, using binary\\nnumbers:\\n\\n    11001001 & 10011011 = 10001001\\n\\nBitwise inclusive disjunction examines each bit in its two operand\"}]","[{\"text\":\"s, and\\nwhen two corresponding bits are both 0, the resulting bit is 0. All\\nother resulting bits are 1.\\n\\n    11001001 | 10011011 = 11011011\\n\\nBitwise exclusive disjunction examines each bit in its two operands, and\\nwhen two corresponding bits are different, the result\"}]","[{\"text\":\"ing bit is 1. All\\nother resulting bits are 0.\\n\\n    11001001 ^ 10011011 = 01010010\\n\\nBitwise negation reverses each bit in its operand:\\n\\n    ~11001001 = 00110110\\n\\nIn C, you can only use these operators with operands of an integer (or\\ncharacter) type, and for maximum p\"}]","[{\"text\":\"ortability, you should only use the\\nbitwise negation operator with unsigned integer types. Here are some\\nexamples of using these operators in C code:\\n\\n    unsigned int foo = 42;\\n    unsigned int bar = 57;\\n    unsigned int quux;\\n\\n    quux = foo & bar;\\n    quux = foo \"}]","[{\"text\":\"| bar;\\n    quux = foo ^ bar;\\n    quux = ~foo;\\n\\n------------------------------------------------------------------------\\n\\nNext: The sizeof Operator, Previous: Bitwise Logical Operators, Up:\\nExpressions and Operators   [Contents][Index]\\n\\n3.10 Pointer Operators\\n\\nYou ca\"}]","[{\"text\":\"n use the address operator & to obtain the memory address of an\\nobject.\\n\\n    int x = 5;\\n    int *pointer_to_x = &x;\\n\\nIt is not necessary to use this operator to obtain the address of a\\nfunction, although you can:\\n\\n    extern int foo (void);\\n    int (*fp1) (void) = f\"}]","[{\"text\":\"oo; /* fp1 points to foo */\\n    int (*fp2) (void) = &foo; /* fp2 also points to foo */\\n\\nFunction pointers and data pointers are not compatible, in the sense\\nthat you cannot expect to store the address of a function into a data\\npointer, and then copy that into a func\"}]","[{\"text\":\"tion pointer and call it\\nsuccessfully. It might work on some systems, but it’s not a portable\\ntechnique.\\n\\nAs a GNU extension to C89, you can also obtain the address of a label\\nwith the label address operator &&. The result is a void* pointer which\\ncan be used with g\"}]","[{\"text\":\"oto. See The goto Statement.\\n\\nGiven a memory address stored in a pointer, you can use the indirection\\noperator * to obtain the value stored at the address. (This is called\\n_dereferencing_ the pointer.)\\n\\n    int x = 5;\\n    int y;\\n    int *ptr;\\n\\n    ptr = &x;    /* pt\"}]","[{\"text\":\"r now holds the address of x. */\\n\\n    y = *ptr;    /* y gets the value stored at the address\\n                    stored in ptr. */\\n\\nAvoid using dereferencing pointers that have not been initialized to a\\nknown memory location.\\n\\n---------------------------------------\"}]","[{\"text\":\"---------------------------------\\n\\nNext: Type Casts, Previous: Pointer Operators, Up: Expressions and\\nOperators   [Contents][Index]\\n\\n3.11 The sizeof Operator\\n\\nYou can use the sizeof operator to obtain the size (in bytes) of the\\ndata type of its operand. The operand \"}]","[{\"text\":\"may be an actual type specifier\\n(such as int or float), as well as any valid expression. When the\\noperand is a type name, it must be enclosed in parentheses. Here are\\nsome examples:\\n\\n    size_t a = sizeof(int);\\n    size_t b = sizeof(float);\\n    size_t c = sizeof(5);\"}]","[{\"text\":\"\\n    size_t d = sizeof(5.143);\\n    size_t e = sizeof a;\\n\\nThe result of the sizeof operator is of a type called size_t, which is\\ndefined in the header file <stddef.h>. size_t is an unsigned integer\\ntype, perhaps identical to unsigned int or unsigned long int; it vari\"}]","[{\"text\":\"es\\nfrom system to system.\\n\\nThe size_t type is often a convenient type for a loop index, since it is\\nguaranteed to be able to hold the number of elements in any array; this\\nis not the case with int, for example.\\n\\nThe sizeof operator can be used to automatically compu\"}]","[{\"text\":\"te the number of\\nelements in an array:\\n\\n    #include <stddef.h>\\n    #include <stdio.h>\\n\\n    static const int values[] = { 1, 2, 48, 681 };\\n    #define ARRAYSIZE(x) (sizeof x/sizeof x[0])\\n\\n    int main (int argc, char *argv[]) \\n    {\\n        size_t i;\\n        for (i \"}]","[{\"text\":\"= 0; i < ARRAYSIZE(values); i++) \\n        {\\n            printf(\\\"%d\\\\n\\\", values[i]);\\n        }\\n        return 0;\\n    }\\n\\nThere are two cases where this technique does not work. The first is\\nwhere the array element has zero size (GCC supports zero-sized\\nstructures as a \"}]","[{\"text\":\"GNU extension). The second is where the array is in fact\\na function parameter (see Function Parameters).\\n\\n------------------------------------------------------------------------\\n\\nNext: Array Subscripts, Previous: The sizeof Operator, Up: Expressions\\nand Operator\"}]","[{\"text\":\"s   [Contents][Index]\\n\\n3.12 Type Casts\\n\\nYou can use a type cast to explicitly cause an expression to be of a\\nspecified data type. A type cast consists of a type specifier enclosed\\nin parentheses, followed by an expression. To ensure proper casting, you\\nshould also e\"}]","[{\"text\":\"nclose the expression that follows the type specifier in\\nparentheses. Here is an example:\\n\\n    float x;\\n    int y = 7;\\n    int z = 3;\\n    x = (float) (y / z);\\n\\nIn that example, since y and z are both integers, integer division is\\nperformed, and even though x is a fl\"}]","[{\"text\":\"oating-point variable, it receives\\nthe value 2. Explicitly casting the result of the division to float does\\nno good, because the computed value of y/z is already 2.\\n\\nTo fix this problem, you need to convert one of the operands to a\\nfloating-point type before the div\"}]","[{\"text\":\"ision takes place:\\n\\n    float x;\\n    int y = 7;\\n    int z = 3;\\n    x = (y / (float)z);\\n\\nHere, a floating-point value close to 2.333… is assigned to x.\\n\\nType casting only works with scalar types (that is, integer,\\nfloating-point or pointer types). Therefore, this is \"}]","[{\"text\":\"not allowed:\\n\\n    struct fooTag { /* members ... */ };\\n    struct fooTag foo;\\n    unsigned char byteArray[8];\\n\\n    foo = (struct fooType) byteArray; /* Fail! */\\n\\n------------------------------------------------------------------------\\n\\nNext: Function Calls as Expres\"}]","[{\"text\":\"sions, Previous: Type Casts, Up:\\nExpressions and Operators   [Contents][Index]\\n\\n3.13 Array Subscripts\\n\\nYou can access array elements by specifying the name of the array, and\\nthe array subscript (or index, or element number) enclosed in brackets.\\nHere is an example, \"}]","[{\"text\":\"supposing an integer array called my_array:\\n\\n    my_array[0] = 5;\\n\\nThe array subscript expression A[i] is defined as being identical to the\\nexpression (*((A)+(i))). This means that many uses of an array name are\\nequivalent to a pointer expression. It also means tha\"}]","[{\"text\":\"t you cannot\\nsubscript an array having the register storage class.\\n\\n------------------------------------------------------------------------\\n\\nNext: The Comma Operator, Previous: Array Subscripts, Up: Expressions\\nand Operators   [Contents][Index]\\n\\n3.14 Function Call\"}]","[{\"text\":\"s as Expressions\\n\\nA call to any function which returns a value is an expression.\\n\\n    int function(void);\\n    …\\n    a = 10 + function();\\n\\n------------------------------------------------------------------------\\n\\nNext: Member Access Expressions, Previous: Function Ca\"}]","[{\"text\":\"lls as\\nExpressions, Up: Expressions and Operators   [Contents][Index]\\n\\n3.15 The Comma Operator\\n\\nYou use the comma operator , to separate two (ostensibly related)\\nexpressions. For instance, the first expression might produce a value\\nthat is used by the second express\"}]","[{\"text\":\"ion:\\n\\n    x++, y = x * x;\\n\\nMore commonly, the comma operator is used in for statements, like this:\\n\\n    /* Using the comma operator in a for statement. */\\n\\n    for (x = 1, y = 10;  x <=10 && y >=1;  x++, y--)\\n      {\\n        …\\n      }\\n\\nThis lets you conveniently set\"}]","[{\"text\":\", monitor, and modify multiple control\\nexpressions for the for statement.\\n\\nA comma is also used to separate function parameters; however, this is\\n_not_ the comma operator in action. In fact, if the comma operator is\\nused as we have discussed here in a function call\"}]","[{\"text\":\", then the compiler\\nwill interpret that as calling the function with an extra parameter.\\n\\nIf you want to use the comma operator in a function argument, you need\\nto put parentheses around it. That’s because commas in a function\\nargument list have a different meaning\"}]","[{\"text\":\": they separate arguments. Thus,\\n\\n    foo (x,  y=47,  x,  z);\\n\\nis interpreted as a function call with four arguments, but\\n\\n    foo (x,  (y=47,  x),  z);\\n\\nis a function call with just three arguments. (The second argument is\\n(y=47, x).)\\n\\n-----------------------------\"}]","[{\"text\":\"-------------------------------------------\\n\\nNext: Conditional Expressions, Previous: The Comma Operator, Up:\\nExpressions and Operators   [Contents][Index]\\n\\n3.16 Member Access Expressions\\n\\nYou can use the member access operator . to access the members of a\\nstructur\"}]","[{\"text\":\"e or union variable. You put the name of the structure variable\\non the left side of the operator, and the name of the member on the\\nright side.\\n\\n    struct point\\n    {\\n      int x, y;\\n    };\\n\\n    struct point first_point;\\n\\n    first_point.x = 0;\\n    first_point.y = \"}]","[{\"text\":\"5;\\n\\nYou can also access the members of a structure or union variable via a\\npointer by using the indirect member access operator ->. x->y is\\nequivalent to (*x).y.\\n\\n    struct fish\\n      {\\n        int length, weight;\\n      };\\n\\n    struct fish salmon;\\n\\n    struct fish \"}]","[{\"text\":\"*fish_pointer = &salmon;\\n\\n    fish_pointer->length = 3;\\n    fish_pointer->weight = 9;\\n\\nSee Pointers.\\n\\n------------------------------------------------------------------------\\n\\nNext: Statements and Declarations in Expressions, Previous: Member\\nAccess Expressions, Up\"}]","[{\"text\":\": Expressions and Operators   [Contents][Index]\\n\\n3.17 Conditional Expressions\\n\\nYou use the conditional operator to cause the entire conditional\\nexpression to evaluate to either its second or its third operand, based\\non the truth value of its first operand. Here’s a\"}]","[{\"text\":\"n example:\\n\\n    a ? b : c\\n\\nIf expression a is true, then expression b is evaluated and the result\\nis the value of b. Otherwise, expression c is evaluated and the result\\nis c.\\n\\nExpressions b and c must be compatible. That is, they must both be\\n\\n1.  arithmetic types\\n2\"}]","[{\"text\":\".  compatible struct or union types\\n3.  pointers to compatible types (one of which might be the NULL\\n    pointer)\\n\\nAlternatively, one operand is a pointer and the other is a void*\\npointer.\\n\\nHere is an example\\n\\n    a = (x == 5) ? y : z;\\n\\nHere, if x equals 5, then a w\"}]","[{\"text\":\"ill receive the value of y. Otherwise, a\\nwill receive the value of z. This can be considered a shorthand method\\nfor writing a simple if…else statement. The following example will\\naccomplish the same task as the previous one:\\n\\n    if (x == 5)\\n        a = y;\\n    else\"}]","[{\"text\":\"\\n        a = z;\\n\\nIf the first operand of the conditional operator is true, then the third\\noperand is never evaluated. Similarly, if the first operand is false,\\nthen the second operand is never evaluated. The first operand is always\\nevaluated.\\n\\n----------------------\"}]","[{\"text\":\"--------------------------------------------------\\n\\nNext: Operator Precedence, Previous: Conditional Expressions, Up:\\nExpressions and Operators   [Contents][Index]\\n\\n3.18 Statements and Declarations in Expressions\\n\\nAs a GNU C extension, you can build an expression us\"}]","[{\"text\":\"ing compound\\nstatement enclosed in parentheses. This allows you to included loops,\\nswitches, and local variables within an expression.\\n\\nRecall that a compound statement (also known as a block) is a sequence\\nof statements surrounded by braces. In this construct, pare\"}]","[{\"text\":\"ntheses go\\naround the braces. Here is an example:\\n\\n    ({ int y = function (); int z;\\n        if (y > 0) z = y;\\n       else z = - y;\\n       z; })\\n\\nThat is a valid (though slightly more complex than necessary) expression\\nfor the absolute value of function ().\\n\\nThe la\"}]","[{\"text\":\"st thing in the compound statement should be an expression\\nfollowed by a semicolon; the value of this subexpression serves as the\\nvalue of the entire construct. (If you use some other kind of statement\\nlast within the braces, the construct has type void, and thus\\nef\"}]","[{\"text\":\"fectively no value.)\\n\\nThis feature is especially useful in making macro definitions “safe” (so\\nthat they evaluate each operand exactly once). For example, the\\n“maximum” function is commonly defined as a macro in standard C as\\nfollows:\\n\\n    #define max(a,b) ((a) > (b\"}]","[{\"text\":\") ? (a) : (b))\\n\\nBut this definition computes either a or b twice, with bad results if\\nthe operand has side effects. In GNU C, if you know the type of the\\noperands (here let’s assume int), you can define the macro safely as\\nfollows:\\n\\n    #define maxint(a,b) \\\\\\n      (\"}]","[{\"text\":\"{int _a = (a), _b = (b); _a > _b ? _a : _b; })\\n\\nIf you don’t know the type of the operand, you can still do this, but\\nyou must use typeof expressions or type naming.\\n\\nEmbedded statements are not allowed in constant expressions, such as the\\nvalue of an enumeration co\"}]","[{\"text\":\"nstant, the width of a bit field, or the\\ninitial value of a static variable.\\n\\n------------------------------------------------------------------------\\n\\nNext: Order of Evaluation, Previous: Statements and Declarations in\\nExpressions, Up: Expressions and Operators   [\"}]","[{\"text\":\"Contents][Index]\\n\\n3.19 Operator Precedence\\n\\nWhen an expression contains multiple operators, such as a + b * f(), the\\noperators are grouped based on rules of _precedence_. For instance, the\\nmeaning of that expression is to call the function f with no arguments,\\nmulti\"}]","[{\"text\":\"ply the result by b, then add that result to a. That’s what the C\\nrules of operator precedence determine for this expression.\\n\\nThe following is a list of types of expressions, presented in order of\\nhighest precedence first. Sometimes two or more operators have equal\"}]","[{\"text\":\"\\nprecedence; all those operators are applied from left to right unless\\nstated otherwise.\\n\\n1.  Function calls, array subscripting, and membership access operator\\n    expressions.\\n2.  Unary operators, including logical negation, bitwise complement,\\n    increment, decr\"}]","[{\"text\":\"ement, unary positive, unary negative, indirection\\n    operator, address operator, type casting, and sizeof expressions.\\n    When several unary operators are consecutive, the later ones are\\n    nested within the earlier ones: !-x means !(-x).\\n3.  Multiplication, div\"}]","[{\"text\":\"ision, and modular division expressions.\\n4.  Addition and subtraction expressions.\\n5.  Bitwise shifting expressions.\\n6.  Greater-than, less-than, greater-than-or-equal-to, and\\n    less-than-or-equal-to\\n    expressions.\\n7.  Equal-to and not-equal-to expressions.\\n8.  \"}]","[{\"text\":\"Bitwise AND expressions.\\n9.  Bitwise exclusive OR expressions.\\n10. Bitwise inclusive OR expressions.\\n11. Logical AND expressions.\\n12. Logical OR expressions.\\n13. Conditional expressions (using ?:). When used as subexpressions,\\n    these are evaluated right to left.\"}]","[{\"text\":\"\\n14. All assignment expressions, including compound assignment. When\\n    multiple assignment statements appear as subexpressions in a single\\n    larger expression, they are evaluated right to left.\\n15. Comma operator expressions.\\n\\nThe above list is somewhat dry and \"}]","[{\"text\":\"is apparently straightforward, but it\\ndoes hide some pitfalls. Take this example:\\n\\n    foo = *p++;\\n\\nHere p is incremented as a side effect of the expression, but foo takes\\nthe value of *(p++) rather than (*p)++, since the unary operators bind\\nright to left. There ar\"}]","[{\"text\":\"e other examples of potential surprises lurking\\nbehind the C precedence table. For this reason if there is the slightest\\nrisk of the reader misunderstanding the meaning of the program, you\\nshould use parentheses to make your meaning clear.\\n\\n-------------------------\"}]","[{\"text\":\"-----------------------------------------------\\n\\nPrevious: Operator Precedence, Up: Expressions and Operators  \\n[Contents][Index]\\n\\n3.20 Order of Evaluation\\n\\nIn C you cannot assume that multiple subexpressions are evaluated in the\\norder that seems natural. For instan\"}]","[{\"text\":\"ce, consider the expression\\n++a * f(). Does this increment a before or after calling the function f?\\nThe compiler could do it in either order, so you cannot make\\nassumptions.\\n\\nThis manual explains the semantics of the C language in the abstract.\\nHowever, an actual c\"}]","[{\"text\":\"ompiler translates source code into specific actions\\nin an actual computer, and may re-order operations for the sake of\\nefficiency. The correspondence between the program you write and the\\nthings the computer actually does are specified in terms of _side\\neffects_ an\"}]","[{\"text\":\"d _sequence points_.\\n\\n  ------------------------------------------ ---- --\\n  • Side Effects:                                 \\n  • Sequence Points:                              \\n  • Sequence Points Constrain Expressions:        \\n  • Sequence Points and Signal Deliver\"}]","[{\"text\":\"y:          \\n  ------------------------------------------ ---- --\\n\\n------------------------------------------------------------------------\\n\\nNext: Sequence Points, Up: Order of Evaluation   [Contents][Index]\\n\\n3.20.1 Side Effects\\n\\nA _side effect_ is one of the follow\"}]","[{\"text\":\"ing:\\n\\n1.  accessing a volatile object\\n2.  modifying an object\\n3.  modifying a file\\n4.  a call to a function which performs any of the above side effects\\n\\nThese are essentially the externally-visible effects of running a\\nprogram. They are called side effects because \"}]","[{\"text\":\"they are effects of\\nexpression evalation beyond the expression’s actual resulting value.\\n\\nThe compiler is allowed to perform the operations of your program in an\\norder different to the order implied by the source of your program,\\nprovided that in the end all the nec\"}]","[{\"text\":\"essary side effects actually take\\nplace. The compiler is also allowed to entirely omit some operations;\\nfor example it’s allowed to skip evaluating part of an expression if it\\ncan be certain that the value is not used and evaluating that part of\\nthe expression won’\"}]","[{\"text\":\"t produce any needed side effects.\\n\\n------------------------------------------------------------------------\\n\\nNext: Sequence Points Constrain Expressions, Previous: Side Effects, Up:\\nOrder of Evaluation   [Contents][Index]\\n\\n3.20.2 Sequence Points\\n\\nAnother requiremen\"}]","[{\"text\":\"t on the compiler is that side effects should take\\nplace in the correct order. In order to provide this without\\nover-constraining the compiler, the C89 and C90 standards specify a list\\nof sequence points. A _sequence point_ is one of the following:\\n\\n1.  a call to a \"}]","[{\"text\":\"function (after argument evaluation is complete)\\n2.  the end of the left-hand operand of the and operator &&\\n3.  the end of the left-hand operand of the or operator ||\\n4.  the end of the left-hand operand of the comma operator ,\\n5.  the end of the first operand of t\"}]","[{\"text\":\"he ternary operator a ? b : c\\n6.  the end of a full declarator ²\\n7.  the end of an initialisation expression\\n8.  the end of an expression statement (i.e. an expression followed by\\n    ;)\\n9.  the end of the controlling expression of an if or switch statement\\n10. the \"}]","[{\"text\":\"end of the controlling expression of a while or do statement\\n11. the end of any of the three controlling expressions of a for\\n    statement\\n12. the end of the expression in a return statement\\n13. immediately before the return of a library function\\n14. after the acti\"}]","[{\"text\":\"ons associated with an item of formatted I/O (as used\\n    for example with the strftime or the printf and scanf famlies of\\n    functions).\\n15. immediately before and after a call to a comparison function (as\\n    called for example by qsort)\\n\\nAt a sequence point, al\"}]","[{\"text\":\"l the side effects of previous expression\\nevaluations must be complete, and no side effects of later evaluations\\nmay have taken place.\\n\\nThis may seem a little hard to grasp, but there is another way to\\nconsider this. Imagine you wrote a library (some of whose functi\"}]","[{\"text\":\"ons are\\nexternal and perhaps others not) and compiled it, allowing someone else\\nto call one of your functions from their code. The definitions above\\nensure that, at the time they call your function, the data they pass in\\nhas values which are consistent with the beha\"}]","[{\"text\":\"viour specified by the\\nabstract machine, and any data returned by your function has a state\\nwhich is also consistent with the abstract machine. This includes data\\naccessible via pointers (i.e. not just function parameters and\\nidentifiers with external linkage).\\n\\nTh\"}]","[{\"text\":\"e above is a slight simplification, since compilers exist that perform\\nwhole-program optimisation at link time. Importantly however, although\\nthey might perform optimisations, the visible side effects of the\\nprogram must be the same as if they were produced by the a\"}]","[{\"text\":\"bstract\\nmachine.\\n\\n------------------------------------------------------------------------\\n\\nNext: Sequence Points and Signal Delivery, Previous: Sequence Points,\\nUp: Order of Evaluation   [Contents][Index]\\n\\n3.20.3 Sequence Points Constrain Expressions\\n\\nThe code frag\"}]","[{\"text\":\"ment\\n\\n    i = i + 1;\\n\\nis quite normal and no doubt occurs in many programs. However, the quite\\nsimilar code fragment\\n\\n    i = ++i + 1;\\n\\nis a little harder to understand; what is the final value of i? The C\\nstandards (both C89 and C99) both forbid this construct in c\"}]","[{\"text\":\"onforming\\nprograms.\\n\\nBetween two sequence points,\\n\\n1.  an object may have its stored value modified at most once by the\\n    evaluation of an expression\\n2.  the prior value of the object shall be read only to determine the\\n    value to be stored.\\n\\nThe first of these \"}]","[{\"text\":\"two conditions forbids expressions like\\nfoo(x=2, ++x). The second condition forbids expressions like a[i++] = i.\\n\\nint x=0; foo(++x, ++x)\\n\\n    Not allowed in a conforming program; modifies x twice before\\n    argument evaluation is complete.\\n\\nint x=0; bar((++x,++x))\"}]","[{\"text\":\"\\n\\n    Allowed; the function bar takes one argument (the value 2 is passed\\n    here), and there is a sequence point at the comma operator.\\n\\n*p++ || *p++\\n\\n    Allowed; there is a sequence point at ||.\\n\\nint x = 1, y = x++;\\n\\n    Allowed; there is a sequence point after \"}]","[{\"text\":\"the full declarator of x.\\n\\nx=2; x++;\\n\\n    Allowed; there is a sequence point at the end of the first\\n    expression statement.\\n\\nif (x++ > MAX) x = 0;\\n\\n    Allowed; there is a sequence point at the end of the controlling\\n    expression of the if³.\\n\\n(x=y) ? ++x : x--;\"}]","[{\"text\":\"\\n\\n    Allowed; there is a sequence point before the ?, and only one of the\\n    two following expressions is evaluated.\\n\\nint *p=malloc(sizeof(*p)), *q=p;  *p=foo(); bar((*p)++,(*q)++);\\n\\n    Not allowed; the object at p is being modified twice before the\\n    evaluatio\"}]","[{\"text\":\"n of the arguments to bar is complete. The fact that this\\n    is done once via p and once via q is irrelevant, since they both\\n    point to the same object.\\n\\nLet’s go back to the example we used to introduce the problem of the\\norder of evaluation, ++a * f(). Suppos\"}]","[{\"text\":\"e the code actually looks like\\nthis:\\n\\n    static int a = 1;\\n\\n    static int f (void)\\n    {\\n      a = 100;\\n      return 3;\\n    }\\n\\n    int foo (void)\\n    {\\n       return ++a * f();\\n    }\\n\\nIs this code allowed in a standard-conforming program? Although the\\nexpression i\"}]","[{\"text\":\"n foo modifies a twice, this is not a problem. Let’s look at\\nthe two possible cases.\\n\\nThe right operand f() is evaluated first\\n\\n    Since f returns a value other than void, it must contain a return\\n    statement. Therefore, there is a sequence point at the end of th\"}]","[{\"text\":\"e\\n    return expression. That comes between the modification to a that f\\n    makes and the evaluation of the left operand.\\n\\nThe left operand ++a is evaluated first\\n\\n    First, a is incremented. Then the arguments to f are evaluated\\n    (there are zero of them). The\"}]","[{\"text\":\"n there is a sequence point before f is\\n    actually called.\\n\\nSo, we see that our program is standard-conforming. Notice that the\\nabove argument does not actually depend on the details of the body of\\nthe function f. It only depends on the function containing somethi\"}]","[{\"text\":\"ng\\nending in a sequence point – in our example this is a return statement,\\nbut an expression statement or a full declarator would do just as well.\\n\\nHowever, the result of executing this code depends on the order of\\nevaluation of the operands of *. If the left-hand o\"}]","[{\"text\":\"perand is evaluated\\nfirst, foo returns 6. Otherwise, it returns 303. The C standard does not\\nspecify in which order the operands should be evaluated, and also does\\nnot require an implementation either to document the order or even to\\nstick to one order. The effect o\"}]","[{\"text\":\"f this code is _unspecified_, meaning\\nthat one of several specific things will happen, but the C standards do\\nnot say which.\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Sequence Points Constrain Expressions, Up: Order of Eval\"}]","[{\"text\":\"uation\\n  [Contents][Index]\\n\\n3.20.4 Sequence Points and Signal Delivery\\n\\nSignals are mainly documented in the GNU C Library manual rather than\\nthis document, even though the C standards consider the compiler and the\\nC library together to be “the implementation”.\\n\\nWhe\"}]","[{\"text\":\"n a signal is received, this will happen between sequence points.\\nSide effects on volatile objects prior to the previous sequence point\\nwill have occurred, but other updates may not have occurred yet. This\\neven applies to straight assignments, such as x=0;, because \"}]","[{\"text\":\"the code\\ngenerated for that statement may require more than one instruction,\\nmeaning that it can be interrupted part-way through by the delivery of a\\nsignal.\\n\\nThe C standard is quite restrictive about what data access can occur\\nwithin a signal handler. They can of c\"}]","[{\"text\":\"ourse use auto variables, but in\\nterms of reading or writing other objects, they must be\\nvolatile sig_atomic_t. The volatile type qualifier ensures that access\\nto the variable in the other parts of the program doesn’t span sequence\\npoints and the use of the sig_atom\"}]","[{\"text\":\"ic_t type ensures that changes to the\\nvariable are atomic with respect to signal delivery.\\n\\nThe POSIX standard also allows a small number of library functions to be\\ncalled from a signal handler. These functions are referred to as the set\\nof _async-signal-safe_ funct\"}]","[{\"text\":\"ions. If your program is intended to run on\\na POSIX system but not on other systems, you can safely call these from\\nyour signal handler too.\\n\\n------------------------------------------------------------------------\\n\\nNext: Functions, Previous: Expressions and Operato\"}]","[{\"text\":\"rs, Up: Top  \\n[Contents][Index]\\n\\n\\n4 Statements\\n\\nYou write statements to cause actions and to control flow within your\\nprograms. You can also write statements that do not do anything at all,\\nor do things that are uselessly trivial.\\n\\n  --------------------------- ---\"}]","[{\"text\":\"- --\\n  • Labels:                        \\n  • Expression Statements:         \\n  • The if Statement:              \\n  • The switch Statement:          \\n  • The while Statement:           \\n  • The do Statement:              \\n  • The for Statement:             \\n  • Block\"}]","[{\"text\":\"s:                        \\n  • The Null Statement:            \\n  • The goto Statement:            \\n  • The break Statement:           \\n  • The continue Statement:        \\n  • The return Statement:          \\n  • The typedef Statement:         \\n  ---------------------\"}]","[{\"text\":\"------ ---- --\\n\\n------------------------------------------------------------------------\\n\\nNext: Expression Statements, Up: Statements   [Contents][Index]\\n\\n4.1 Labels\\n\\nYou can use labels to identify a section of source code for use with a\\nlater goto (see The goto Sta\"}]","[{\"text\":\"tement). A label consists of an identifier\\n(such as those used for variable names) followed by a colon. Here is an\\nexample:\\n\\n    treet:\\n\\nYou should be aware that label names do not interfere with other\\nidentifier names:\\n\\n    int treet = 5;    /* treet the variable. \"}]","[{\"text\":\"*/\\n    treet:            /* treet the label. */\\n\\nThe ISO C standard mandates that a label must be followed by at least\\none statement, possibly a null statement (see The Null Statement). GCC\\nwill compile code that does not meet this requirement, but be aware that\\nif \"}]","[{\"text\":\"you violate it, your code may have portability issues.\\n\\n------------------------------------------------------------------------\\n\\nNext: The if Statement, Previous: Labels, Up: Statements  \\n[Contents][Index]\\n\\n4.2 Expression Statements\\n\\nYou can turn any expression int\"}]","[{\"text\":\"o a statement by adding a semicolon to\\nthe end of the expression. Here are some examples:\\n\\n    5;\\n    2 + 2;\\n    10 >= 9;\\n\\nIn each of those, all that happens is that each expression is evaluated.\\nHowever, they are useless because they do not store a value anywhere,\"}]","[{\"text\":\"\\nnor do they actually do anything, other than the evaluation itself. The\\ncompiler is free to ignore such statements.\\n\\nExpression statements are only useful when they have some kind of side\\neffect, such as storing a value, calling a function, or (this is\\nesoteric) ca\"}]","[{\"text\":\"using a fault in the program. Here are some more useful\\nexamples:\\n\\n    x++;\\n    y = x + 25;\\n    puts (\\\"Hello, user!\\\");\\n    *cucumber;\\n\\nThe last of those statements, *cucumber;, could potentially cause a\\nfault in the program if the value of cucumber is both not a val\"}]","[{\"text\":\"id\\npointer and has been declared as volatile.\\n\\n------------------------------------------------------------------------\\n\\nNext: The switch Statement, Previous: Expression Statements, Up:\\nStatements   [Contents][Index]\\n\\n4.3 The if Statement\\n\\nYou can use the if stateme\"}]","[{\"text\":\"nt to conditionally execute part of your\\nprogram, based on the truth value of a given expression. Here is the\\ngeneral form of an if statement:\\n\\n    if (test)\\n      then-statement\\n    else\\n      else-statement\\n\\nIf test evaluates to true, then then-statement is execut\"}]","[{\"text\":\"ed and\\nelse-statement is not. If test evaluates to false, then else-statement\\nis executed and then-statement is not. The else clause is optional.\\n\\nHere is an actual example:\\n\\n    if (x == 10)\\n      puts (\\\"x is 10\\\");\\n\\nIf x == 10 evaluates to true, then the statement \"}]","[{\"text\":\"puts (\\\"x is 10\\\"); is\\nexecuted. If x == 10 evaluates to false, then the statement\\nputs (\\\"x is 10\\\"); is not executed.\\n\\nHere is an example using else:\\n\\n    if (x == 10)\\n      puts (\\\"x is 10\\\");\\n    else\\n      puts (\\\"x is not 10\\\");\\n\\nYou can use a series of if statements \"}]","[{\"text\":\"to test for multiple conditions:\\n\\n    if (x == 1)\\n      puts (\\\"x is 1\\\");\\n    else if (x == 2)\\n      puts (\\\"x is 2\\\");\\n    else if (x == 3)\\n      puts (\\\"x is 3\\\");\\n    else\\n      puts (\\\"x is something else\\\");\\n\\nThis function calculates and displays the date of Easter fo\"}]","[{\"text\":\"r the given\\nyear y:\\n\\n    void\\n    easterDate (int y)\\n    {\\n      int n = 0;\\n      int g = (y % 19) + 1;\\n      int c = (y / 100) + 1;\\n      int x = ((3 * c) / 4) - 12;\\n      int z = (((8 * c) + 5) / 25) - 5;\\n      int d = ((5 * y) / 4) - x - 10;\\n      int e = ((11 * \"}]","[{\"text\":\"g) + 20 + z - x) % 30;\\n\\n      if (((e == 25) && (g > 11)) || (e == 24))\\n        e++;\\n\\n      n = 44 - e;\\n\\n      if (n < 21)\\n        n += 30;\\n\\n      n = n + 7 - ((d + n) % 7);\\n\\n      if (n > 31)\\n        printf (\\\"Easter: %d April %d\\\", n - 31, y);\\n      else\\n        pri\"}]","[{\"text\":\"ntf (\\\"Easter: %d March %d\\\", n, y);\\n    }\\n\\n------------------------------------------------------------------------\\n\\nNext: The while Statement, Previous: The if Statement, Up: Statements  \\n[Contents][Index]\\n\\n4.4 The switch Statement\\n\\nYou can use the switch statement \"}]","[{\"text\":\"to compare one expression with others,\\nand then execute a series of sub-statements based on the result of the\\ncomparisons. Here is the general form of a switch statement:\\n\\n    switch (test)\\n      {\\n        case compare-1:\\n          if-equal-statement-1\\n        case \"}]","[{\"text\":\"compare-2:\\n          if-equal-statement-2\\n        …\\n        default:\\n          default-statement\\n      }\\n\\nThe switch statement compares test to each of the compare expressions,\\nuntil it finds one that is equal to test. Then, the statements following\\nthe successful c\"}]","[{\"text\":\"ase are executed. All of the expressions compared must\\nbe of an integer type, and the compare-N expressions must be of a\\nconstant integer type (e.g., a literal integer or an expression built of\\nliteral integers).\\n\\nOptionally, you can specify a default case. If test \"}]","[{\"text\":\"doesn’t match any of\\nthe specific cases listed prior to the default case, then the statements\\nfor the default case are executed. Traditionally, the default case is\\nput after the specific cases, but that isn’t required.\\n\\n    switch (x)\\n      {\\n        case 0:\"}]","[{\"text\":\"\\n          puts (\\\"x is 0\\\");\\n          break;\\n        case 1:\\n          puts (\\\"x is 1\\\");\\n          break;\\n        default:\\n          puts (\\\"x is something else\\\");\\n          break;\\n      }\\n\\nNotice the usage of the break statement in each of the cases. This is\\nbecause\"}]","[{\"text\":\", once a matching case is found, not only are its statements\\nexecuted, but so are the statements for all following cases:\\n\\n    int x = 0;\\n    switch (x)\\n      {\\n        case 0:\\n          puts (\\\"x is 0\\\");\\n        case 1:\\n          puts (\\\"x is 1\\\");\\n        default:\"}]","[{\"text\":\"\\n          puts (\\\"x is something else\\\");\\n      }\\n\\nThe output of that example is:\\n\\n    x is 0\\n    x is 1\\n    x is something else\\n\\nThis is often not desired. Including a break statement at the end of\\neach case redirects program flow to after the switch statement.\\n\\nAs \"}]","[{\"text\":\"a GNU C extension, you can also specify a range of consecutive\\ninteger values in a single case label, like this:\\n\\n    case low ... high:\\n\\nThis has the same effect as the corresponding number of individual case\\nlabels, one for each integer value from low to high, inc\"}]","[{\"text\":\"lusive.\\n\\nThis feature is especially useful for ranges of ASCII character codes:\\n\\n    case 'A' ... 'Z':\\n\\nBe careful to include spaces around the ...; otherwise it may be parsed\\nincorrectly when you use it with integer values. For example, write\\nthis:\\n\\n    case 1 ... \"}]","[{\"text\":\"5:\\n\\ninstead of this:\\n\\n    case 1...5:\\n\\nIt is common to use a switch statement to handle various possible values\\nof errno. In this case a portable program should watch out for the\\npossibility that two macros for errno values in fact have the same\\nvalue, for example E\"}]","[{\"text\":\"WOULDBLOCK and EAGAIN.\\n\\n------------------------------------------------------------------------\\n\\nNext: The do Statement, Previous: The switch Statement, Up: Statements  \\n[Contents][Index]\\n\\n4.5 The while Statement\\n\\nThe while statement is a loop statement with an exi\"}]","[{\"text\":\"t test at the\\nbeginning of the loop. Here is the general form of the while statement:\\n\\n    while (test)\\n      statement\\n\\nThe while statement first evaluates test. If test evaluates to true,\\nstatement is executed, and then test is evaluated again. statement\\ncontinue\"}]","[{\"text\":\"s to execute repeatedly as long as test is true after each\\nexecution of statement.\\n\\nThis example prints the integers from zero through nine:\\n\\n    int counter = 0;\\n    while (counter < 10)\\n      printf (\\\"%d \\\", counter++);\\n\\nA break statement can also cause a while loo\"}]","[{\"text\":\"p to exit.\\n\\n------------------------------------------------------------------------\\n\\nNext: The for Statement, Previous: The while Statement, Up: Statements  \\n[Contents][Index]\\n\\n4.6 The do Statement\\n\\nThe do statement is a loop statement with an exit test at the end \"}]","[{\"text\":\"of the\\nloop. Here is the general form of the do statement:\\n\\n    do\\n      statement\\n    while (test);\\n\\nThe do statement first executes statement. After that, it evaluates\\ntest. If test is true, then statement is executed again. statement\\ncontinues to execute repeated\"}]","[{\"text\":\"ly as long as test is true after each\\nexecution of statement.\\n\\nThis example also prints the integers from zero through nine:\\n\\n    int x = 0;\\n    do\\n      printf (\\\"%d \\\", x++);\\n    while (x < 10);\\n\\nA break statement can also cause a do loop to exit.\\n\\n-----------------\"}]","[{\"text\":\"-------------------------------------------------------\\n\\nNext: Blocks, Previous: The do Statement, Up: Statements  \\n[Contents][Index]\\n\\n4.7 The for Statement\\n\\nThe for statement is a loop statement whose structure allows easy\\nvariable initialization, expression testin\"}]","[{\"text\":\"g, and variable modification.\\nIt is very convenient for making counter-controlled loops. Here is the\\ngeneral form of the for statement:\\n\\n    for (initialize; test; step)\\n      statement\\n\\nThe for statement first evaluates the expression initialize. Then it\\nevaluates \"}]","[{\"text\":\"the expression test. If test is false, then the loop ends and\\nprogram control resumes after statement. Otherwise, if test is true,\\nthen statement is executed. Finally, step is evaluated, and the next\\niteration of the loop begins with evaluating test again.\\n\\nMost oft\"}]","[{\"text\":\"en, initialize assigns values to one or more variables, which\\nare generally used as counters, test compares those variables to a\\npredefined expression, and step modifies those variables’ values. Here\\nis another example that prints the integers from zero through nine\"}]","[{\"text\":\":\\n\\n    int x;\\n    for (x = 0; x < 10; x++)\\n      printf (\\\"%d \\\", x);\\n\\nFirst, it evaluates initialize, which assigns x the value 0. Then, as\\nlong as x is less than 10, the value of x is printed (in the body of the\\nloop). Then x is incremented in the step clause and th\"}]","[{\"text\":\"e test\\nre-evaluated.\\n\\nAll three of the expressions in a for statement are optional, and any\\ncombination of the three is valid. Since the first expression is\\nevaluated only once, it is perhaps the most commonly omitted expression.\\nYou could also write the above examp\"}]","[{\"text\":\"le as:\\n\\n    int x = 1;\\n    for (; x <= 10; x++)\\n      printf (\\\"%d \\\", x);\\n\\nIn this example, x receives its value prior to the beginning of the for\\nstatement.\\n\\nIf you leave out the test expression, then the for statement is an\\ninfinite loop (unless you put a break or \"}]","[{\"text\":\"goto statement somewhere in\\nstatement). This is like using 1 as test; it is never false.\\n\\nThis for statement starts printing numbers at 1 and then continues\\nindefinitely, always printing x incremented by 1:\\n\\n    for (x = 1; ; x++)\\n      printf (\\\"%d \\\", x);\\n\\nIf you le\"}]","[{\"text\":\"ave out the step expression, then no progress is made toward\\ncompleting the loop—at least not as is normally expected with a for\\nstatement.\\n\\nThis example prints the number 1 over and over, indefinitely:\\n\\n    for (x = 1; x <= 10;)\\n      printf (\\\"%d \\\", x);\\n\\nPerhaps co\"}]","[{\"text\":\"nfusingly, you cannot use the comma operator (see The Comma\\nOperator) for monitoring multiple variables in a for statement, because\\nas usual the comma operator discards the result of its left operand.\\nThis loop:\\n\\n    int x, y;\\n    for (x = 1, y = 10; x <= 10, y >= 1\"}]","[{\"text\":\"; x+=2, y--)\\n      printf (\\\"%d %d\\\\n\\\", x, y);\\n\\nOutputs:\\n\\n    1 10\\n    3 9\\n    5 8\\n    7 7\\n    9 6\\n    11 5\\n    13 4\\n    15 3\\n    17 2\\n    19 1\\n\\nIf you need to test two conditions, you will need to use the &&\\noperator:\\n\\n    int x, y;\\n    for (x = 1, y = 10; x <= 10 &\"}]","[{\"text\":\"& y >= 1; x+=2, y--)\\n      printf (\\\"%d %d\\\\n\\\", x, y);\\n\\nA break statement can also cause a for loop to exit.\\n\\nHere is an example of a function that computes the summation of squares,\\ngiven a starting integer to square and an ending integer to square:\\n\\n    int\\n    sum_\"}]","[{\"text\":\"of_squares (int start, int end)\\n    {\\n      int i, sum = 0;\\n      for (i = start; i <= end; i++)\\n        sum += i * i;\\n      return sum;\\n    }\\n\\n------------------------------------------------------------------------\\n\\nNext: The Null Statement, Previous: The for Stat\"}]","[{\"text\":\"ement, Up: Statements  \\n[Contents][Index]\\n\\n4.8 Blocks\\n\\nA _block_ is a set of zero or more statements enclosed in braces. Blocks\\nare also known as _compound statements_. Often, a block is used as the\\nbody of an if statement or a loop statement, to group statements\\nto\"}]","[{\"text\":\"gether.\\n\\n    for (x = 1; x <= 10; x++)\\n      {\\n        printf (\\\"x is %d\\\\n\\\", x);\\n        \\n        if ((x % 2) == 0)\\n          printf (\\\"%d is even\\\\n\\\", x);\\n        else\\n          printf (\\\"%d is odd\\\\n\\\", x);\\n      }\\n\\nYou can also put blocks inside other blocks:\\n\\n    for \"}]","[{\"text\":\"(x = 1; x <= 10; x++)\\n      {\\n        if ((x % 2) == 0)\\n          {\\n            printf (\\\"x is %d\\\\n\\\", x);\\n            printf (\\\"%d is even\\\\n\\\", x);\\n          }\\n        else\\n          {\\n            printf (\\\"x is %d\\\\n\\\", x);\\n            printf (\\\"%d is odd\\\\n\\\", x);\"}]","[{\"text\":\"\\n          }\\n      }\\n\\nYou can declare variables inside a block; such variables are local to\\nthat block. In C89, declarations must occur before other statements, and\\nso sometimes it is useful to introduce a block simply for this purpose:\\n\\n    {\\n      int x = 5;\"}]","[{\"text\":\"\\n      printf (\\\"%d\\\\n\\\", x);\\n    }\\n    printf (\\\"%d\\\\n\\\", x);   /* Compilation error! x exists only\\n                           in the preceding block. */\\n\\n------------------------------------------------------------------------\\n\\nNext: The goto Statement, Previous: Blocks\"}]","[{\"text\":\", Up: Statements  \\n[Contents][Index]\\n\\n4.9 The Null Statement\\n\\nThe _null statement_ is merely a semicolon alone.\\n\\n    ;\\n\\nA null statement does not do anything. It does not store a value\\nanywhere. It does not cause time to pass during the execution of your\\nprogram.\\n\\nM\"}]","[{\"text\":\"ost often, a null statement is used as the body of a loop statement, or\\nas one or more of the expressions in a for statement. Here is an example\\nof a for statement that uses the null statement as the body of the loop\\n(and also calculates the integer square root of n\"}]","[{\"text\":\", just for fun):\\n\\n    for (i = 1; i*i < n; i++)\\n      ;\\n\\nHere is another example that uses the null statement as the body of a\\nfor loop and also produces output:\\n\\n    for (x = 1; x <= 5; printf (\\\"x is now %d\\\\n\\\", x), x++)\\n      ;\\n\\nA null statement is also sometimes u\"}]","[{\"text\":\"sed to follow a label that would\\notherwise be the last thing in a block.\\n\\n------------------------------------------------------------------------\\n\\nNext: The break Statement, Previous: The Null Statement, Up: Statements\\n  [Contents][Index]\\n\\n4.10 The goto Statement\"}]","[{\"text\":\"\\n\\nYou can use the goto statement to unconditionally jump to a different\\nplace in the program. Here is the general form of a goto statement:\\n\\n    goto label;\\n\\nYou have to specify a label to jump to; when the goto statement is\\nexecuted, program control jumps to that l\"}]","[{\"text\":\"abel. See Labels. Here is an\\nexample:\\n\\n    goto end_of_program;\\n    …\\n    end_of_program:\\n\\nThe label can be anywhere in the same function as the goto statement\\nthat jumps to it, but a goto statement cannot jump to a label in a\\ndifferent function.\\n\\nYou _can_ use got\"}]","[{\"text\":\"o statements to simulate loop statements, but we do not\\nrecommend it—it makes the program harder to read, and GCC cannot\\noptimize it as well. You should use for, while, and do statements\\ninstead of goto statements, when possible.\\n\\nAs an extension, GCC allows a goto \"}]","[{\"text\":\"statement to jump to an address\\nspecified by a void* variable. To make this work, you also need to take\\nthe address of a label by using the unary operator && (not &). Here is a\\ncontrived example:\\n\\n    enum Play { ROCK=0, PAPER=1, SCISSORS=2 };\\n    enum Result { WIN\"}]","[{\"text\":\", LOSE, DRAW };\\n\\n    static enum Result turn (void) \\n    {\\n      const void * const jumptable[] = {&&rock, &&paper, &&scissors};\\n      enum Play opp;                /* opponent’s play */\\n      goto *jumptable[select_option (&opp)];\\n     rock:\\n      return opp == ROC\"}]","[{\"text\":\"K ? DRAW : (opp == PAPER ? LOSE : WIN);\\n     paper:\\n      return opp == ROCK ? WIN  : (opp == PAPER ? DRAW : LOSE);\\n     scissors:\\n      return opp == ROCK ? LOSE : (opp == PAPER ? WIN  : DRAW);\\n    }\\n\\n----------------------------------------------------------------\"}]","[{\"text\":\"--------\\n\\nNext: The continue Statement, Previous: The goto Statement, Up:\\nStatements   [Contents][Index]\\n\\n4.11 The break Statement\\n\\nYou can use the break statement to terminate a while, do, for, or switch\\nstatement. Here is an example:\\n\\n    int x;\\n    for (x = 1; x \"}]","[{\"text\":\"<= 10; x++)\\n      {\\n        if (x == 8)\\n          break;\\n        else\\n          printf (\\\"%d \\\", x);\\n      }\\n\\nThat example prints numbers from 1 to 7. When x is incremented to 8,\\nx == 8 is true, so the break statement is executed, terminating the for\\nloop prematurely.\"}]","[{\"text\":\"\\n\\nIf you put a break statement inside of a loop or switch statement which\\nitself is inside of a loop or switch statement, the break only\\nterminates the innermost loop or switch statement.\\n\\n------------------------------------------------------------------------\\n\\nNex\"}]","[{\"text\":\"t: The return Statement, Previous: The break Statement, Up:\\nStatements   [Contents][Index]\\n\\n4.12 The continue Statement\\n\\nYou can use the continue statement in loops to terminate an iteration of\\nthe loop and begin the next iteration. Here is an example:\\n\\n    for (x \"}]","[{\"text\":\"= 0; x < 100; x++)\\n      {\\n        if (x % 2 == 0)\\n          continue;\\n        else\\n          sum_of_odd_numbers + = x;\\n      }\\n\\nIf you put a continue statement inside a loop which itself is inside a\\nloop, then it affects only the innermost loop.\\n\\n------------------\"}]","[{\"text\":\"------------------------------------------------------\\n\\nNext: The typedef Statement, Previous: The continue Statement, Up:\\nStatements   [Contents][Index]\\n\\n4.13 The return Statement\\n\\nYou can use the return statement to end the execution of a function and\\nreturn progr\"}]","[{\"text\":\"am control to the function that called it. Here is the\\ngeneral form of the return statement:\\n\\n    return return-value;\\n\\nreturn-value is an optional expression to return. If the function’s\\nreturn type is void, then it is invalid to return an expression. You\\ncan, howe\"}]","[{\"text\":\"ver, use the return statement without a return value.\\n\\nIf the function’s return type is not the same as the type of\\nreturn-value, and automatic type conversion cannot be performed, then\\nreturning return-value is invalid.\\n\\nIf the function’s return type is not void an\"}]","[{\"text\":\"d no return value is\\nspecified, then the return statement is valid unless the function is\\ncalled in a context that requires a return value. For example:\\n\\n    x = cosine (y);\\n\\nIn that case, the function cosine was called in a context that required\\na return value, so \"}]","[{\"text\":\"the value could be assigned to x.\\n\\nEven in contexts where a return value is not required, it is a bad idea\\nfor a non-void function to omit the return value. With GCC, you can use\\nthe command line option -Wreturn-type to issue a warning if you omit the\\nreturn value i\"}]","[{\"text\":\"n such functions.\\n\\nHere are some examples of using the return statement, in both a void and\\nnon-void function:\\n\\n    void\\n    print_plus_five (int x)\\n    {\\n      printf (\\\"%d \\\", x + 5);\\n      return;\\n    }\\n\\n    int\\n    square_value (int x)\\n    {\\n      return x * x;\"}]","[{\"text\":\"\\n    }\\n\\n------------------------------------------------------------------------\\n\\nPrevious: The return Statement, Up: Statements   [Contents][Index]\\n\\n4.14 The typedef Statement\\n\\nYou can use the typedef statement to create new names for data types.\\nHere is the genera\"}]","[{\"text\":\"l form of the typedef statement:\\n\\n    typedef old-type-name new-type-name\\n\\nold-type-name is the existing name for the type, and may consist of more\\nthan one token (e.g., unsigned long int). new-type-name is the resulting\\nnew name for the type, and must be a single i\"}]","[{\"text\":\"dentifier. Creating this\\nnew name for the type does not cause the old name to cease to exist.\\nHere are some examples:\\n\\n    typedef unsigned char byte_type;\\n    typedef double real_number_type;\\n\\nIn the case of custom data types, you can use typedef to make a new name\"}]","[{\"text\":\"\\nfor the type while defining the type:\\n\\n    typedef struct fish\\n    {\\n      float weight;\\n      float length;\\n      float probability_of_being_caught;\\n    } fish_type;\\n\\nTo make a type definition of an array, you first provide the type of the\\nelement, and then establ\"}]","[{\"text\":\"ish the number of elements at the end of the\\ntype definition:\\n\\n    typedef char array_of_bytes [5];\\n    array_of_bytes five_bytes = {0, 1, 2, 3, 4};\\n\\nWhen selecting names for types, you should avoid ending your type names\\nwith a _t suffix. The compiler will allow yo\"}]","[{\"text\":\"u to do this, but the POSIX\\nstandard reserves use of the _t suffix for standard library type names.\\n\\n------------------------------------------------------------------------\\n\\nNext: Program Structure and Scope, Previous: Statements, Up: Top  \\n[Contents][Index]\\n\\n\\n5 Fu\"}]","[{\"text\":\"nctions\\n\\nYou can write functions to separate parts of your program into distinct\\nsubprocedures. To write a function, you must at least create a function\\ndefinition. It is a good idea also to have an explicit function\\ndeclaration; you don’t have to, but if you leave \"}]","[{\"text\":\"it out, then the\\ndefault implicit declaration might not match the function itself, and\\nyou will get some compile-time warnings.\\n\\nEvery program requires at least one function, called main. That is where\\nthe program’s execution begins.\\n\\n  -----------------------------\"}]","[{\"text\":\"------------------- ---- --\\n  • Function Declarations:                              \\n  • Function Definitions:                               \\n  • Calling Functions:                                  \\n  • Function Parameters:                                \\n  • Variab\"}]","[{\"text\":\"le Length Parameter Lists:                    \\n  • Calling Functions Through Function Pointers:        \\n  • The main Function:                                  \\n  • Recursive Functions:                                \\n  • Static Functions\"}]","[{\"text\":\":                                   \\n  • Nested Functions:                                   \\n  ------------------------------------------------ ---- --\\n\\n------------------------------------------------------------------------\\n\\nNext: Function Definitions, Up: Functi\"}]","[{\"text\":\"ons   [Contents][Index]\\n\\n5.1 Function Declarations\\n\\nYou write a function declaration to specify the name of a function, a\\nlist of parameters, and the function’s return type. A function\\ndeclaration ends with a semicolon. Here is the general form:\\n\\n    return-type fun\"}]","[{\"text\":\"ction-name (parameter-list);\\n\\nreturn-type indicates the data type of the value returned by the\\nfunction. You can declare a function that doesn’t return anything by\\nusing the return type void.\\n\\nfunction-name can be any valid identifier (see Identifiers).\\n\\nparameter-l\"}]","[{\"text\":\"ist consists of zero or more parameters, separated by commas.\\nA typical parameter consists of a data type and an optional name for the\\nparameter. You can also declare a function that has a variable number of\\nparameters (see Variable Length Parameter Lists), or no pa\"}]","[{\"text\":\"rameters using\\nvoid. Leaving out parameter-list entirely also indicates no parameters,\\nbut it is better to specify it explicitly with void.\\n\\nHere is an example of a function declaration with two parameters:\\n\\n    int foo (int, double);\\n\\nIf you include a name for a pa\"}]","[{\"text\":\"rameter, the name immediately follows the\\ndata type, like this:\\n\\n    int foo (int x, double y);\\n\\nThe parameter names can be any identifier (see Identifiers), and if you\\nhave more than one parameter, you can’t use the same name more than once\\nwithin a single declarat\"}]","[{\"text\":\"ion. The parameter names in the declaration need\\nnot match the names in the definition.\\n\\nYou should write the function declaration above the first use of the\\nfunction. You can put it in a header file and use the #include directive\\nto include that function declaratio\"}]","[{\"text\":\"n in any source code files that use\\nthe function.\\n\\n------------------------------------------------------------------------\\n\\nNext: Calling Functions, Previous: Function Declarations, Up: Functions\\n  [Contents][Index]\\n\\n5.2 Function Definitions\\n\\nYou write a function d\"}]","[{\"text\":\"efinition to specify what a function actually\\ndoes. A function definition consists of information regarding the\\nfunction’s name, return type, and types and names of parameters, along\\nwith the body of the function. The function body is a series of\\nstatements enclose\"}]","[{\"text\":\"d in braces; in fact it is simply a block (see\\nBlocks).\\n\\nHere is the general form of a function definition:\\n\\n    return-type\\n    function-name (parameter-list)\\n    {\\n      function-body\\n    }\\n\\nreturn-type and function-name are the same as what you use in the\\nfunctio\"}]","[{\"text\":\"n declaration (see Function Declarations).\\n\\nparameter-list is the same as the parameter list used in the function\\ndeclaration (see Function Declarations), except you _must_ include names\\nfor the parameters in a function definition.\\n\\nHere is an simple example of a fu\"}]","[{\"text\":\"nction definition—it takes two integers\\nas its parameters and returns the sum of them as its return value:\\n\\n    int\\n    add_values (int x, int y)\\n    {\\n      return x + y;\\n    }\\n\\nFor compatibility with the original design of C, you can also specify\\nthe type of the f\"}]","[{\"text\":\"unction parameters _after_ the closing parenthesis of\\nthe parameter list, like this:\\n\\n    int\\n    add_values (x, y)\\n        int x, int y;\\n    {\\n      return x + y;\\n    }\\n\\nHowever, we strongly discourage this style of coding; it can cause\\nsubtle problems with type ca\"}]","[{\"text\":\"sting, among other problems.\\n\\n------------------------------------------------------------------------\\n\\nNext: Function Parameters, Previous: Function Definitions, Up: Functions\\n  [Contents][Index]\\n\\n5.3 Calling Functions\\n\\nYou can call a function by using its name an\"}]","[{\"text\":\"d supplying any needed\\nparameters. Here is the general form of a function call:\\n\\n    function-name (parameters)\\n\\nA function call can make up an entire statement, or it can be used as a\\nsubexpression. Here is an example of a standalone function call:\\n\\n    foo (5);\\n\\nI\"}]","[{\"text\":\"n that example, the function ‘foo’ is called with the parameter 5.\\n\\nHere is an example of a function call used as a subexpression:\\n\\n    a = square (5);\\n\\nSupposing that the function ‘square’ squares its parameter, the above\\nexample assigns the value 25 to a.\\n\\nIf a pa\"}]","[{\"text\":\"rameter takes more than one argument, you separate parameters\\nwith commas:\\n\\n    a = quux (5, 10);\\n\\n------------------------------------------------------------------------\\n\\nNext: Variable Length Parameter Lists, Previous: Calling Functions, Up:\\nFunctions   [Contents\"}]","[{\"text\":\"][Index]\\n\\n5.4 Function Parameters\\n\\nFunction parameters can be any expression—a literal value, a value\\nstored in variable, an address in memory, or a more complex expression\\nbuilt by combining these.\\n\\nWithin the function body, the parameter is a local copy of the val\"}]","[{\"text\":\"ue\\npassed into the function; you cannot change the value passed in by\\nchanging the local copy.\\n\\n    int x = 23;\\n    foo (x);\\n    …\\n    /* Definition for function foo. */\\n    int foo (int a)\\n    {\\n      a = 2 * a;\\n      return a;\\n    }\\n\\nIn that example, even though t\"}]","[{\"text\":\"he parameter a is modified in the function\\n‘foo’, the variable x that is passed to the function does not change. If\\nyou wish to use the function to change the original value of x, then you\\nwould have to incorporate the function call into an assignment\\nstatement:\"}]","[{\"text\":\"\\n\\n    x = foo (x);\\n\\nIf the value that you pass to a function is a memory address (that is, a\\npointer), then you can access (and change) the data stored at the memory\\naddress. This achieves an effect similar to pass-by-reference in other\\nlanguages, but is not the sam\"}]","[{\"text\":\"e: the memory address is simply a value,\\njust like any other value, and cannot itself be changed. The difference\\nbetween passing a pointer and passing an integer lies in what you can do\\nusing the value within the function.\\n\\nHere is an example of calling a function w\"}]","[{\"text\":\"ith a pointer parameter:\\n\\n    void\\n    foo (int *x)\\n    {\\n      *x = *x + 42;\\n    }\\n    …\\n    int a = 15;\\n    foo (&a);\\n\\nThe formal parameter for the function is of type pointer-to-int, and we\\ncall the function by passing it the address of a variable of type int.\\nB\"}]","[{\"text\":\"y dereferencing the pointer within the function body, we can both see\\nand change the value stored in the address. The above changes the value\\nof a to ‘57’.\\n\\nEven if you don’t want to change the value stored in the address,\\npassing the address of a variable rather th\"}]","[{\"text\":\"an the variable itself can be\\nuseful if the variable type is large and you need to conserve memory\\nspace or limit the performance impact of parameter copying. For example:\\n\\n    struct foo\\n    {\\n      int x;\\n      float y;\\n      double z;\\n    };\\n\\n    void bar (const \"}]","[{\"text\":\"struct foo *a);\\n\\nIn this case, unless you are working on a computer with very large\\nmemory addresses, it will take less memory to pass a pointer to the\\nstructure than to pass an instance of the structure.\\n\\nOne type of parameter that is always passed as a pointer is \"}]","[{\"text\":\"any sort of\\narray:\\n\\n    void foo (int a[]);\\n    …\\n    int x[100];\\n    foo (x);\\n\\nIn this example, calling the function foo with the parameter a does not\\ncopy the entire array into a new local parameter within foo; rather, it\\npasses x as a pointer to the first elemen\"}]","[{\"text\":\"t in x. Be careful, though:\\nwithin the function, you cannot use sizeof to determine the size of the\\narray x—sizeof instead tells you the size of the pointer x. Indeed, the\\nabove code is equivalent to:\\n\\n    void foo (int *a);\\n    …\\n    int x[100];\\n    foo (x);\\n\\nExpli\"}]","[{\"text\":\"citly specifying the length of the array in the parameter\\ndeclaration will not help. If you really need to pass an array by value,\\nyou can wrap it in a struct, though doing this will rarely be useful\\n(passing a const-qualified pointer is normally sufficient to indic\"}]","[{\"text\":\"ate\\nthat the caller should not modify the array).\\n\\n------------------------------------------------------------------------\\n\\nNext: Calling Functions Through Function Pointers, Previous: Function\\nParameters, Up: Functions   [Contents][Index]\\n\\n5.5 Variable Length Para\"}]","[{\"text\":\"meter Lists\\n\\nYou can write a function that takes a variable number of arguments;\\nthese are called _variadic functions_. To do this, the function needs to\\nhave at least one parameter of a known data type, but the remaining\\nparameters are optional, and can vary in bot\"}]","[{\"text\":\"h quantity and data type.\\n\\nYou list the initial parameters as normal, but then after that, use an\\nellipsis: ‘...’. Here is an example function prototype:\\n\\n    int add_multiple_values (int number, ...);\\n\\nTo work with the optional parameters in the function definition\"}]","[{\"text\":\", you\\nneed to use macros that are defined in the library header file\\n‘<stdarg.h>’, so you must #include that file. For a detailed description\\nof these macros, see The GNU C Library manual’s section on variadic\\nfunctions.\\n\\nHere is an example:\\n\\n    int\\n    add_multipl\"}]","[{\"text\":\"e_values (int number, ...)\\n    {\\n      int counter, total = 0;\\n      \\n      /* Declare a variable of type ‘va_list’. */\\n      va_list parameters;\\n\\n      /* Call the ‘va_start’ function. */\\n      va_start (parameters, number);\\n\\n      for (counter = 0; counter < numbe\"}]","[{\"text\":\"r; counter++)\\n        {\\n          /* Get the values of the optional parameters. */\\n          total += va_arg (parameters, int);\\n        }\\n\\n      /* End use of the ‘parameters’ variable. */\\n      va_end (parameters);\\n\\n      return total;\\n    }\\n\\nTo use optional parame\"}]","[{\"text\":\"ters, you need to have a way to know how many\\nthere are. This can vary, so it can’t be hard-coded, but if you don’t\\nknow how many optional parameters you have, then you could have\\ndifficulty knowing when to stop using the ‘va_arg’ function. In the\\nabove example, th\"}]","[{\"text\":\"e first parameter to the ‘add_multiple_values’\\nfunction, ‘number’, is the number of optional parameters actually\\npassed. So, we might call the function like this:\\n\\n    sum = add_multiple_values (3, 12, 34, 190);\\n\\nThe first parameter indicates how many optional param\"}]","[{\"text\":\"eters follow it.\\n\\nAlso, note that you don’t actually need to use ‘va_end’ function. In\\nfact, with GCC it doesn’t do anything at all. However, you might want to\\ninclude it to maximize compatibility with other compilers.\\n\\nSee Variadic Functions in The GNU C Library Re\"}]","[{\"text\":\"ference Manual.\\n\\n------------------------------------------------------------------------\\n\\nNext: The main Function, Previous: Variable Length Parameter Lists, Up:\\nFunctions   [Contents][Index]\\n\\n5.6 Calling Functions Through Function Pointers\\n\\nYou can also call a fun\"}]","[{\"text\":\"ction identified by a pointer. The indirection\\noperator * is optional when doing this.\\n\\n    #include <stdio.h>\\n\\n    void foo (int i)\\n    {\\n      printf (\\\"foo %d!\\\\n\\\", i);\\n    }\\n\\n    void bar (int i)\\n    {\\n      printf (\\\"%d bar!\\\\n\\\", i);\\n    }\\n\\n    void message (void (\"}]","[{\"text\":\"*func)(int), int times)\\n    {\\n      int j;\\n      for (j=0; j<times; ++j)\\n        func (j);  /* (*func) (j); would be equivalent. */\\n    }\\n\\n    void example (int want_foo) \\n    {\\n      void (*pf)(int) = &bar; /* The & is optional. */\\n      if (want_foo)\\n        pf = \"}]","[{\"text\":\"foo;\\n      message (pf, 5);\\n    }\\n\\n------------------------------------------------------------------------\\n\\nNext: Recursive Functions, Previous: Calling Functions Through Function\\nPointers, Up: Functions   [Contents][Index]\\n\\n5.7 The main Function\\n\\nEvery program req\"}]","[{\"text\":\"uires at least one function, called ‘main’. This is\\nwhere the program begins executing. You do not need to write a\\ndeclaration or prototype for main, but you do need to define it.\\n\\nThe return type for main is always int. You do not have to specify the\\nreturn type fo\"}]","[{\"text\":\"r main, but you can. However, you _cannot_ specify that it\\nhas a return type other than int.\\n\\nIn general, the return value from main indicates the program’s _exit\\nstatus_. A value of zero or EXIT_SUCCESS indicates success and\\nEXIT_FAILURE indicates an error. Otherwi\"}]","[{\"text\":\"se, the significance of the\\nvalue returned is implementation-defined.\\n\\nReaching the } at the end of main without a return, or executing a\\nreturn statement with no value (that is, return;) are both equivalent.\\nIn C89, the effect of this is undefined, but in C99 the e\"}]","[{\"text\":\"ffect is\\nequivalent to return 0;.\\n\\nYou can write your main function to have no parameters (that is, as\\nint main (void)), or to accept parameters from the command line. Here is\\na very simple main function with no parameters:\\n\\n    int\\n    main (void)\\n    {\\n      puts \"}]","[{\"text\":\"(\\\"Hi there!\\\");\\n      return 0;\\n    }\\n\\nTo accept command line parameters, you need to have two parameters in\\nthe main function, int argc followed by char *argv[]. You can change the\\nnames of those parameters, but they must have those data types—int and\\narray of point\"}]","[{\"text\":\"ers to char. argc is the number of command line\\nparameters, including the name of the program itself. argv is an array\\nof the parameters, as character strings. argv[0], the first element in\\nthe array, is the name of the program as typed at the command line⁴; any\\nfol\"}]","[{\"text\":\"lowing array elements are the parameters that followed the name of\\nthe program.\\n\\nHere is an example main function that accepts command line parameters,\\nand prints out what those parameters are:\\n\\n    int\\n    main (int argc, char *argv[])\\n    {\\n      int counter;\"}]","[{\"text\":\"\\n\\n      for (counter = 0; counter < argc; counter++)\\n        printf (\\\"%s\\\\n\\\", argv[counter]);\\n      \\n      return 0;\\n    }\\n\\n------------------------------------------------------------------------\\n\\nNext: Static Functions, Previous: The main Function, Up: Functions  \"}]","[{\"text\":\"\\n[Contents][Index]\\n\\n5.8 Recursive Functions\\n\\nYou can write a function that is recursive—a function that calls itself.\\nHere is an example that computes the factorial of an integer:\\n\\n    int\\n    factorial (int x)\\n    {\\n      if (x < 1)\\n        return 1;\\n      else\"}]","[{\"text\":\"\\n        return (x * factorial (x - 1));\\n    }\\n\\nBe careful that you do not write a function that is infinitely\\nrecursive. In the above example, once x is 1, the recursion stops.\\nHowever, in the following example, the recursion does not stop until the\\nprogram is inte\"}]","[{\"text\":\"rrupted or runs out of memory:\\n\\n    int\\n    watermelon (int x)\\n    {\\n      return (watermelon (x));\\n    }\\n\\nFunctions can also be indirectly recursive, of course.\\n\\n------------------------------------------------------------------------\\n\\nNext: Nested Functions, Previ\"}]","[{\"text\":\"ous: Recursive Functions, Up: Functions  \\n[Contents][Index]\\n\\n5.9 Static Functions\\n\\nYou can define a function to be static if you want it to be callable\\nonly within the source file where it is defined:\\n\\n    static int\\n    foo (int x)\\n    {\\n      return x + 42;\\n    }\"}]","[{\"text\":\"\\n\\nThis is useful if you are building a reusable library of functions and\\nneed to include some subroutines that should not be callable by the end\\nuser.\\n\\nFunctions which are defined in this way are said to have _static\\nlinkage_. Unfortunately the static keyword has mu\"}]","[{\"text\":\"ltiple meanings;\\nStorage Class Specifiers.\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Static Functions, Up: Functions   [Contents][Index]\\n\\n5.10 Nested Functions\\n\\nAs a GNU C extension, you can define functions within other fu\"}]","[{\"text\":\"nctions, a\\ntechnique known as nesting functions.\\n\\nHere is an example of a tail-recursive factorial function, defined using\\na nested function:\\n\\n    int\\n    factorial (int x)\\n    {\\n      int\\n      factorial_helper (int a, int b)\\n      {\\n        if (a < 1)\\n        {\"}]","[{\"text\":\"\\n          return b;\\n        }\\n        else\\n        {\\n          return factorial_helper ((a - 1), (a * b));\\n        }\\n      }\\n\\n     return factorial_helper (x, 1);\\n    }\\n\\nNote that nested functions must be defined along with variable\\ndeclarations at the beginning o\"}]","[{\"text\":\"f a function, and all other statements\\nfollow.\\n\\n------------------------------------------------------------------------\\n\\nNext: A Sample Program, Previous: Functions, Up: Top   [Contents][Index]\\n\\n\\n6 Program Structure and Scope\\n\\nNow that we have seen all of the funda\"}]","[{\"text\":\"mental elements of C programs,\\nit’s time to look at the big picture.\\n\\n  ---------------------- ---- --\\n  • Program Structure:        \\n  • Scope:                    \\n  ---------------------- ---- --\\n\\n-------------------------------------------------------------------\"}]","[{\"text\":\"-----\\n\\nNext: Scope, Up: Program Structure and Scope   [Contents][Index]\\n\\n6.1 Program Structure\\n\\nA C program may exist entirely within a single source file, but more\\ncommonly, any non-trivial program will consist of several custom header\\nfiles and source files, and w\"}]","[{\"text\":\"ill also include and link with files from\\nexisting libraries.\\n\\nBy convention, header files (with a “.h” extension) contain variable and\\nfunction declarations, and source files (with a “.c” extension) contain\\nthe corresponding definitions. Source files may also stor\"}]","[{\"text\":\"e declarations,\\nif these declarations are not for objects which need to be seen by other\\nfiles. However, header files almost certainly should not contain any\\ndefinitions.\\n\\nFor example, if you write a function that computes square roots, and you\\nwanted this function \"}]","[{\"text\":\"to be accessible to files other than where you\\ndefine the function, then you would put the function declaration into a\\nheader file (with a “.h” file extension):\\n\\n    /* sqrt.h */\\n\\n    double\\n    computeSqrt (double x);\\n\\nThis header file could be included by other so\"}]","[{\"text\":\"urce files which need to\\nuse your function, but do not need to know how it was implemented.\\n\\nThe implementation of the function would then go into a corresponding\\nsource file (with a “.c” file extension):\\n\\n    /* sqrt.c */\\n    #include \\\"sqrt.h\\\"\\n\\n    double\\n    compu\"}]","[{\"text\":\"teSqrt (double x)\\n    {\\n      double result;\\n      …\\n      return result;\\n    }\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Program Structure, Up: Program Structure and Scope  \\n[Contents][Index]\\n\\n6.2 Scope\\n\\nScope refers to wh\"}]","[{\"text\":\"at parts of the program can “see” a declared object. A\\ndeclared object can be visible only within a particular function, or\\nwithin a particular file, or may be visible to an entire set of files by\\nway of including header files and using extern declarations.\\n\\nUnless \"}]","[{\"text\":\"explicitly stated otherwise, declarations made at the top-level\\nof a file (i.e., not within a function) are visible to the entire file,\\nincluding from within functions, but are not visible outside of the\\nfile.\\n\\nDeclarations made within functions are visible only wit\"}]","[{\"text\":\"hin those\\nfunctions.\\n\\nA declaration is not visible to declarations that came before it; for\\nexample:\\n\\n    int x = 5;\\n    int y = x + 10;\\n\\nwill work, but:\\n\\n    int x = y + 10;\\n    int y = 5;\\n\\nwill not.\\n\\nSee Storage Class Specifiers, for more information on changing t\"}]","[{\"text\":\"he scope\\nof declared objects. Also see Static Functions.\\n\\n------------------------------------------------------------------------\\n\\nNext: Overflow, Previous: Program Structure and Scope, Up: Top  \\n[Contents][Index]\\n\\n\\n7 A Sample Program\\n\\nTo conclude our description o\"}]","[{\"text\":\"f C, here is a complete program written in\\nC, consisting of both a C source file and a header file. This program is\\nan expanded version of the quintessential “hello world” program, and\\nserves as an example of how to format and structure C code for use in\\nprograms fo\"}]","[{\"text\":\"r FSF Project GNU. (You can always download the most recent\\nversion of this program, including sample makefiles and other examples\\nof how to produce GNU software, from http://www.gnu.org/software/hello.)\\n\\nThis program uses features of the preprocessor; for a descrip\"}]","[{\"text\":\"tion of\\npreprocessor macros, see The C Preprocessor, available as part of the\\nGCC documentation.\\n\\n  ------------- ---- --\\n  • hello.c:         \\n  • system.h:        \\n  ------------- ---- --\\n\\n------------------------------------------------------------------------\\n\\nN\"}]","[{\"text\":\"ext: system.h, Up: A Sample Program   [Contents][Index]\\n\\n7.1 hello.c\\n\\n    /* hello.c -- print a greeting message and exit.\\n\\n       Copyright (C) 1992, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\\n       2005, 2006, 2007 Free Software Foundation, Inc.\\n\\n       Thi\"}]","[{\"text\":\"s program is free software; you can redistribute it and/or modify\\n       it under the terms of the GNU General Public License as published by\\n       the Free Software Foundation; either version 3, or (at your option)\\n       any later version.\\n\\n       This program i\"}]","[{\"text\":\"s distributed in the hope that it will be useful,\\n       but WITHOUT ANY WARRANTY; without even the implied warranty of\\n       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n       GNU General Public License for more details.\\n\\n       You should have r\"}]","[{\"text\":\"eceived a copy of the GNU General Public License\\n       along with this program; if not, write to the Free Software Foundation,\\n       Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */\\n\\n    #include <config.h>\\n    #include \\\"system.h\\\"\\n\\n    /* Str\"}]","[{\"text\":\"ing containing name the program is called with.  */\\n    const char *program_name;\\n\\n    static const struct option longopts[] =\\n    {\\n      { \\\"greeting\\\", required_argument, NULL, 'g' },\\n      { \\\"help\\\", no_argument, NULL, 'h' },\\n      { \\\"next-generation\\\", no_argument\"}]","[{\"text\":\", NULL, 'n' },\\n      { \\\"traditional\\\", no_argument, NULL, 't' },\\n      { \\\"version\\\", no_argument, NULL, 'v' },\\n      { NULL, 0, NULL, 0 }\\n    };\\n\\n    static void print_help (void);\\n    static void print_version (void);\\n\\n    int\\n    main (int argc, char *argv[])\\n    {\"}]","[{\"text\":\"\\n      int optc;\\n      int t = 0, n = 0, lose = 0;\\n      const char *greeting = NULL;\\n\\n      program_name = argv[0];\\n\\n      /* Set locale via LC_ALL.  */\\n      setlocale (LC_ALL, \\\"\\\");\\n\\n    #if ENABLE_NLS\\n      /* Set the text message domain.  */\\n      bindtextdomai\"}]","[{\"text\":\"n (PACKAGE, LOCALEDIR);\\n      textdomain (PACKAGE);\\n    #endif\\n\\n      /* Even exiting has subtleties.  The /dev/full device on GNU/Linux\\n         can be used for testing whether writes are checked properly.  For\\n         instance, hello >/dev/full should exit unsucc\"}]","[{\"text\":\"essfully.  On exit,\\n         if any writes failed, change the exit status.  This is\\n         implemented in the Gnulib module \\\"closeout\\\".  */\\n      atexit (close_stdout);\\n\\n      while ((optc = getopt_long (argc, argv, \\\"g:hntv\\\", longopts, NULL)) != -1)\\n        switc\"}]","[{\"text\":\"h (optc)\\n          {\\n          /* One goal here is having --help and --version exit immediately,\\n             per GNU coding standards.  */\\n          case 'v':\\n            print_version ();\\n            exit (EXIT_SUCCESS);\\n            break;\\n          case 'g':\"}]","[{\"text\":\"\\n            greeting = optarg;\\n            break;\\n          case 'h':\\n            print_help ();\\n            exit (EXIT_SUCCESS);\\n            break;\\n          case 'n':\\n            n = 1;\\n            break;\\n          case 't':\\n            t = 1;\\n            break;\"}]","[{\"text\":\"\\n          default:\\n            lose = 1;\\n            break;\\n          }\\n\\n      if (lose || optind < argc)\\n        {\\n          /* Print error message and exit.  */\\n          if (optind < argc)\\n            fprintf (stderr, _(\\\"%s: extra operand: %s\\\\n\\\"),\\n             p\"}]","[{\"text\":\"rogram_name, argv[optind]);\\n          fprintf (stderr, _(\\\"Try `%s --help' for more information.\\\\n\\\"),\\n                   program_name);\\n          exit (EXIT_FAILURE);\\n        }\\n\\n      /* Print greeting message and exit. */\\n      if (t)\\n        printf (_(\\\"hello, world\"}]","[{\"text\":\"\\\\n\\\"));\\n\\n      else if (n)\\n        /* TRANSLATORS: Use box drawing characters or other fancy stuff\\n           if your encoding (e.g., UTF-8) allows it.  If done so add the\\n           following note, please:\\n\\n           [Note: For best viewing results use a UTF-8 loca\"}]","[{\"text\":\"le, please.]\\n        */\\n        printf (_(\\\"\\\\\\n    +---------------+\\\\n\\\\\\n    | Hello, world! |\\\\n\\\\\\n    +---------------+\\\\n\\\\\\n    \\\"));\\n\\n      else\\n        {\\n          if (!greeting)\\n            greeting = _(\\\"Hello, world!\\\");\\n          puts (greeting);\\n        }\"}]","[{\"text\":\"\\n      \\n      exit (EXIT_SUCCESS);\\n    }\\n\\n\\n    \\f\\n    /* Print help info.  This long message is split into\\n       several pieces to help translators be able to align different\\n       blocks and identify the various pieces.  */\\n\\n    static void\\n    print_help (void)\"}]","[{\"text\":\"\\n    {\\n      /* TRANSLATORS: --help output 1 (synopsis)\\n         no-wrap */\\n            printf (_(\\\"\\\\\\n    Usage: %s [OPTION]...\\\\n\\\"), program_name);\\n\\n      /* TRANSLATORS: --help output 2 (brief description)\\n         no-wrap */\\n      fputs (_(\\\"\\\\\\n    Print a friendly, \"}]","[{\"text\":\"customizable greeting.\\\\n\\\"), stdout);\\n\\n      puts (\\\"\\\");\\n      /* TRANSLATORS: --help output 3: options 1/2\\n         no-wrap */\\n      fputs (_(\\\"\\\\\\n      -h, --help          display this help and exit\\\\n\\\\\\n      -v, --version       display version information and exit\\\\n\\\")\"}]","[{\"text\":\", stdout);\\n\\n      puts (\\\"\\\");\\n      /* TRANSLATORS: --help output 4: options 2/2\\n         no-wrap */\\n      fputs (_(\\\"\\\\\\n      -t, --traditional       use traditional greeting format\\\\n\\\\\\n      -n, --next-generation   use next-generation greeting format\\\\n\\\\\\n      -g, --gr\"}]","[{\"text\":\"eeting=TEXT     use TEXT as the greeting message\\\\n\\\"), stdout);\\n\\n      printf (\\\"\\\\n\\\");\\n      /* TRANSLATORS: --help output 5 (end)\\n         TRANSLATORS: the placeholder indicates the bug-reporting address\\n         for this application.  Please add _another line_ with \"}]","[{\"text\":\"the\\n         address for translation bugs.\\n         no-wrap */\\n      printf (_(\\\"\\\\\\n    Report bugs to <%s>.\\\\n\\\"), PACKAGE_BUGREPORT);\\n    }\\n\\n\\n    \\f\\n    /* Print version and copyright information.  */\\n\\n    static void\\n    print_version (void)\\n    {\\n      printf (\\\"hell\"}]","[{\"text\":\"o (GNU %s) %s\\\\n\\\", PACKAGE, VERSION);\\n      /* xgettext: no-wrap */\\n      puts (\\\"\\\");\\n      \\n      /* It is important to separate the year from the rest of the message,\\n         as done here, to avoid having to retranslate the message when a new\\n         year comes ar\"}]","[{\"text\":\"ound.  */\\n      printf (_(\\\"\\\\\\n    Copyright (C) %s Free Software Foundation, Inc.\\\\n\\\\\\n    License GPLv3+: GNU GPL version 3 or later\\\\\\n    <http://gnu.org/licenses/gpl.html>\\\\n\\\\\\n    This is free software: you are free to change and redistribute it.\\\\n\\\\\\n    There is NO WA\"}]","[{\"text\":\"RRANTY, to the extent permitted by law.\\\\n\\\"),\\n                  \\\"2007\\\");\\n    }\\n\\n------------------------------------------------------------------------\\n\\nPrevious: hello.c, Up: A Sample Program   [Contents][Index]\\n\\n7.2 system.h\\n\\n    /* system.h: system-dependent decl\"}]","[{\"text\":\"arations; include this first.\\n       Copyright (C) 1996, 2005, 2006, 2007 Free Software Foundation, Inc.\\n\\n       This program is free software; you can redistribute it and/or modify\\n       it under the terms of the GNU General Public License as published by\\n       t\"}]","[{\"text\":\"he Free Software Foundation; either version 3, or (at your option)\\n       any later version.\\n\\n       This program is distributed in the hope that it will be useful,\\n       but WITHOUT ANY WARRANTY; without even the implied warranty of\\n       MERCHANTABILITY or FITNE\"}]","[{\"text\":\"SS FOR A PARTICULAR PURPOSE.  See the\\n       GNU General Public License for more details.\\n\\n       You should have received a copy of the GNU General Public License\\n       along with this program; if not, write to the Free Software Foundation,\\n       Inc., 51 Frankli\"}]","[{\"text\":\"n Street, Fifth Floor, Boston, MA 02110-1301, USA.  */\\n\\n    #ifndef HELLO_SYSTEM_H\\n    #define HELLO_SYSTEM_H\\n\\n    /* Assume ANSI C89 headers are available.  */\\n    #include <locale.h>\\n    #include <stdio.h>\\n    #include <stdlib.h>\\n    #include <string.h>\\n\\n    /* Us\"}]","[{\"text\":\"e POSIX headers.  If they are not available, we use the substitute\\n       provided by gnulib.  */\\n    #include <getopt.h>\\n    #include <unistd.h>\\n\\n    /* Internationalization.  */\\n    #include \\\"gettext.h\\\"\\n    #define _(str) gettext (str)\\n    #define N_(str) gettext_\"}]","[{\"text\":\"noop (str)\\n\\n    /* Check for errors on write.  */\\n    #include \\\"closeout.h\\\"\\n\\n    #endif /* HELLO_SYSTEM_H */\\n\\n------------------------------------------------------------------------\\n\\nNext: GNU Free Documentation License, Previous: A Sample Program, Up:\\nTop   [Conte\"}]","[{\"text\":\"nts][Index]\\n\\n\\nAppendix A Overflow\\n\\n[This appendix, written principally by Paul Eggert, is from the GNU\\nAutoconf manual. We thought that it would be helpful to include here.\\n–TJR]\\n\\nIn practice many portable C programs assume that signed integer overflow\\nwraps around \"}]","[{\"text\":\"reliably using two’s complement arithmetic. Yet the C\\nstandard says that program behavior is undefined on overflow, and in a\\nfew cases C programs do not work on some modern implementations because\\ntheir overflows do not wrap around as their authors expected.\\nConvers\"}]","[{\"text\":\"ely, in signed integer remainder, the C standard requires\\noverflow behavior that is commonly not implemented.\\n\\n  -------------------------------- ---- ---------------------------------------------\\n  • Integer Overflow Basics:            Why integer overflow is a pro\"}]","[{\"text\":\"blem\\n  • Signed Overflow Examples:           Examples of code assuming wraparound\\n  • Optimization and Wraparound:        Optimizations that break uses of wraparound\\n  • Signed Overflow Advice:             Practical advice for signed overflow issues\\n  • Signed Integ\"}]","[{\"text\":\"er Division:            INT_MIN / -1 and INT_MIN % -1\\n  -------------------------------- ---- ---------------------------------------------\\n\\n------------------------------------------------------------------------\\n\\nNext: Signed Overflow Examples, Up: Overflow   [Con\"}]","[{\"text\":\"tents][Index]\\n\\nA.1 Basics of Integer Overflow\\n\\nIn languages like C, unsigned integer overflow reliably wraps around;\\ne.g., UINT_MAX + 1 yields zero. This is guaranteed by the C standard and\\nis portable in practice, unless you specify aggressive, nonstandard\\noptimiza\"}]","[{\"text\":\"tion options suitable only for special applications.\\n\\nIn contrast, the C standard says that signed integer overflow leads to\\nundefined behavior where a program can do anything, including dumping\\ncore or overrunning a buffer. The misbehavior can even precede the\\nover\"}]","[{\"text\":\"flow. Such an overflow can occur during addition, subtraction,\\nmultiplication, division, and left shift.\\n\\nDespite this requirement of the standard, many C programs assume that\\nsigned integer overflow silently wraps around modulo a power of two,\\nusing two’s complemen\"}]","[{\"text\":\"t arithmetic, so long as you cast the resulting\\nvalue to a signed integer type or store it into a signed integer\\nvariable. If you use conservative optimization flags, such programs are\\ngenerally portable to the vast majority of modern platforms, with a few\\nexception\"}]","[{\"text\":\"s discussed later.\\n\\nFor historical reasons the C standard also allows implementations with\\nones’ complement or signed magnitude arithmetic, but it is safe to\\nassume two’s complement nowadays.\\n\\nAlso, overflow can occur when converting an out-of-range value to a\\nsigne\"}]","[{\"text\":\"d integer type. Here a standard implementation must define what\\nhappens, but this might include raising an exception. In practice all\\nknown implementations support silent wraparound in this case, so you\\nneed not worry about other possibilities.\\n\\n--------------------\"}]","[{\"text\":\"----------------------------------------------------\\n\\nNext: Optimization and Wraparound, Previous: Integer Overflow Basics,\\nUp: Overflow   [Contents][Index]\\n\\nA.2 Examples of Code Assuming Wraparound Overflow\\n\\nThere has long been a tension between what the C standar\"}]","[{\"text\":\"d requires for\\nsigned integer overflow, and what C programs commonly assume. The\\nstandard allows aggressive optimizations based on assumptions that\\noverflow never occurs, but many practical C programs rely on overflow\\nwrapping around. These programs do not conform t\"}]","[{\"text\":\"o the standard, but they\\ncommonly work in practice because compiler writers are understandably\\nreluctant to implement optimizations that would break many programs,\\nunless perhaps a user specifies aggressive optimization.\\n\\nThe C Standard says that if a program has si\"}]","[{\"text\":\"gned integer overflow its\\nbehavior is undefined, and the undefined behavior can even precede the\\noverflow. To take an extreme example:\\n\\n    if (password == expected_password)\\n      allow_superuser_privileges ();\\n    else if (counter++ == INT_MAX)\\n      abort ();\"}]","[{\"text\":\"\\n    else\\n      printf (\\\"%d password mismatches\\\\n\\\", counter);\\n\\nIf the int variable counter equals INT_MAX, counter++ must overflow and\\nthe behavior is undefined, so the C standard allows the compiler to\\noptimize away the test against INT_MAX and the abort call. Wors\"}]","[{\"text\":\"e, if an\\nearlier bug in the program lets the compiler deduce that\\ncounter == INT_MAX or that counter previously overflowed, the C standard\\nallows the compiler to optimize away the password test and generate code\\nthat allows superuser privileges unconditionally.\\n\\nDes\"}]","[{\"text\":\"pite this requirement by the standard, it has long been common for C\\ncode to assume wraparound arithmetic after signed overflow, and all\\nknown practical C implementations support some C idioms that assume\\nwraparound signed arithmetic, even if the idioms do not confo\"}]","[{\"text\":\"rm strictly\\nto the standard. If your code looks like the following examples it will\\nalmost surely work with real-world compilers.\\n\\nHere is an example derived from the 7th Edition Unix implementation of\\natoi (1979-01-10):\\n\\n    char *p;\\n    int f, n;\\n    …\\n    while (\"}]","[{\"text\":\"*p >= '0' && *p <= '9')\\n      n = n * 10 + *p++ - '0';\\n    return (f ? -n : n);\\n\\nEven if the input string is in range, on most modern machines this has\\nsigned overflow when computing the most negative integer (the -n\\noverflows) or a value near an extreme integer (th\"}]","[{\"text\":\"e first + overflows).\\n\\nHere is another example, derived from the 7th Edition implementation of\\nrand (1979-01-10). Here the programmer expects both multiplication and\\naddition to wrap on overflow:\\n\\n    static long int randx = 1;\\n    …\\n    randx = randx * 1103515245 \"}]","[{\"text\":\"+ 12345;\\n    return (randx >> 16) & 077777;\\n\\nIn the following example, derived from the GNU C Library 2.5\\nimplementation of mktime (2006-09-09), the code assumes wraparound\\narithmetic in + to detect signed overflow:\\n\\n    time_t t, t1, t2;\\n    int sec_requested, sec_\"}]","[{\"text\":\"adjustment;\\n    …\\n    t1 = t + sec_requested;\\n    t2 = t1 + sec_adjustment;\\n    if (((t1 < t) != (sec_requested < 0))\\n        || ((t2 < t1) != (sec_adjustment < 0)))\\n      return -1;\\n\\nIf your code looks like these examples, it is probably safe even though\\nit does no\"}]","[{\"text\":\"t strictly conform to the C standard. This might lead one to\\nbelieve that one can generally assume wraparound on overflow, but that\\nis not always true, as can be seen in the next section.\\n\\n------------------------------------------------------------------------\\n\\nNex\"}]","[{\"text\":\"t: Signed Overflow Advice, Previous: Signed Overflow Examples, Up:\\nOverflow   [Contents][Index]\\n\\nA.3 Optimizations That Break Wraparound Arithmetic\\n\\nCompilers sometimes generate code that is incompatible with wraparound\\ninteger arithmetic. A simple example is an alg\"}]","[{\"text\":\"ebraic simplification: a\\ncompiler might translate (i * 2000) / 1000 to i * 2 because it assumes\\nthat i * 2000 does not overflow. The translation is not equivalent to\\nthe original when overflow occurs: e.g., in the typical case of 32-bit\\nsigned two’s complement wrapa\"}]","[{\"text\":\"round int, if i has type int and value\\n1073742, the original expression returns -2147483 but the optimized\\nversion returns the mathematically correct value 2147484.\\n\\nMore subtly, loop induction optimizations often exploit the undefined\\nbehavior of signed overflow. C\"}]","[{\"text\":\"onsider the following contrived function\\nsumc:\\n\\n    int\\n    sumc (int lo, int hi)\\n    {\\n      int sum = 0;\\n      int i;\\n      for (i = lo; i <= hi; i++)\\n        sum ^= i * 53;\\n      return sum;\\n    }\\n\\nTo avoid multiplying by 53 each time through the loop, an optimiz\"}]","[{\"text\":\"ing\\ncompiler might internally transform sumc to the equivalent of the\\nfollowing:\\n\\n    int\\n    transformed_sumc (int lo, int hi)\\n    {\\n      int sum = 0;\\n      int hic = hi * 53;\\n      int ic;\\n      for (ic = lo * 53; ic <= hic; ic += 53)\\n        sum ^= ic;\\n      ret\"}]","[{\"text\":\"urn sum;\\n    }\\n\\nThis transformation is allowed by the C standard, but it is invalid for\\nwraparound arithmetic when INT_MAX / 53 < hi, because then the overflow\\nin computing expressions like hi * 53 can cause the expression i <= hi\\nto yield a different value from th\"}]","[{\"text\":\"e transformed expression ic <= hic.\\n\\nFor this reason, compilers that use loop induction and similar\\ntechniques often do not support reliable wraparound arithmetic when a\\nloop induction variable like ic is involved. Since loop induction\\nvariables are generated by th\"}]","[{\"text\":\"e compiler, and are not visible in the\\nsource code, it is not always trivial to say whether the problem affects\\nyour code.\\n\\nHardly any code actually depends on wraparound arithmetic in cases like\\nthese, so in practice these loop induction optimizations are almost\\nal\"}]","[{\"text\":\"ways useful. However, edge cases in this area can cause problems. For\\nexample:\\n\\n    int j;\\n    for (j = 1; 0 < j; j *= 2)\\n      test (j);\\n\\nHere, the loop attempts to iterate through all powers of 2 that int can\\nrepresent, but the C standard allows a compiler to opti\"}]","[{\"text\":\"mize away the\\ncomparison and generate an infinite loop, under the argument that\\nbehavior is undefined on overflow. As of this writing this optimization\\nis not done by any production version of GCC with -O2, but it might be\\nperformed by other compilers, or by more ag\"}]","[{\"text\":\"gressive GCC optimization\\noptions, and the GCC developers have not decided whether it will\\ncontinue to work with GCC and -O2.\\n\\n------------------------------------------------------------------------\\n\\nNext: Signed Integer Division, Previous: Optimization and Wraparo\"}]","[{\"text\":\"und,\\nUp: Overflow   [Contents][Index]\\n\\nA.4 Practical Advice for Signed Overflow Issues\\n\\nIdeally the safest approach is to avoid signed integer overflow\\nentirely. For example, instead of multiplying two signed integers, you\\ncan convert them to unsigned integers, mult\"}]","[{\"text\":\"iply the unsigned values,\\nthen test whether the result is in signed range.\\n\\nRewriting code in this way will be inconvenient, though, particularly if\\nthe signed values might be negative. Also, it may hurt performance.\\nUsing unsigned arithmetic to check for overflow i\"}]","[{\"text\":\"s particularly painful\\nto do portably and efficiently when dealing with an integer type like\\nuid_t whose width and signedness vary from platform to platform.\\n\\nFurthermore, many C applications pervasively assume wraparound behavior\\nand typically it is not easy to fin\"}]","[{\"text\":\"d and remove all these assumptions.\\nHence it is often useful to maintain nonstandard code that assumes\\nwraparound on overflow, instead of rewriting the code. The rest of this\\nsection attempts to give practical advice for this situation.\\n\\nIf your code wants to detec\"}]","[{\"text\":\"t signed integer overflow in sum = a + b, it\\nis generally safe to use an expression like (sum < a) != (b < 0).\\n\\nIf your code uses a signed loop index, make sure that the index cannot\\noverflow, along with all signed expressions derived from the index. Here\\nis a contr\"}]","[{\"text\":\"ived example of problematic code with two instances of\\noverflow.\\n\\n    for (i = INT_MAX - 10; i <= INT_MAX; i++)\\n      if (i + 1 < 0)\\n        {\\n          report_overflow ();\\n          break;\\n        }\\n\\nBecause of the two overflows, a compiler might optimize away or\\nt\"}]","[{\"text\":\"ransform the two comparisons in a way that is incompatible with the\\nwraparound assumption.\\n\\nIf your code uses an expression like (i * 2000) / 1000 and you actually\\nwant the multiplication to wrap around on overflow, use unsigned\\narithmetic to do it, e.g., ((int) (i \"}]","[{\"text\":\"* 2000u)) / 1000.\\n\\nIf your code assumes wraparound behavior and you want to insulate it\\nagainst any GCC optimizations that would fail to support that behavior,\\nyou should use GCC’s -fwrapv option, which causes signed overflow to\\nwrap around reliably (except for divi\"}]","[{\"text\":\"sion and remainder, as discussed in\\nthe next section).\\n\\nIf you need to port to platforms where signed integer overflow does not\\nreliably wrap around (e.g., due to hardware overflow checking, or to\\nhighly aggressive optimizations), you should consider debugging with\"}]","[{\"text\":\"\\nGCC’s -ftrapv option, which causes signed overflow to raise an\\nexception.\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Signed Overflow Advice, Up: Overflow   [Contents][Index]\\n\\nA.5 Signed Integer Division and Integer Overflow\"}]","[{\"text\":\"\\n\\nOverflow in signed integer division is not always harmless: for example,\\non CPUs of the i386 family, dividing INT_MIN by -1 yields a SIGFPE\\nsignal which by default terminates the program. Worse, taking the\\nremainder of these two values typically yields the same si\"}]","[{\"text\":\"gnal on these\\nCPUs, even though the C standard requires INT_MIN % -1 to yield zero\\nbecause the expression does not overflow.\\n\\n------------------------------------------------------------------------\\n\\nNext: Index, Previous: Overflow, Up: Top   [Contents][Index]\\n\\n\\nGN\"}]","[{\"text\":\"U Free Documentation License\\n\\nVersion 1.3, 3 November 2008\\n\\n    Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.\\n    http://fsf.org/\\n\\n    Everyone is permitted to copy and distribute verbatim copies\\n    of this license document, but changing i\"}]","[{\"text\":\"t is not allowed.\\n\\n1.  PREAMBLE\\n\\n    The purpose of this License is to make a manual, textbook, or other\\n    functional and useful document _free_ in the sense of freedom: to\\n    assure everyone the effective freedom to copy and redistribute it,\\n    with or without \"}]","[{\"text\":\"modifying it, either commercially or\\n    noncommercially. Secondarily, this License preserves for the author\\n    and publisher a way to get credit for their work, while not being\\n    considered responsible for modifications made by others.\\n\\n    This License is a kin\"}]","[{\"text\":\"d of “copyleft”, which means that derivative\\n    works of the document must themselves be free in the same sense. It\\n    complements the GNU General Public License, which is a copyleft\\n    license designed for free software.\\n\\n    We have designed this License in ord\"}]","[{\"text\":\"er to use it for manuals for\\n    free software, because free software needs free documentation: a\\n    free program should come with manuals providing the same freedoms\\n    that the software does. But this License is not limited to software\\n    manuals; it can be use\"}]","[{\"text\":\"d for any textual work, regardless of subject\\n    matter or whether it is published as a printed book. We recommend\\n    this License principally for works whose purpose is instruction or\\n    reference.\\n\\n2.  APPLICABILITY AND DEFINITIONS\\n\\n    This License applies to \"}]","[{\"text\":\"any manual or other work, in any medium,\\n    that contains a notice placed by the copyright holder saying it can\\n    be distributed under the terms of this License. Such a notice grants\\n    a world-wide, royalty-free license, unlimited in duration, to use\\n    that w\"}]","[{\"text\":\"ork under the conditions stated herein. The “Document”, below,\\n    refers to any such manual or work. Any member of the public is a\\n    licensee, and is addressed as “you”. You accept the license if you\\n    copy, modify or distribute the work in a way requiring perm\"}]","[{\"text\":\"ission\\n    under copyright law.\\n\\n    A “Modified Version” of the Document means any work containing the\\n    Document or a portion of it, either copied verbatim, or with\\n    modifications and/or translated into another language.\\n\\n    A “Secondary Section” is a named \"}]","[{\"text\":\"appendix or a front-matter section\\n    of the Document that deals exclusively with the relationship of the\\n    publishers or authors of the Document to the Document’s overall\\n    subject (or to related matters) and contains nothing that could fall\\n    directly withi\"}]","[{\"text\":\"n that overall subject. (Thus, if the Document is in\\n    part a textbook of mathematics, a Secondary Section may not explain\\n    any mathematics.) The relationship could be a matter of historical\\n    connection with the subject or with related matters, or of legal,\"}]","[{\"text\":\"\\n    commercial, philosophical, ethical or political position regarding\\n    them.\\n\\n    The “Invariant Sections” are certain Secondary Sections whose titles\\n    are designated, as being those of Invariant Sections, in the notice\\n    that says that the Document is rel\"}]","[{\"text\":\"eased under this License. If a\\n    section does not fit the above definition of Secondary then it is\\n    not allowed to be designated as Invariant. The Document may contain\\n    zero Invariant Sections. If the Document does not identify any\\n    Invariant Sections the\"}]","[{\"text\":\"n there are none.\\n\\n    The “Cover Texts” are certain short passages of text that are\\n    listed, as Front-Cover Texts or Back-Cover Texts, in the notice that\\n    says that the Document is released under this License. A Front-Cover\\n    Text may be at most 5 words, an\"}]","[{\"text\":\"d a Back-Cover Text may be at most 25\\n    words.\\n\\n    A “Transparent” copy of the Document means a machine-readable copy,\\n    represented in a format whose specification is available to the\\n    general public, that is suitable for revising the document\\n    straightf\"}]","[{\"text\":\"orwardly with generic text editors or (for images composed\\n    of pixels) generic paint programs or (for drawings) some widely\\n    available drawing editor, and that is suitable for input to text\\n    formatters or for automatic translation to a variety of formats\"}]","[{\"text\":\"\\n    suitable for input to text formatters. A copy made in an otherwise\\n    Transparent file format whose markup, or absence of markup, has been\\n    arranged to thwart or discourage subsequent modification by readers\\n    is not Transparent. An image format is not Tr\"}]","[{\"text\":\"ansparent if used for\\n    any substantial amount of text. A copy that is not “Transparent” is\\n    called “Opaque”.\\n\\n    Examples of suitable formats for Transparent copies include plain\\n    ASCII without markup, Texinfo input format, LaTeX input format, SGML\\n    or \"}]","[{\"text\":\"XML using a publicly available DTD, and standard-conforming\\n    simple HTML, PostScript or PDF designed for human modification.\\n    Examples of transparent image formats include PNG, XCF and JPG.\\n    Opaque formats include proprietary formats that can be read and\"}]","[{\"text\":\"\\n    edited only by proprietary word processors, SGML or XML for which\\n    the DTD and/or processing tools are not generally available, and the\\n    machine-generated HTML, PostScript or PDF produced by some word\\n    processors for output purposes only.\\n\\n    The “Tit\"}]","[{\"text\":\"le Page” means, for a printed book, the title page itself,\\n    plus such following pages as are needed to hold, legibly, the\\n    material this License requires to appear in the title page. For\\n    works in formats which do not have any title page as such, “Title\"}]","[{\"text\":\"\\n    Page” means the text near the most prominent appearance of the\\n    work’s title, preceding the beginning of the body of the text.\\n\\n    The “publisher” means any person or entity that distributes copies\\n    of the Document to the public.\\n\\n    A section “Entitle\"}]","[{\"text\":\"d XYZ” means a named subunit of the Document whose\\n    title either is precisely XYZ or contains XYZ in parentheses\\n    following text that translates XYZ in another language. (Here XYZ\\n    stands for a specific section name mentioned below, such as\\n    “Acknowledge\"}]","[{\"text\":\"ments”, “Dedications”, “Endorsements”, or “History”.) To\\n    “Preserve the Title” of such a section when you modify the Document\\n    means that it remains a section “Entitled XYZ” according to this\\n    definition.\\n\\n    The Document may include Warranty Disclaimers n\"}]","[{\"text\":\"ext to the notice\\n    which states that this License applies to the Document. These\\n    Warranty Disclaimers are considered to be included by reference in\\n    this License, but only as regards disclaiming warranties: any other\\n    implication that these Warranty Dis\"}]","[{\"text\":\"claimers may have is void and has\\n    no effect on the meaning of this License.\\n\\n3.  VERBATIM COPYING\\n\\n    You may copy and distribute the Document in any medium, either\\n    commercially or noncommercially, provided that this License, the\\n    copyright notices, and \"}]","[{\"text\":\"the license notice saying this License\\n    applies to the Document are reproduced in all copies, and that you\\n    add no other conditions whatsoever to those of this License. You may\\n    not use technical measures to obstruct or control the reading or\\n    further co\"}]","[{\"text\":\"pying of the copies you make or distribute. However, you\\n    may accept compensation in exchange for copies. If you distribute a\\n    large enough number of copies you must also follow the conditions in\\n    section 3.\\n\\n    You may also lend copies, under the same con\"}]","[{\"text\":\"ditions stated above,\\n    and you may publicly display copies.\\n\\n4.  COPYING IN QUANTITY\\n\\n    If you publish printed copies (or copies in media that commonly have\\n    printed covers) of the Document, numbering more than 100, and the\\n    Document’s license notice requ\"}]","[{\"text\":\"ires Cover Texts, you must enclose the\\n    copies in covers that carry, clearly and legibly, all these Cover\\n    Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on\\n    the back cover. Both covers must also clearly and legibly identify\\n    you as th\"}]","[{\"text\":\"e publisher of these copies. The front cover must present\\n    the full title with all words of the title equally prominent and\\n    visible. You may add other material on the covers in addition.\\n    Copying with changes limited to the covers, as long as they preserve\"}]","[{\"text\":\"\\n    the title of the Document and satisfy these conditions, can be\\n    treated as verbatim copying in other respects.\\n\\n    If the required texts for either cover are too voluminous to fit\\n    legibly, you should put the first ones listed (as many as fit\\n    reasona\"}]","[{\"text\":\"bly) on the actual cover, and continue the rest onto adjacent\\n    pages.\\n\\n    If you publish or distribute Opaque copies of the Document numbering\\n    more than 100, you must either include a machine-readable\\n    Transparent copy along with each Opaque copy, or stat\"}]","[{\"text\":\"e in or with\\n    each Opaque copy a computer-network location from which the general\\n    network-using public has access to download using public-standard\\n    network protocols a complete Transparent copy of the Document, free\\n    of added material. If you use the l\"}]","[{\"text\":\"atter option, you must take\\n    reasonably prudent steps, when you begin distribution of Opaque\\n    copies in quantity, to ensure that this Transparent copy will remain\\n    thus accessible at the stated location until at least one year after\\n    the last time you di\"}]","[{\"text\":\"stribute an Opaque copy (directly or through\\n    your agents or retailers) of that edition to the public.\\n\\n    It is requested, but not required, that you contact the authors of\\n    the Document well before redistributing any large number of copies,\\n    to give the\"}]","[{\"text\":\"m a chance to provide you with an updated version of the\\n    Document.\\n\\n5.  MODIFICATIONS\\n\\n    You may copy and distribute a Modified Version of the Document under\\n    the conditions of sections 2 and 3 above, provided that you release\\n    the Modified Version unde\"}]","[{\"text\":\"r precisely this License, with the Modified\\n    Version filling the role of the Document, thus licensing\\n    distribution and modification of the Modified Version to whoever\\n    possesses a copy of it. In addition, you must do these things in the\\n    Modified Versio\"}]","[{\"text\":\"n:\\n\\n    1.  Use in the Title Page (and on the covers, if any) a title\\n        distinct from that of the Document, and from those of previous\\n        versions (which should, if there were any, be listed in the\\n        History section of the Document). You may use th\"}]","[{\"text\":\"e same title as\\n        a previous version if the original publisher of that version\\n        gives permission.\\n    2.  List on the Title Page, as authors, one or more persons or\\n        entities responsible for authorship of the modifications in the\\n        Modifie\"}]","[{\"text\":\"d Version, together with at least five of the principal\\n        authors of the Document (all of its principal authors, if it has\\n        fewer than five), unless they release you from this requirement.\\n    3.  State on the Title page the name of the publisher of the\"}]","[{\"text\":\"\\n        Modified Version, as the publisher.\\n    4.  Preserve all the copyright notices of the Document.\\n    5.  Add an appropriate copyright notice for your modifications\\n        adjacent to the other copyright notices.\\n    6.  Include, immediately after the copyri\"}]","[{\"text\":\"ght notices, a license\\n        notice giving the public permission to use the Modified Version\\n        under the terms of this License, in the form shown in the\\n        Addendum below.\\n    7.  Preserve in that license notice the full lists of Invariant\\n        Secti\"}]","[{\"text\":\"ons and required Cover Texts given in the Document’s\\n        license notice.\\n    8.  Include an unaltered copy of this License.\\n    9.  Preserve the section Entitled “History”, Preserve its Title, and\\n        add to it an item stating at least the title, year, new a\"}]","[{\"text\":\"uthors,\\n        and publisher of the Modified Version as given on the Title\\n        Page. If there is no section Entitled “History” in the Document,\\n        create one stating the title, year, authors, and publisher of\\n        the Document as given on its Title Page\"}]","[{\"text\":\", then add an item\\n        describing the Modified Version as stated in the previous\\n        sentence.\\n    10. Preserve the network location, if any, given in the Document for\\n        public access to a Transparent copy of the Document, and\\n        likewise the netw\"}]","[{\"text\":\"ork locations given in the Document for\\n        previous versions it was based on. These may be placed in the\\n        “History” section. You may omit a network location for a work\\n        that was published at least four years before the Document\\n        itself, or \"}]","[{\"text\":\"if the original publisher of the version it refers to\\n        gives permission.\\n    11. For any section Entitled “Acknowledgements” or “Dedications”,\\n        Preserve the Title of the section, and preserve in the section\\n        all the substance and tone of each o\"}]","[{\"text\":\"f the contributor\\n        acknowledgements and/or dedications given therein.\\n    12. Preserve all the Invariant Sections of the Document, unaltered\\n        in their text and in their titles. Section numbers or the\\n        equivalent are not considered part of the se\"}]","[{\"text\":\"ction titles.\\n    13. Delete any section Entitled “Endorsements”. Such a section may\\n        not be included in the Modified Version.\\n    14. Do not retitle any existing section to be Entitled\\n        “Endorsements” or to conflict in title with any Invariant\"}]","[{\"text\":\"\\n        Section.\\n    15. Preserve any Warranty Disclaimers.\\n\\n    If the Modified Version includes new front-matter sections or\\n    appendices that qualify as Secondary Sections and contain no\\n    material copied from the Document, you may at your option designate\"}]","[{\"text\":\"\\n    some or all of these sections as invariant. To do this, add their\\n    titles to the list of Invariant Sections in the Modified Version’s\\n    license notice. These titles must be distinct from any other section\\n    titles.\\n\\n    You may add a section Entitled “En\"}]","[{\"text\":\"dorsements”, provided it contains\\n    nothing but endorsements of your Modified Version by various\\n    parties—for example, statements of peer review or that the text has\\n    been approved by an organization as the authoritative definition of\\n    a standard.\\n\\n    Yo\"}]","[{\"text\":\"u may add a passage of up to five words as a Front-Cover Text, and\\n    a passage of up to 25 words as a Back-Cover Text, to the end of the\\n    list of Cover Texts in the Modified Version. Only one passage of\\n    Front-Cover Text and one of Back-Cover Text may be add\"}]","[{\"text\":\"ed by (or\\n    through arrangements made by) any one entity. If the Document\\n    already includes a cover text for the same cover, previously added\\n    by you or by arrangement made by the same entity you are acting on\\n    behalf of, you may not add another; but you \"}]","[{\"text\":\"may replace the old one,\\n    on explicit permission from the previous publisher that added the\\n    old one.\\n\\n    The author(s) and publisher(s) of the Document do not by this\\n    License give permission to use their names for publicity for or to\\n    assert or imply \"}]","[{\"text\":\"endorsement of any Modified Version.\\n\\n6.  COMBINING DOCUMENTS\\n\\n    You may combine the Document with other documents released under\\n    this License, under the terms defined in section 4 above for\\n    modified versions, provided that you include in the combination a\"}]","[{\"text\":\"ll\\n    of the Invariant Sections of all of the original documents,\\n    unmodified, and list them all as Invariant Sections of your combined\\n    work in its license notice, and that you preserve all their Warranty\\n    Disclaimers.\\n\\n    The combined work need only con\"}]","[{\"text\":\"tain one copy of this License, and\\n    multiple identical Invariant Sections may be replaced with a single\\n    copy. If there are multiple Invariant Sections with the same name\\n    but different contents, make the title of each such section unique\\n    by adding at t\"}]","[{\"text\":\"he end of it, in parentheses, the name of the original\\n    author or publisher of that section if known, or else a unique\\n    number. Make the same adjustment to the section titles in the list\\n    of Invariant Sections in the license notice of the combined work.\"}]","[{\"text\":\"\\n\\n    In the combination, you must combine any sections Entitled “History”\\n    in the various original documents, forming one section Entitled\\n    “History”; likewise combine any sections Entitled\\n    “Acknowledgements”, and any sections Entitled “Dedications”. You\"}]","[{\"text\":\"\\n    must delete all sections Entitled “Endorsements.”\\n\\n7.  COLLECTIONS OF DOCUMENTS\\n\\n    You may make a collection consisting of the Document and other\\n    documents released under this License, and replace the individual\\n    copies of this License in the various d\"}]","[{\"text\":\"ocuments with a single copy\\n    that is included in the collection, provided that you follow the\\n    rules of this License for verbatim copying of each of the documents\\n    in all other respects.\\n\\n    You may extract a single document from such a collection, and\"}]","[{\"text\":\"\\n    distribute it individually under this License, provided you insert a\\n    copy of this License into the extracted document, and follow this\\n    License in all other respects regarding verbatim copying of that\\n    document.\\n\\n8.  AGGREGATION WITH INDEPENDENT WORKS\"}]","[{\"text\":\"\\n\\n    A compilation of the Document or its derivatives with other separate\\n    and independent documents or works, in or on a volume of a storage\\n    or distribution medium, is called an “aggregate” if the copyright\\n    resulting from the compilation is not used to \"}]","[{\"text\":\"limit the legal rights\\n    of the compilation’s users beyond what the individual works permit.\\n    When the Document is included in an aggregate, this License does not\\n    apply to the other works in the aggregate which are not themselves\\n    derivative works of th\"}]","[{\"text\":\"e Document.\\n\\n    If the Cover Text requirement of section 3 is applicable to these\\n    copies of the Document, then if the Document is less than one half\\n    of the entire aggregate, the Document’s Cover Texts may be placed on\\n    covers that bracket the Document wi\"}]","[{\"text\":\"thin the aggregate, or the\\n    electronic equivalent of covers if the Document is in electronic\\n    form. Otherwise they must appear on printed covers that bracket the\\n    whole aggregate.\\n\\n9.  TRANSLATION\\n\\n    Translation is considered a kind of modification, so yo\"}]","[{\"text\":\"u may\\n    distribute translations of the Document under the terms of section\\n    4. Replacing Invariant Sections with translations requires special\\n    permission from their copyright holders, but you may include\\n    translations of some or all Invariant Sections i\"}]","[{\"text\":\"n addition to the\\n    original versions of these Invariant Sections. You may include a\\n    translation of this License, and all the license notices in the\\n    Document, and any Warranty Disclaimers, provided that you also\\n    include the original English version of \"}]","[{\"text\":\"this License and the\\n    original versions of those notices and disclaimers. In case of a\\n    disagreement between the translation and the original version of\\n    this License or a notice or disclaimer, the original version will\\n    prevail.\\n\\n    If a section in th\"}]","[{\"text\":\"e Document is Entitled “Acknowledgements”,\\n    “Dedications”, or “History”, the requirement (section 4) to Preserve\\n    its Title (section 1) will typically require changing the actual\\n    title.\\n\\n10. TERMINATION\\n\\n    You may not copy, modify, sublicense, or distrib\"}]","[{\"text\":\"ute the Document\\n    except as expressly provided under this License. Any attempt\\n    otherwise to copy, modify, sublicense, or distribute it is void, and\\n    will automatically terminate your rights under this License.\\n\\n    However, if you cease all violation of th\"}]","[{\"text\":\"is License, then your\\n    license from a particular copyright holder is reinstated (a)\\n    provisionally, unless and until the copyright holder explicitly and\\n    finally terminates your license, and (b) permanently, if the\\n    copyright holder fails to notify you o\"}]","[{\"text\":\"f the violation by some\\n    reasonable means prior to 60 days after the cessation.\\n\\n    Moreover, your license from a particular copyright holder is\\n    reinstated permanently if the copyright holder notifies you of the\\n    violation by some reasonable means, this i\"}]","[{\"text\":\"s the first time you have\\n    received notice of violation of this License (for any work) from\\n    that copyright holder, and you cure the violation prior to 30 days\\n    after your receipt of the notice.\\n\\n    Termination of your rights under this section does not te\"}]","[{\"text\":\"rminate the\\n    licenses of parties who have received copies or rights from you\\n    under this License. If your rights have been terminated and not\\n    permanently reinstated, receipt of a copy of some or all of the same\\n    material does not give you any rights to \"}]","[{\"text\":\"use it.\\n\\n11. FUTURE REVISIONS OF THIS LICENSE\\n\\n    The Free Software Foundation may publish new, revised versions of\\n    the GNU Free Documentation License from time to time. Such new\\n    versions will be similar in spirit to the present version, but may\\n    differ \"}]","[{\"text\":\"in detail to address new problems or concerns. See\\n    http://www.gnu.org/copyleft/.\\n\\n    Each version of the License is given a distinguishing version\\n    number. If the Document specifies that a particular numbered version\\n    of this License “or any later version\"}]","[{\"text\":\"” applies to it, you have the\\n    option of following the terms and conditions either of that\\n    specified version or of any later version that has been published\\n    (not as a draft) by the Free Software Foundation. If the Document\\n    does not specify a version n\"}]","[{\"text\":\"umber of this License, you may choose\\n    any version ever published (not as a draft) by the Free Software\\n    Foundation. If the Document specifies that a proxy can decide which\\n    future versions of this License can be used, that proxy’s public\\n    statement of a\"}]","[{\"text\":\"cceptance of a version permanently authorizes you to\\n    choose that version for the Document.\\n\\n12. RELICENSING\\n\\n    “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any\\n    World Wide Web server that publishes copyrightable works and also\\n    provide\"}]","[{\"text\":\"s prominent facilities for anybody to edit those works. A\\n    public wiki that anybody can edit is an example of such a server. A\\n    “Massive Multiauthor Collaboration” (or “MMC”) contained in the site\\n    means any set of copyrightable works thus published on the \"}]","[{\"text\":\"MMC site.\\n\\n    “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0\\n    license published by Creative Commons Corporation, a not-for-profit\\n    corporation with a principal place of business in San Francisco,\\n    California, as well as future copyleft v\"}]","[{\"text\":\"ersions of that license\\n    published by that same organization.\\n\\n    “Incorporate” means to publish or republish a Document, in whole or\\n    in part, as part of another Document.\\n\\n    An MMC is “eligible for relicensing” if it is licensed under this\\n    License, an\"}]","[{\"text\":\"d if all works that were first published under this\\n    License somewhere other than this MMC, and subsequently incorporated\\n    in whole or in part into the MMC, (1) had no cover texts or\\n    invariant sections, and (2) were thus incorporated prior to November\"}]","[{\"text\":\"\\n    1, 2008.\\n\\n    The operator of an MMC Site may republish an MMC contained in the\\n    site under CC-BY-SA on the same site at any time before August 1,\\n    2009, provided the MMC is eligible for relicensing.\\n\\nADDENDUM: How to use this License for your documents\"}]","[{\"text\":\"\\n\\nTo use this License in a document you have written, include a copy of\\nthe License in the document and put the following copyright and license\\nnotices just after the title page:\\n\\n      Copyright (C)  year  your name.\\n      Permission is granted to copy, distribute \"}]","[{\"text\":\"and/or modify this document\\n      under the terms of the GNU Free Documentation License, Version 1.3\\n      or any later version published by the Free Software Foundation;\\n      with no Invariant Sections, no Front-Cover Texts, and no Back-Cover\\n      Texts.  A copy \"}]","[{\"text\":\"of the license is included in the section entitled ``GNU\\n      Free Documentation License''.\\n\\nIf you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,\\nreplace the “with…Texts.” line with this:\\n\\n        with the Invariant Sections being list their titl\"}]","[{\"text\":\"es, with\\n        the Front-Cover Texts being list, and with the Back-Cover Texts\\n        being list.\\n\\nIf you have Invariant Sections without Cover Texts, or some other\\ncombination of the three, merge those two alternatives to suit the\\nsituation.\\n\\nIf your document co\"}]","[{\"text\":\"ntains nontrivial examples of program code, we\\nrecommend releasing these examples in parallel under your choice of free\\nsoftware license, such as the GNU General Public License, to permit\\ntheir use in free software.\\n\\n-------------------------------------------------\"}]","[{\"text\":\"-----------------------\\n\\nPrevious: GNU Free Documentation License, Up: Top   [Contents][Index]\\n\\n\\nIndex\\n\\n  ------------ -----------------------------------------------------------------------------------------\\n  Jump to:     A   B   C   D   E   F   G   H   I   K   \"}]","[{\"text\":\"L   M   N   O   P   Q   R   S   T   U   V   W  \\n  ------------ -----------------------------------------------------------------------------------------\\n\\nIndex Entry\\n\\n \\n\\nSection\\n\\n------------------------------------------------------------------------\\n\\nA\\n\\naccessing \"}]","[{\"text\":\"array elements:\\n\\n \\n\\nAccessing Array Elements\\n\\naccessing structure members:\\n\\n \\n\\nAccessing Structure Members\\n\\naccessing union members:\\n\\n \\n\\nAccessing Union Members\\n\\narithmetic operators:\\n\\n \\n\\nArithmetic Operators\\n\\narray elements, accessing:\\n\\n \\n\\nAccessing Array Elements\"}]","[{\"text\":\"\\n\\narray subscripts:\\n\\n \\n\\nArray Subscripts\\n\\narrays:\\n\\n \\n\\nArrays\\n\\narrays as strings:\\n\\n \\n\\nArrays as Strings\\n\\narrays of structures:\\n\\n \\n\\nArrays of Structures\\n\\narrays of unions:\\n\\n \\n\\nArrays of Unions\\n\\narrays, declaring:\\n\\n \\n\\nDeclaring Arrays\\n\\narrays, initializing:\\n\\n \\n\\nInitial\"}]","[{\"text\":\"izing Arrays\\n\\narrays, multidimensional:\\n\\n \\n\\nMultidimensional Arrays\\n\\nassignment operators:\\n\\n \\n\\nAssignment Operators\\n\\nauto storage class specifier:\\n\\n \\n\\nStorage Class Specifiers\\n\\n------------------------------------------------------------------------\\n\\nB\\n\\nbit fields:\"}]","[{\"text\":\"\\n\\n \\n\\nBit Fields\\n\\nbit shifting:\\n\\n \\n\\nBit Shifting\\n\\nbitwise logical operators:\\n\\n \\n\\nBitwise Logical Operators\\n\\nblocks:\\n\\n \\n\\nBlocks\\n\\nbreak statement:\\n\\n \\n\\nThe break Statement\\n\\n------------------------------------------------------------------------\\n\\nC\\n\\ncalling functions:\"}]","[{\"text\":\"\\n\\n \\n\\nCalling Functions\\n\\ncasts:\\n\\n \\n\\nType Casts\\n\\nchar data type:\\n\\n \\n\\nInteger Types\\n\\ncharacter constants:\\n\\n \\n\\nCharacter Constants\\n\\ncomma operator:\\n\\n \\n\\nThe Comma Operator\\n\\ncomparison operators:\\n\\n \\n\\nComparison Operators\\n\\ncomplex conjugation:\\n\\n \\n\\nComplex Conjugation\\n\\ncomp\"}]","[{\"text\":\"lex number types:\\n\\n \\n\\nComplex Number Types\\n\\ncompound statements:\\n\\n \\n\\nBlocks\\n\\nconditional expressions:\\n\\n \\n\\nConditional Expressions\\n\\nconjugation:\\n\\n \\n\\nComplex Conjugation\\n\\nconst type qualifier:\\n\\n \\n\\nType Qualifiers\\n\\nconstants:\\n\\n \\n\\nConstants\\n\\nconstants, character:\\n\\n \\n\\nCh\"}]","[{\"text\":\"aracter Constants\\n\\nconstants, floating point:\\n\\n \\n\\nReal Number Constants\\n\\nconstants, integer:\\n\\n \\n\\nInteger Constants\\n\\nconstants, real number:\\n\\n \\n\\nReal Number Constants\\n\\ncontinue statement:\\n\\n \\n\\nThe continue Statement\\n\\n---------------------------------------------------\"}]","[{\"text\":\"---------------------\\n\\nD\\n\\ndata types:\\n\\n \\n\\nData Types\\n\\ndata types, array:\\n\\n \\n\\nArrays\\n\\ndata types, complex number:\\n\\n \\n\\nComplex Number Types\\n\\ndata types, enumeration:\\n\\n \\n\\nEnumerations\\n\\ndata types, floating point:\\n\\n \\n\\nReal Number Types\\n\\ndata types, integer:\\n\\n \\n\\nInteger \"}]","[{\"text\":\"Types\\n\\ndata types, pointer:\\n\\n \\n\\nPointers\\n\\ndata types, primitive:\\n\\n \\n\\nPrimitive Types\\n\\ndata types, real number:\\n\\n \\n\\nReal Number Types\\n\\ndata types, structure:\\n\\n \\n\\nStructures\\n\\ndata types, union:\\n\\n \\n\\nUnions\\n\\ndeclarations inside expressions:\\n\\n \\n\\nStatements and Declaratio\"}]","[{\"text\":\"ns in Expressions\\n\\ndeclarations, function:\\n\\n \\n\\nFunction Declarations\\n\\ndeclaring arrays:\\n\\n \\n\\nDeclaring Arrays\\n\\ndeclaring enumerations:\\n\\n \\n\\nDeclaring Enumerations\\n\\ndeclaring pointers:\\n\\n \\n\\nDeclaring Pointers\\n\\ndeclaring string arrays:\\n\\n \\n\\nArrays as Strings\\n\\ndeclaring st\"}]","[{\"text\":\"ructure variables:\\n\\n \\n\\nDeclaring Structure Variables\\n\\ndeclaring structure variables after definition:\\n\\n \\n\\nDeclaring Structure Variables After Definition\\n\\ndeclaring structure variables at definition:\\n\\n \\n\\nDeclaring Structure Variables at Definition\\n\\ndeclaring union va\"}]","[{\"text\":\"riables:\\n\\n \\n\\nDeclaring Union Variables\\n\\ndeclaring union variables after definition:\\n\\n \\n\\nDeclaring Union Variables After Definition\\n\\ndeclaring union variables at definition:\\n\\n \\n\\nDeclaring Union Variables at Definition\\n\\ndecrement operator:\\n\\n \\n\\nIncrementing and Decreme\"}]","[{\"text\":\"nting\\n\\ndefining enumerations:\\n\\n \\n\\nDefining Enumerations\\n\\ndefining structures:\\n\\n \\n\\nDefining Structures\\n\\ndefining unions:\\n\\n \\n\\nDefining Unions\\n\\ndefinitions, function:\\n\\n \\n\\nFunction Definitions\\n\\ndivision, integer:\\n\\n \\n\\nSigned Integer Division\\n\\ndo statement:\\n\\n \\n\\nThe do Sta\"}]","[{\"text\":\"tement\\n\\ndouble data type:\\n\\n \\n\\nReal Number Types\\n\\n------------------------------------------------------------------------\\n\\nE\\n\\nelse statements:\\n\\n \\n\\nThe if Statement\\n\\nenumerations:\\n\\n \\n\\nEnumerations\\n\\nenumerations, declaring:\\n\\n \\n\\nDeclaring Enumerations\\n\\nenumerations, de\"}]","[{\"text\":\"fining:\\n\\n \\n\\nDefining Enumerations\\n\\nenumerations, incomplete:\\n\\n \\n\\nIncomplete Types\\n\\nexit status:\\n\\n \\n\\nThe main Function\\n\\nEXIT_FAILURE:\\n\\n \\n\\nThe main Function\\n\\nEXIT_SUCCESS:\\n\\n \\n\\nThe main Function\\n\\nexpression statements:\\n\\n \\n\\nExpression Statements\\n\\nexpressions:\\n\\n \\n\\nExpres\"}]","[{\"text\":\"sions\\n\\nexpressions containing statements:\\n\\n \\n\\nStatements and Declarations in Expressions\\n\\nexpressions, conditional:\\n\\n \\n\\nConditional Expressions\\n\\nextern storage class specifier:\\n\\n \\n\\nStorage Class Specifiers\\n\\n-----------------------------------------------------------\"}]","[{\"text\":\"-------------\\n\\nF\\n\\nfields, bit:\\n\\n \\n\\nBit Fields\\n\\nfloat data type:\\n\\n \\n\\nReal Number Types\\n\\nfloating point constants:\\n\\n \\n\\nReal Number Constants\\n\\nfloating point types:\\n\\n \\n\\nReal Number Types\\n\\nfor statement:\\n\\n \\n\\nThe for Statement\\n\\nfunction calls, as expressions:\\n\\n \\n\\nFunctio\"}]","[{\"text\":\"n Calls as Expressions\\n\\nfunction declarations:\\n\\n \\n\\nFunction Declarations\\n\\nfunction definitions:\\n\\n \\n\\nFunction Definitions\\n\\nfunction parameter lists, variable length:\\n\\n \\n\\nVariable Length Parameter Lists\\n\\nfunction parameters:\\n\\n \\n\\nFunction Parameters\\n\\nfunction pointers\"}]","[{\"text\":\", calling through:\\n\\n \\n\\nCalling Functions Through Function Pointers\\n\\nfunction, main:\\n\\n \\n\\nThe main Function\\n\\nfunctions:\\n\\n \\n\\nFunctions\\n\\nfunctions, calling:\\n\\n \\n\\nCalling Functions\\n\\nfunctions, nested:\\n\\n \\n\\nNested Functions\\n\\nfunctions, recursive:\\n\\n \\n\\nRecursive Functions\\n\\nfu\"}]","[{\"text\":\"nctions, static:\\n\\n \\n\\nStatic Functions\\n\\n------------------------------------------------------------------------\\n\\nG\\n\\ngoto statement:\\n\\n \\n\\nThe goto Statement\\n\\n------------------------------------------------------------------------\\n\\nH\\n\\nhello program:\\n\\n \\n\\nA Sample Progr\"}]","[{\"text\":\"am\\n\\nhello.c:\\n\\n \\n\\nhello.c\\n\\n------------------------------------------------------------------------\\n\\nI\\n\\nidentifiers:\\n\\n \\n\\nIdentifiers\\n\\nif statements:\\n\\n \\n\\nThe if Statement\\n\\nincomplete types:\\n\\n \\n\\nIncomplete Types\\n\\nincrement operator:\\n\\n \\n\\nIncrementing and Decrementing\\n\\ni\"}]","[{\"text\":\"ndirect member access operator:\\n\\n \\n\\nMember Access Expressions\\n\\ninitializing arrays:\\n\\n \\n\\nInitializing Arrays\\n\\ninitializing pointers:\\n\\n \\n\\nInitializing Pointers\\n\\ninitializing string arrays:\\n\\n \\n\\nArrays as Strings\\n\\ninitializing structure members:\\n\\n \\n\\nInitializing Structu\"}]","[{\"text\":\"re Members\\n\\ninitializing union members:\\n\\n \\n\\nInitializing Union Members\\n\\nint data type:\\n\\n \\n\\nInteger Types\\n\\ninteger constants:\\n\\n \\n\\nInteger Constants\\n\\ninteger overflow:\\n\\n \\n\\nInteger Overflow Basics\\n\\ninteger overflow:\\n\\n \\n\\nSigned Overflow Examples\\n\\ninteger overflow:\\n\\n \\n\\nS\"}]","[{\"text\":\"igned Overflow Advice\\n\\ninteger types:\\n\\n \\n\\nInteger Types\\n\\n------------------------------------------------------------------------\\n\\nK\\n\\nkeywords:\\n\\n \\n\\nKeywords\\n\\n------------------------------------------------------------------------\\n\\nL\\n\\nlabeled statements:\\n\\n \\n\\nLabels\"}]","[{\"text\":\"\\n\\nlabels:\\n\\n \\n\\nLabels\\n\\nlexical elements:\\n\\n \\n\\nLexical Elements\\n\\nlogical operators:\\n\\n \\n\\nLogical Operators\\n\\nlogical operators, bitwise:\\n\\n \\n\\nBitwise Logical Operators\\n\\nlong double data type:\\n\\n \\n\\nReal Number Types\\n\\nlong int data type:\\n\\n \\n\\nInteger Types\\n\\nlong long int dat\"}]","[{\"text\":\"a type:\\n\\n \\n\\nInteger Types\\n\\nloop induction:\\n\\n \\n\\nOptimization and Wraparound\\n\\n------------------------------------------------------------------------\\n\\nM\\n\\nmacros, statements in expressions:\\n\\n \\n\\nStatements and Declarations in Expressions\\n\\nmain function:\\n\\n \\n\\nThe main Fu\"}]","[{\"text\":\"nction\\n\\nmember access expressions:\\n\\n \\n\\nMember Access Expressions\\n\\nmultidimensional arrays:\\n\\n \\n\\nMultidimensional Arrays\\n\\n------------------------------------------------------------------------\\n\\nN\\n\\nnested functions:\\n\\n \\n\\nNested Functions\\n\\nnull statement:\\n\\n \\n\\nThe Null \"}]","[{\"text\":\"Statement\\n\\n------------------------------------------------------------------------\\n\\nO\\n\\noperator precedence:\\n\\n \\n\\nOperator Precedence\\n\\noperator, decrement:\\n\\n \\n\\nIncrementing and Decrementing\\n\\noperator, increment:\\n\\n \\n\\nIncrementing and Decrementing\\n\\noperators:\\n\\n \\n\\nExpre\"}]","[{\"text\":\"ssions\\n\\noperators as lexical elements:\\n\\n \\n\\nOperators\\n\\noperators, arithmetic:\\n\\n \\n\\nArithmetic Operators\\n\\noperators, assignment:\\n\\n \\n\\nAssignment Operators\\n\\noperators, comparison:\\n\\n \\n\\nComparison Operators\\n\\noverflow, signed integer:\\n\\n \\n\\nInteger Overflow Basics\\n\\noverflow, \"}]","[{\"text\":\"signed integer:\\n\\n \\n\\nSigned Overflow Examples\\n\\noverflow, signed integer:\\n\\n \\n\\nSigned Overflow Advice\\n\\n------------------------------------------------------------------------\\n\\nP\\n\\nparameters lists, variable length:\\n\\n \\n\\nVariable Length Parameter Lists\\n\\nparameters, funct\"}]","[{\"text\":\"ion:\\n\\n \\n\\nFunction Parameters\\n\\npointer operators:\\n\\n \\n\\nPointer Operators\\n\\npointers:\\n\\n \\n\\nPointers\\n\\npointers to structures:\\n\\n \\n\\nPointers to Structures\\n\\npointers to unions:\\n\\n \\n\\nPointers to Unions\\n\\npointers, declaring:\\n\\n \\n\\nDeclaring Pointers\\n\\npointers, initializing:\\n\\n \\n\\nI\"}]","[{\"text\":\"nitializing Pointers\\n\\nprecedence, operator:\\n\\n \\n\\nOperator Precedence\\n\\npreface:\\n\\n \\n\\nPreface\\n\\nprimitive data types:\\n\\n \\n\\nPrimitive Types\\n\\nprogram structure:\\n\\n \\n\\nProgram Structure\\n\\n------------------------------------------------------------------------\\n\\nQ\\n\\nqualifiers, t\"}]","[{\"text\":\"ype:\\n\\n \\n\\nType Qualifiers\\n\\n------------------------------------------------------------------------\\n\\nR\\n\\nreal number constants:\\n\\n \\n\\nReal Number Constants\\n\\nreal number types:\\n\\n \\n\\nReal Number Types\\n\\nrecursive functions:\\n\\n \\n\\nRecursive Functions\\n\\nregister storage class sp\"}]","[{\"text\":\"ecifier:\\n\\n \\n\\nStorage Class Specifiers\\n\\nrenaming types:\\n\\n \\n\\nRenaming Types\\n\\nreturn statement:\\n\\n \\n\\nThe return Statement\\n\\nreturn value of main:\\n\\n \\n\\nThe main Function\\n\\n------------------------------------------------------------------------\\n\\nS\\n\\nsample program:\\n\\n \\n\\nA Sam\"}]","[{\"text\":\"ple Program\\n\\nscope:\\n\\n \\n\\nScope\\n\\nseparators:\\n\\n \\n\\nSeparators\\n\\nsequence point:\\n\\n \\n\\nSequence Points\\n\\nshifting:\\n\\n \\n\\nBit Shifting\\n\\nshort int data type:\\n\\n \\n\\nInteger Types\\n\\nside effect:\\n\\n \\n\\nSide Effects\\n\\nside effects, macro argument:\\n\\n \\n\\nStatements and Declarations in Expres\"}]","[{\"text\":\"sions\\n\\nsigned char data type:\\n\\n \\n\\nInteger Types\\n\\nsigned integer overflow:\\n\\n \\n\\nInteger Overflow Basics\\n\\nsigned integer overflow:\\n\\n \\n\\nSigned Overflow Examples\\n\\nsigned integer overflow:\\n\\n \\n\\nSigned Overflow Advice\\n\\nsize of structures:\\n\\n \\n\\nSize of Structures\\n\\nsize of uni\"}]","[{\"text\":\"ons:\\n\\n \\n\\nSize of Unions\\n\\nsizeof operator:\\n\\n \\n\\nThe sizeof Operator\\n\\nspecifiers, storage class:\\n\\n \\n\\nStorage Class Specifiers\\n\\nstatement, null:\\n\\n \\n\\nThe Null Statement\\n\\nstatements:\\n\\n \\n\\nStatements\\n\\nstatements inside expressions:\\n\\n \\n\\nStatements and Declarations in Express\"}]","[{\"text\":\"ions\\n\\nstatements, expression:\\n\\n \\n\\nExpression Statements\\n\\nstatements, labeled:\\n\\n \\n\\nLabels\\n\\nstatic functions:\\n\\n \\n\\nStatic Functions\\n\\nstatic linkage:\\n\\n \\n\\nStatic Functions\\n\\nstatic storage class specifier:\\n\\n \\n\\nStorage Class Specifiers\\n\\nstorage class specifiers:\\n\\n \\n\\nStorag\"}]","[{\"text\":\"e Class Specifiers\\n\\nstring arrays, declaring:\\n\\n \\n\\nArrays as Strings\\n\\nstring arrays, initializing:\\n\\n \\n\\nArrays as Strings\\n\\nstring constants:\\n\\n \\n\\nString Constants\\n\\nstring literals:\\n\\n \\n\\nString Constants\\n\\nstrings, arrays as:\\n\\n \\n\\nArrays as Strings\\n\\nstructure members, acce\"}]","[{\"text\":\"ssing:\\n\\n \\n\\nAccessing Structure Members\\n\\nstructure members, initializing:\\n\\n \\n\\nInitializing Structure Members\\n\\nstructure variables, declaring:\\n\\n \\n\\nDeclaring Structure Variables\\n\\nstructure variables, declaring after definition:\\n\\n \\n\\nDeclaring Structure Variables After D\"}]","[{\"text\":\"efinition\\n\\nstructure variables, declaring at definition:\\n\\n \\n\\nDeclaring Structure Variables at Definition\\n\\nstructure, program:\\n\\n \\n\\nProgram Structure\\n\\nstructures:\\n\\n \\n\\nStructures\\n\\nstructures, arrays of:\\n\\n \\n\\nArrays of Structures\\n\\nstructures, defining:\\n\\n \\n\\nDefining Struc\"}]","[{\"text\":\"tures\\n\\nstructures, incomplete:\\n\\n \\n\\nIncomplete Types\\n\\nstructures, pointers to:\\n\\n \\n\\nPointers to Structures\\n\\nstructures, size of:\\n\\n \\n\\nSize of Structures\\n\\nswitch statement:\\n\\n \\n\\nThe switch Statement\\n\\nsystem.h:\\n\\n \\n\\nsystem.h\\n\\n-----------------------------------------------\"}]","[{\"text\":\"-------------------------\\n\\nT\\n\\nternary operator:\\n\\n \\n\\nConditional Expressions\\n\\ntype casts:\\n\\n \\n\\nType Casts\\n\\ntype qualifiers:\\n\\n \\n\\nType Qualifiers\\n\\ntypedef statement:\\n\\n \\n\\nThe typedef Statement\\n\\ntypes:\\n\\n \\n\\nData Types\\n\\ntypes, array:\\n\\n \\n\\nArrays\\n\\ntypes, complex number:\\n\\n \\n\\nC\"}]","[{\"text\":\"omplex Number Types\\n\\ntypes, enumeration:\\n\\n \\n\\nEnumerations\\n\\ntypes, floating point:\\n\\n \\n\\nReal Number Types\\n\\ntypes, incomplete:\\n\\n \\n\\nIncomplete Types\\n\\ntypes, integer:\\n\\n \\n\\nInteger Types\\n\\ntypes, pointer:\\n\\n \\n\\nPointers\\n\\ntypes, primitive:\\n\\n \\n\\nPrimitive Types\\n\\ntypes, real numb\"}]","[{\"text\":\"er:\\n\\n \\n\\nReal Number Types\\n\\ntypes, renaming:\\n\\n \\n\\nRenaming Types\\n\\ntypes, structure:\\n\\n \\n\\nStructures\\n\\ntypes, union:\\n\\n \\n\\nUnions\\n\\n------------------------------------------------------------------------\\n\\nU\\n\\nunion members, accessing:\\n\\n \\n\\nAccessing Union Members\\n\\nunion memb\"}]","[{\"text\":\"ers, initializing:\\n\\n \\n\\nInitializing Union Members\\n\\nunion variables, declaring:\\n\\n \\n\\nDeclaring Union Variables\\n\\nunion variables, declaring after definition:\\n\\n \\n\\nDeclaring Union Variables After Definition\\n\\nunion variables, declaring at definition:\\n\\n \\n\\nDeclaring Union V\"}]","[{\"text\":\"ariables at Definition\\n\\nunions:\\n\\n \\n\\nUnions\\n\\nunions, arrays of:\\n\\n \\n\\nArrays of Unions\\n\\nunions, defining:\\n\\n \\n\\nDefining Unions\\n\\nunions, incomplete:\\n\\n \\n\\nIncomplete Types\\n\\nunions, pointers to:\\n\\n \\n\\nPointers to Unions\\n\\nunions, size of:\\n\\n \\n\\nSize of Unions\\n\\nunsigned char dat\"}]","[{\"text\":\"a type:\\n\\n \\n\\nInteger Types\\n\\nunsigned int data type:\\n\\n \\n\\nInteger Types\\n\\nunsigned long int data type:\\n\\n \\n\\nInteger Types\\n\\nunsigned long long int data type:\\n\\n \\n\\nInteger Types\\n\\nunsigned short int data type:\\n\\n \\n\\nInteger Types\\n\\nunspecified behaviour:\\n\\n \\n\\nSequence Points Con\"}]","[{\"text\":\"strain Expressions\\n\\n------------------------------------------------------------------------\\n\\nV\\n\\nvariable length parameter lists:\\n\\n \\n\\nVariable Length Parameter Lists\\n\\nvolatile type qualifier:\\n\\n \\n\\nType Qualifiers\\n\\n-----------------------------------------------------\"}]","[{\"text\":\"-------------------\\n\\nW\\n\\nwhile statement:\\n\\n \\n\\nThe while Statement\\n\\nwhite space:\\n\\n \\n\\nWhite Space\\n\\nwraparound arithmetic:\\n\\n \\n\\nInteger Overflow Basics\\n\\nwraparound arithmetic:\\n\\n \\n\\nSigned Overflow Examples\\n\\nwraparound arithmetic:\\n\\n \\n\\nSigned Overflow Advice\\n\\n--------------\"}]","[{\"text\":\"----------------------------------------------------------\\n\\n  ------------ -----------------------------------------------------------------------------------------\\n  Jump to:     A   B   C   D   E   F   G   H   I   K   L   M   N   O   P   Q   R   S   T   U   V   \"}]","[{\"text\":\"W  \\n  ------------ -----------------------------------------------------------------------------------------\\n\\n------------------------------------------------------------------------\\n\\nFootnotes\\n\\n(1)\\n\\nC++ also has complex number support, but it is incompatible with t\"}]","[{\"text\":\"he ISO\\nC99 types.\\n\\n(2)\\n\\na full declarator is a declaration of a function or an object which is\\nnot part of another object\\n\\n(3)\\n\\nHowever if for example MAX is INT_MAX and x is of type int, we clearly\\nhave a problem with overflow. See Overflow.\\n\\n(4)\\n\\nRarely, argv[0] c\"}]","[{\"text\":\"an be a null pointer (in this case argc is 0) or\\nargv[0][0] can be the null character. In any case, argv[argc] is a null\\npointer.\\n\\n------------------------------------------------------------------------\\n\"}]"]} 1
