give @s minecraft:written_book{title: "The GNU C Reference Manual", author: "GNU", resolved: 1b, pages: ["[{\"text\":\"The GNU C Reference Manual\\n\\n\\n\\nTHE GNU C REFERENCE MANUAL\\n\\n\\nTable of Contents\\n\\n-   Preface\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   Credits\\n-   1 Lexical Elements\\n\\n\\n\\n\\n-   1.1 Identifiers\\n\\n\\n\\n\\n-   1.2 Keywords\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   1.3 Constants\\n\\n\\n\\n\\n\\n\\n\\n\\n-   1.3.1 Integer Constants\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   1.3.2 Character Constants\\n\\n\\n\\n\\n\\n\\n\\n\\n-   1.3.3 Real Number Constants\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   1.3.4 String Constants\\n\\n\\n\\n\\n-   1.4 Operators\\n\\n\\n\\n\\n-   1.5 Separators\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   1.6 White Space\\n-   2 Data Types\\n\\n\\n\\n\\n-   2.1 Primitive Data Types\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.1.1 Integer Types\\n\\n\\n\\n\\n\\n\\n\\n\\n-   2.1.2 Real Number Types\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.1.3 Complex Number Types\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.1.3.1 Standard Complex Number Types\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.1.3.2 GNU Extensions for Complex Number Types\\n\\n\\n\\n\\n-   2.2 Enumerations\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.2.1 Defining Enumerations\\n\\n\\n\\n\\n\\n\\n\\n\\n-   2.2.2 Declaring Enumerations\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.3 Unions\\n\\n\\n\\n\\n\\n\\n\\n\\n-   2.3.1 Defining Unions\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.3.2 Declaring Union Variables\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.3.2.1 Declaring Union Variables at Definition\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.3.2.2 Declaring Union Variables After Definition\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.3.2.3 Initializing Union Members\\n\\n\\n\\n\\n\\n\\n\\n\\n-   2.3.3 Accessing Union Members\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.3.4 Size of Unions\\n\\n\\n\\n\\n-   2.4 Structures\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.4.1 Defining Structures\\n\\n\\n\\n\\n\\n\\n\\n\\n-   2.4.2 Declaring Structure Variables\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.4.2.1 Declaring Structure Variables at Definition\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.4.2.2 Declaring Structure Variables After Definition\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.4.2.3 Initializing Structure Members\\n\\n\\n\\n\\n\\n\\n\\n\\n-   2.4.3 Accessing Structure Members\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.4.4 Bit Fields\\n\\n\\n\\n\\n\\n\\n\\n\\n-   2.4.5 Size of Structures\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.5 Arrays\\n\\n\\n\\n\\n\\n\\n\\n\\n-   2.5.1 Declaring Arrays\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.5.2 Initializing Arrays\\n\\n\\n\\n\\n\\n\\n\\n\\n-   2.5.3 Accessing Array Elements\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.5.4 Multidimensional Arrays\\n\\n\\n\\n\\n\\n\\n\\n\\n-   2.5.5 Arrays as Strings\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.5.6 Arrays of Unions\\n\\n\\n\\n\\n\\n\\n\\n\\n-   2.5.7 Arrays of Structures\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.6 Pointers\\n\\n\\n\\n\\n\\n\\n\\n\\n-   2.6.1 Declaring Pointers\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.6.2 Initializing Pointers\\n\\n\\n\\n\\n\\n\\n\\n\\n-   2.6.3 Pointers to Unions\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.6.4 Pointers to Structures\\n\\n\\n\\n\\n-   2.7 Incomplete Types\\n\\n\\n\\n\\n-   2.8 Type Qualifiers\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   2.9 Storage Class Specifiers\\n\\n\\n\\n\\n-   2.10 Renaming Types\\n-   3 Expressions and Operators\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   3.1 Expressions\\n\\n\\n\\n\\n-   3.2 Assignment Operators\\n\\n\\n\\n\\n-   3.3 Incrementing and Decrementing\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   3.4 Arithmetic Operators\\n\\n\\n\\n\\n-   3.5 Complex Conjugation\\n\\n\\n\\n\\n-   3.6 Comparison Operators\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   3.7 Logical Operators\\n\\n\\n\\n\\n-   3.8 Bit Shifting\\n\\n\\n\\n\\n-   3.9 Bitwise Logical Operators\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   3.10 Pointer Operators\\n\\n\\n\\n\\n-   3.11 The sizeof Operator\\n\\n\\n\\n\\n-   3.12 Type Casts\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   3.13 Array Subscripts\\n\\n\\n\\n\\n-   3.14 Function Calls as Expressions\\n\\n\\n\\n\\n-   3.15 The Comma \"}]","[{\"text\":\"Operator\\n\\n\\n\\n\\n-   3.16 Member Access Expressions\\n\\n\\n\\n\\n-   3.17 Conditional Expressions\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   3.18 Statements and Declarations in Expressions\\n\\n\\n\\n\\n-   3.19 Operator Precedence\\n\\n\\n\\n\\n-   3.20 Order of \"}]","[{\"text\":\"Evaluation\\n\\n\\n\\n\\n\\n\\n\\n\\n-   3.20.1 Side Effects\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   3.20.2 Sequence Points\\n\\n\\n\\n\\n\\n\\n\\n\\n-   3.20.3 Sequence Points Constrain Expressions\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   3.20.4 Sequence Points and Signal Delivery\\n-   4 Statements\\n\\n\\n\\n\\n-   4.1 Labels\\n\\n\\n\\n\\n-   4.2 Expression \"}]","[{\"text\":\"Statements\\n\\n\\n\\n\\n-   4.3 The if Statement\\n\\n\\n\\n\\n-   4.4 The switch Statement\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   4.5 The while Statement\\n\\n\\n\\n\\n-   4.6 The do Statement\\n\\n\\n\\n\\n-   4.7 The for Statement\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   4.8 Blocks\\n\\n\\n\\n\\n-   4.9 The Null Statement\\n\\n\\n\\n\\n-   4.10 The goto Statement\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   4.11 The break Statement\\n\\n\\n\\n\\n-   4.12 The continue Statement\\n\\n\\n\\n\\n-   4.13 The return Statement\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   4.14 The typedef Statement\\n-   5 Functions\\n\\n\\n\\n\\n-   5.1 Function Declarations\\n\\n\\n\\n\\n-   5.2 Function \"}]","[{\"text\":\"Definitions\\n\\n\\n\\n\\n-   5.3 Calling Functions\\n\\n\\n\\n\\n-   5.4 Function Parameters\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   5.5 Variable Length Parameter Lists\\n\\n\\n\\n\\n-   5.6 Calling Functions Through Function Pointers\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   5.7 The main Function\\n\\n\\n\\n\\n-   5.8 Recursive Functions\\n\\n\\n\\n\\n-   5.9 Static Functions\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   5.10 Nested Functions\\n-   6 Program Structure and Scope\\n\\n\\n\\n\\n-   6.1 Program Structure\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   6.2 Scope\\n-   7 A Sample Program\\n\\n\\n\\n\\n-   7.1 hello.c\\n\\n\\n\\n\\n-   7.2 system.h\\n-   Appendix A \"}]","[{\"text\":\"Overflow\\n\\n\\n\\n\\n-   A.1 Basics of Integer Overflow\\n\\n\\n\\n\\n-   A.2 Examples of Code Assuming Wraparound Overflow\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   A.3 Optimizations That Break Wraparound Arithmetic\\n\\n\\n\\n\\n-   A.4 Practical Advice for Signed Overflow Issues\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-   A.5 Signed Integer Division and Integer Overflow\\n-   GNU Free Documentation License\\n-   Index\\n\\nNext: Preface, Up: (dir)   [Contents][Index]\\n\\n\\n\\nTHE GNU C \"}]","[{\"text\":\"REFERENCE MANUAL\\n\\n\\nThis is the GNU C reference manual.\\n\\n\\n\\n----------------------------------- ---- --\\n\\n\\n• \"}]","[{\"text\":\"Preface:                               \\n\\n\\n• Lexical Elements:                      \\n\\n\\n• Data Types:                            \\n\\n\\n\"}]","[{\"text\":\"• Expressions and Operators:             \\n\\n\\n• Statements:                            \\n\\n\\n• Functions:                             \\n\\n\\n\"}]","[{\"text\":\"• Program Structure and Scope:           \\n\\n\\n• A Sample Program:                      \\n\\n\\n• Overflow:                              \\n\\n\\n\"}]","[{\"text\":\"• GNU Free Documentation License:        \\n\\n\\n• Index:                                 \\n\\n\\n----------------------------------- ---- --\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Lexical Elements, Previous: Top, Up: Top   [Contents][Index]\\n\\n\\nPreface\\n\\nThis is a \"}]","[{\"text\":\"reference manual for the C programming language as implemented\\nby the GNU Compiler Collection (GCC). Specifically, this manual aims to\\ndocument:\\n\\n-   The 1989 ANSI C standard, commonly known as “C89”\\n-   The 1999 ISO C \"}]","[{\"text\":\"standard, commonly known as “C99”, to the extent that\\n\\n\\n\\n\\nC99 is implemented by GCC\\n-   The current state of GNU extensions to standard C\\n\\nThis manual \"}]","[{\"text\":\"describes C89 as its baseline. C99 features and GNU\\nextensions are explicitly labeled as such.\\n\\nBy default, GCC will compile code as C89 plus GNU-specific extensions.\\nMuch of C99 is supported; once full support is \"}]","[{\"text\":\"available, the default\\ncompilation dialect will be C99 plus GNU-specific extensions. (Some of\\nthe GNU extensions to C89 ended up, sometimes slightly modified, as\\nstandard language features in C99.)\\n\\nThe C language \"}]","[{\"text\":\"includes a set of preprocessor directives, which are used\\nfor things such as macro text replacement, conditional compilation, and\\nfile inclusion. Although normally described in a C language manual, the\\nGNU C preprocessor has been \"}]","[{\"text\":\"thoroughly documented in The C Preprocessor,\\na separate manual which covers preprocessing for C, C++, and Objective-C\\nprograms, so it is not included here.\\n\\nCredits\\n\\nThanks to everyone who has helped \"}]","[{\"text\":\"with editing, proofreading, ideas,\\ntypesetting, and administrivia, including: Diego Andres Alvarez Marin,\\nNelson H. F. Beebe, Karl Berry, Robert Chassell, Hanfeng Chen, Mark de\\nVolld, Antonio Diaz Diaz, dine, Andreas Foerster, Denver Gingerich, Lisa\\n\"}]","[{\"text\":\"Goldstein, Robert Hansen, Jean-Christophe Helary, Mogens Hetsholm, Teddy\\nHogeborn, Joe Humphries, J. Wren Hunt, Dutch Ingraham, Adam Johansen,\\nVladimir Kadlec, Benjamin Kagia, Dright Kayorent, Sugun Kedambadi, Felix\\nLee, Bjorn Liencres, Steve \"}]","[{\"text\":\"Morningthunder, Aljosha Papsch, Matthew\\nPlant, Jonathan Sisti, Richard Stallman, J. Otto Tennant, Ole Tetlie,\\nKeith Thompson, T.F. Torrey, James Youngman, and Steve Zachar. Trevis\\nRothwell serves as project maintainer and, along with \"}]","[{\"text\":\"James Youngman,\\nwrote the bulk of the text.\\n\\nSome example programs are based on algorithms in Donald Knuth’s The Art\\nof Computer Programming.\\n\\nPlease send bug reports and suggestions to \"}]","[{\"text\":\"gnu-c-manual@gnu.org.\\n\\n------------------------------------------------------------------------\\n\\nNext: Data Types, Previous: Preface, Up: Top   [Contents][Index]\\n\\n\\n\"}]","[{\"text\":\"1 Lexical Elements\\n\\nThis chapter describes the lexical elements that make up C source code\\nafter preprocessing. These elements are called _tokens_. There are five\\ntypes of tokens: keywords, identifiers, constants, operators, and\\n\"}]","[{\"text\":\"separators. White space, sometimes required to separate tokens, is also\\ndescribed in this chapter.\\n\\n\\n\\n---------------- ---- --\\n\\n\\n• \"}]","[{\"text\":\"Identifiers:        \\n\\n\\n• Keywords:           \\n\\n\\n• Constants:          \\n\\n\\n• Operators:          \\n\\n\\n\"}]","[{\"text\":\"• Separators:         \\n\\n\\n• White Space:        \\n\\n\\n---------------- ---- --\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Keywords, Up: Lexical Elements   [Contents][Index]\\n\\n1.1 Identifiers\\n\\nIdentifiers are sequences of characters used for naming \"}]","[{\"text\":\"variables,\\nfunctions, new data types, and preprocessor macros. You can include\\nletters, decimal digits, and the underscore character ‘_’ in\\nidentifiers.\\n\\nThe first character of an identifier cannot be a digit.\\n\"}]","[{\"text\":\"Lowercase letters and uppercase letters are distinct, such that foo and\\nFOO are two different identifiers.\\n\\nWhen using GNU extensions, you can also include the dollar sign\\ncharacter ‘$’ in identifiers.\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Constants, Previous: Identifiers, Up: Lexical Elements  \\n[Contents][Index]\\n\\n1.2 Keywords\\n\\nKeywords are \"}]","[{\"text\":\"special identifiers reserved for use as part of the\\nprogramming language itself. You cannot use them for any other purpose.\\n\\nHere is a list of keywords recognized by ANSI C89:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"auto break case char const continue default do double else enum extern\\n\\n\\n\\n\\nfloat for goto if int long register return short signed sizeof static\\n\\n\\n\\n\"}]","[{\"text\":\"struct switch typedef union unsigned void volatile while\\n\\nISO C99 adds the following keywords:\\n\\n\\n\\n\\n\\ninline _Bool _Complex _Imaginary\\n\\n\"}]","[{\"text\":\"and GNU extensions add these keywords:\\n\\n\\n\\n\\n\\n__FUNCTION__ __PRETTY_FUNCTION__ __alignof __alignof__ __asm\\n\\n\\n\\n\\n\"}]","[{\"text\":\"__asm__ __attribute __attribute__ __builtin_offsetof __builtin_va_arg\\n\\n\\n\\n\\n__complex __complex__ __const __extension__ __func__ __imag __imag__ \\n\\n\\n\\n\\n\"}]","[{\"text\":\"__inline __inline__ __label__ __null __real __real__ \\n\\n\\n\\n\\n__restrict __restrict__ __signed __signed__ __thread __typeof\\n\\n\\n\\n\"}]","[{\"text\":\"__volatile __volatile__ \\n\\nIn both ISO C99 and C89 with GNU extensions, the following is also\\nrecognized as a keyword:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"restrict\\n\\n------------------------------------------------------------------------\\n\\nNext: Operators, Previous: Keywords, Up: Lexical Elements  \\n[Contents][Index]\\n\\n1.3 Constants\\n\"}]","[{\"text\":\"A constant is a literal numeric or character value, such as 5 or 'm'.\\nAll constants are of a particular data type; you can use type casting to\\nexplicitly specify the type of a constant, or let the compiler use the\\ndefault type based on the value of \"}]","[{\"text\":\"the constant.\\n\\n\\n\\n-------------------------- ---- --\\n\\n\\n• Integer Constants:            \\n\\n\\n• Character Constants:          \\n\\n\\n\"}]","[{\"text\":\"• Real Number Constants:        \\n\\n\\n• String Constants:             \\n\\n\\n-------------------------- ---- --\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Character Constants, Up: Constants   [Contents][Index]\\n\\n1.3.1 Integer Constants\\n\\nAn integer \"}]","[{\"text\":\"constant is a sequence of digits, with an optional prefix to\\ndenote a number base.\\n\\nIf the sequence of digits is preceded by 0x or 0X (zero x or zero X),\\nthen the constant is considered to be hexadecimal (base \"}]","[{\"text\":\"16). Hexadecimal\\nvalues may use the digits from 0 to 9, as well as the letters a to f and\\nA to F. Here are some examples:\\n\\n\\n\\n\\n\\n0x2f\\n\\n\\n\\n\\n\"}]","[{\"text\":\"0x88\\n\\n\\n\\n\\n0xAB43\\n\\n\\n\\n\\n0xAbCd\\n\\n\\n\\n\"}]","[{\"text\":\"0x1\\n\\nIf the first digit is 0 (zero), and the next character is not ‘x’ or\\n‘X’, then the constant is considered to be octal (base 8). Octal values\\nmay only use the digits from 0 to 7; 8 and 9 are not allowed. Here are\\n\"}]","[{\"text\":\"some examples:\\n\\n\\n\\n\\n\\n057\\n\\n\\n\\n\\n012\\n\\n\\n\\n\\n\"}]","[{\"text\":\"03\\n\\n\\n\\n\\n0241\\n\\nIn all other cases, the sequence of digits is assumed to be decimal\\n(base 10). Decimal values may use the digits from 0 to \"}]","[{\"text\":\"9. Here are some\\nexamples:\\n\\n\\n\\n\\n\\n459\\n\\n\\n\\n\\n23901\\n\\n\\n\\n\\n\"}]","[{\"text\":\"8\\n\\n\\n\\n\\n12\\n\\nThere are various integer data types, for short integers, long integers,\\nsigned integers, and unsigned integers. You can force an \"}]","[{\"text\":\"integer\\nconstant to be of a long and/or unsigned integer type by appending a\\nsequence of one or more letters to the end of the constant:\\n\\nu\\nU\\n\\n\\n\\n\"}]","[{\"text\":\"Unsigned integer type.\\n\\nl\\nL\\n\\n\\n\\n\\n\\nLong integer type.\\n\\nFor example, 45U is an unsigned int \"}]","[{\"text\":\"constant. You can also combine\\nletters: 45UL is an unsigned long int constant. (The letters may be used\\nin any order.)\\n\\nBoth ISO C99 and GNU C extensions add the integer types long long int\\nand unsigned long long int. You can \"}]","[{\"text\":\"use two ‘L’s to get a long long int\\nconstant; add a ‘U’ to that and you have an unsigned long long int\\nconstant. For example: 45ULL.\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Next: Real Number Constants, Previous: Integer Constants, Up: Constants\\n\\n\\n[Contents][Index]\\n\\n1.3.2 Character Constants\\n\\nA character constant is usually a single character \"}]","[{\"text\":\"enclosed within\\nsingle quotation marks, such as 'Q'. A character constant is of type int\\nby default.\\n\\nSome characters, such as the single quotation mark character itself,\\ncannot be represented using only one character. To \"}]","[{\"text\":\"represent such\\ncharacters, there are several “escape sequences” that you can use:\\n\\n\\\\\\\\\\n\\n\\n\\n\\n\\nBackslash character.\\n\"}]","[{\"text\":\"\\\\?\\n\\n\\n\\n\\n\\nQuestion mark character.\\n\\n\\\\'\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Single quotation mark.\\n\\n\\\\\\\"\\n\\n\\n\\n\\n\\nDouble quotation mark.\\n\\n\\\\a\\n\\n\\n\\n\"}]","[{\"text\":\"Audible alert.\\n\\n\\\\b\\n\\n\\n\\n\\n\\nBackspace character.\\n\\n\\\\e\\n\\n\\n\\n\"}]","[{\"text\":\"<ESC> character. (This is a GNU extension.)\\n\\n\\\\f\\n\\n\\n\\n\\n\\nForm feed.\\n\\n\\\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Newline character.\\n\\n\\\\r\\n\\n\\n\\n\\n\\nCarriage return.\\n\\n\\\\t\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Horizontal tab.\\n\\n\\\\v\\n\\n\\n\\n\\n\\nVertical tab.\\n\\n\\\\o, \\\\oo, \\\\ooo\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Octal number.\\n\\n\\\\xh, \\\\xhh, \\\\xhhh, …\\n\\n\\n\\n\\n\\nHexadecimal number.\\n\\nTo use any of these escape sequences, \"}]","[{\"text\":\"enclose the sequence in single\\nquotes, and treat it as if it were any other character. For example, the\\nletter m is 'm' and the newline character is '\\\\n'.\\n\\nThe octal number escape sequence is the backslash character followed by\\n\"}]","[{\"text\":\"one, two, or three octal digits (0 to 7). For example, 101 is the octal\\nequivalent of 65, which is the ASCII character 'A'. Thus, the character\\nconstant '\\\\101' is the same as the character constant 'A'.\\n\\nThe hexadecimal \"}]","[{\"text\":\"escape sequence is the backslash character, followed by\\nx and an unlimited number of hexadecimal digits (0 to 9, and a to f or A\\nto F).\\n\\nWhile the length of possible hexadecimal digit strings is unlimited, the\\nnumber of \"}]","[{\"text\":\"character constants in any given character set is not. (The\\nmuch-used extended ASCII character set, for example, has only 256\\ncharacters in it.) If you try to use a hexadecimal value that is outside\\nthe range of characters, you will get \"}]","[{\"text\":\"a compile-time error.\\n\\n------------------------------------------------------------------------\\n\\nNext: String Constants, Previous: Character Constants, Up: Constants  \\n[Contents][Index]\\n\\n\"}]","[{\"text\":\"1.3.3 Real Number Constants\\n\\nA real number constant is a value that represents a fractional (floating\\npoint) number. It consists of a sequence of digits which represents the\\ninteger (or “whole”) part of the number, a decimal \"}]","[{\"text\":\"point, and a sequence\\nof digits which represents the fractional part.\\n\\nEither the integer part or the fractional part may be omitted, but not\\nboth. Here are some examples:\\n\\n\\n\\n\"}]","[{\"text\":\"double a, b, c, d, e, f;\\n\\n\\n\\n\\n\\na = 4.7;\\n\\n\\n\\n\\n\\nb = 4.;\\n\\n\\n\"}]","[{\"text\":\"c = 4;\\n\\n\\n\\n\\n\\nd = .7;\\n\\n\\n\\n\\n\\ne = 0.7;\\n\\n\"}]","[{\"text\":\"(In the third assignment statement, the integer constant 4 is\\nautomatically converted from an integer value to a double value.)\\n\\nReal number constants can also be followed by e or E, and an integer\\nexponent. The \"}]","[{\"text\":\"exponent can be either positive or negative.\\n\\n\\n\\n\\n\\ndouble x, y;\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"x = 5e2;   /* x is 5 * 100, or 500.0. */\\n\\n\\n\\n\\ny = 5e-2;  /* y is 5 * (1/100), or 0.05. */\\n\\nYou can append a letter to the end of a real number \"}]","[{\"text\":\"constant to cause it\\nto be of a particular type. If you append the letter F (or f) to a real\\nnumber constant, then its type is float. If you append the letter L (or\\nl), then its type is long double. If you do not append any letters, then\\n\"}]","[{\"text\":\"its type is double.\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Real Number Constants, Up: Constants   [Contents][Index]\\n\\n1.3.4 String \"}]","[{\"text\":\"Constants\\n\\nA string constant is a sequence of zero or more characters, digits, and\\nescape sequences enclosed within double quotation marks. A string\\nconstant is of type “array of characters”. All string constants contain\\n\"}]","[{\"text\":\"a null termination character (\\\\0) as their last character. Strings are\\nstored as arrays of characters, with no inherent size attribute. The\\nnull termination character lets string-processing functions know where\\nthe string ends.\\n\\n\"}]","[{\"text\":\"Adjacent string constants are concatenated (combined) into one string,\\nwith the null termination character added to the end of the final\\nconcatenated string.\\n\\nA string cannot contain double quotation marks, as \"}]","[{\"text\":\"double quotation\\nmarks are used to enclose the string. To include the double quotation\\nmark character in a string, use the \\\\\\\" escape sequence. You can use any\\nof the escape sequences that can be used as character constants in\\nstrings. Here are \"}]","[{\"text\":\"some example of string constants:\\n\\n\\n\\n\\n\\n/* This is a single string constant. */\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\\"tutti frutti ice cream\\\"\\n\\n\\n\\n\\n\\n/* These string constants will be concatenated, same as above. */\\n\\n\\n\\n\"}]","[{\"text\":\"\\\"tutti \\\" \\\"frutti\\\" \\\" ice \\\" \\\"cream\\\"\\n\\n\\n\\n\\n\\n/* This one uses two escape sequences. */\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\\"\\\\\\\"hello, world!\\\\\\\"\\\"\\n\\nIf a string is too long to fit on one line, you can use a backslash \\\\ to\\nbreak it up onto separate lines.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\\"Today's special is a pastrami sandwich on rye bread with \\\\\\n\\n\\n\\n\\na potato knish and a cherry soda.\\\"\\n\\nAdjacent strings are automatically concatenated, so you \"}]","[{\"text\":\"can also have\\nstring constants span multiple lines by writing them as separate,\\nadjacent, strings. For example:\\n\\n\\n\\n\\n\\n\\\"Tomorrow's special is a corned beef \"}]","[{\"text\":\"sandwich on \\\"\\n\\n\\n\\n\\n\\\"pumpernickel bread with a kasha knish and seltzer water.\\\"\\n\\nis the same as\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\\"Tomorrow's special is a corned beef sandwich on \\\\\\n\\n\\n\\n\\npumpernickel bread with a kasha knish and seltzer water.\\\"\\n\\nTo insert a newline character into \"}]","[{\"text\":\"the string, so that when the string\\nis printed it will be printed on two different lines, you can use the\\nnewline escape sequence ‘\\\\n’.\\n\\n\\n\\n\\n\\nprintf \"}]","[{\"text\":\"(\\\"potato\\\\nknish\\\");\\n\\nprints\\n\\n\\n\\n\\n\\npotato\\n\\n\\n\\n\\nknish\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Separators, Previous: Constants, Up: Lexical Elements  \\n[Contents][Index]\\n\\n1.4 Operators\\n\\nAn operator is a \"}]","[{\"text\":\"special token that performs an operation, such as\\naddition or subtraction, on either one, two, or three operands. Full\\ncoverage of operators can be found in a later chapter. See Expressions\\nand Operators.\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: White Space, Previous: Operators, Up: Lexical Elements  \\n[Contents][Index]\\n\\n1.5 Separators\\n\\nA separator \"}]","[{\"text\":\"separates tokens. White space (see next section) is a\\nseparator, but it is not a token. The other separators are all\\nsingle-character tokens themselves:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"( ) [ ] { } ; , . :\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Separators, Up: Lexical Elements   [Contents][Index]\\n\\n1.6 White Space\\n\"}]","[{\"text\":\"White space is the collective term used for several characters: the\\nspace character, the tab character, the newline character, the vertical\\ntab character, and the form-feed character. White space is ignored\\n(outside of string and character \"}]","[{\"text\":\"constants), and is therefore optional,\\nexcept when it is used to separate tokens. This means that\\n\\n\\n\\n\\n\\n#include <stdio.h>\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int\\n\\n\\n\\n\\nmain()\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"printf( \\\"hello, world\\\\n\\\" );\\n\\n\\n\\n\\n\\n\\nreturn 0;\\n\\n\\n\\n\\n}\\n\"}]","[{\"text\":\"and\\n\\n\\n\\n\\n\\n#include <stdio.h> int main(){printf(\\\"hello, world\\\\n\\\");\\n\\n\\n\\n\\nreturn 0;}\\n\"}]","[{\"text\":\"are functionally the same program.\\n\\nAlthough you must use white space to separate many tokens, no white\\nspace is required between operators and operands, nor is it required\\nbetween other separators and that which they separate.\\n\\n\\n\"}]","[{\"text\":\"/* All of these are valid. */\\n\\n\\n\\n\\n\\nx++;\\n\\n\\n\\n\\nx ++ ;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"x=y+z;\\n\\n\\n\\n\\nx = y + z ;\\n\\n\\n\\n\\nx=array[2];\\n\\n\\n\\n\\n\"}]","[{\"text\":\"x = array [ 2 ] ;\\n\\n\\n\\n\\nfraction=numerator / *denominator_ptr;\\n\\n\\n\\n\\nfraction = numerator / * \"}]","[{\"text\":\"denominator_ptr ;\\n\\nFurthermore, wherever one space is allowed, any amount of white space is\\nallowed.\\n\\n\\n\\n\\n\\n/* These two statements are \"}]","[{\"text\":\"functionally identical. */\\n\\n\\n\\n\\nx++;\\n\\n\\n\\n\\n\\nx\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"+       ;\\n\\nIn string constants, spaces and tabs are not ignored; rather, they are\\npart of the string. Therefore,\\n\\n\\n\\n\\n\\n\\\"potato knish\\\"\\n\"}]","[{\"text\":\"is not the same as\\n\\n\\n\\n\\n\\n\\\"potato                        knish\\\"\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Next: Expressions and Operators, Previous: Lexical Elements, Up: Top  \\n[Contents][Index]\\n\\n\\n2 Data Types\\n\\n\\n\\n----------------------------- ---- --\\n\\n\\n\"}]","[{\"text\":\"• Primitive Types:                 \\n\\n\\n• Enumerations:                    \\n\\n\\n• Unions:                          \\n\\n\\n• Structures:                      \\n\\n\\n\"}]","[{\"text\":\"• Arrays:                          \\n\\n\\n• Pointers:                        \\n\\n\\n• Incomplete Types:                \\n\\n\\n• Type Qualifiers:                 \\n\\n\\n\"}]","[{\"text\":\"• Storage Class Specifiers:        \\n\\n\\n• Renaming Types:                  \\n\\n\\n----------------------------- ---- --\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Enumerations, Up: Data Types   [Contents][Index]\\n\\n2.1 Primitive Data Types\\n\\n\\n\\n\"}]","[{\"text\":\"------------------------- ---- --\\n\\n\\n• Integer Types:               \\n\\n\\n• Real Number Types:           \\n\\n\\n• Complex Number Types:        \\n\\n\"}]","[{\"text\":\"------------------------- ---- --\\n\\n------------------------------------------------------------------------\\n\\nNext: Real Number Types, Up: Primitive Types   [Contents][Index]\\n\\n2.1.1 Integer Types\\n\"}]","[{\"text\":\"The integer data types range in size from at least 8 bits to at least 32\\nbits. The C99 standard extends this range to include integer sizes of at\\nleast 64 bits. You should use integer types for storing whole number\\nvalues (and the char data type for \"}]","[{\"text\":\"storing characters). The sizes and\\nranges listed for these types are minimums; depending on your computer\\nplatform, these sizes and ranges may be larger.\\n\\nWhile these ranges provide a natural ordering, the standard does not\\n\"}]","[{\"text\":\"require that any two types have a different range. For example, it is\\ncommon for int and long to have the same range. The standard even allows\\nsigned char and long to have the same range, though such platforms are\\nvery unusual.\\n\\n\"}]","[{\"text\":\"-   signed char\\n\\n\\n\\n\\nThe 8-bit signed char data type can hold integer values in the range\\n\\n\\n\\n\\nof -128 to 127.\\n\"}]","[{\"text\":\"-   unsigned char\\n\\n\\n\\n\\nThe 8-bit unsigned char data type can hold integer values in the\\n\\n\\n\\n\\nrange of 0 to 255.\\n\"}]","[{\"text\":\"-   char\\n\\n\\n\\n\\nDepending on your system, the char data type is defined as having\\n\\n\\n\\n\\nthe same range as \"}]","[{\"text\":\"either the signed char or the unsigned char data\\n\\n\\n\\n\\ntype (they are three distinct types, however). By convention, you\\n\\n\\n\\n\\n\"}]","[{\"text\":\"should use the char data type specifically for storing ASCII\\n\\n\\n\\n\\ncharacters (such as `m'), including escape sequences (such as `\\\\n').\\n-   short int\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The 16-bit short int data type can hold integer values in the range\\n\\n\\n\\n\\nof -32,768 to 32,767. You may also refer to this data type as short,\\n\\n\\n\\n\\n\"}]","[{\"text\":\"signed short int, or signed short.\\n-   unsigned short int\\n\\n\\n\\n\\nThe 16-bit unsigned short int data type can hold integer values in\\n\\n\\n\\n\\n\"}]","[{\"text\":\"the range of 0 to 65,535. You may also refer to this data type as\\n\\n\\n\\n\\nunsigned short.\\n-   int\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The 32-bit int data type can hold integer values in the range of\\n\\n\\n\\n\\n-2,147,483,648 to 2,147,483,647. You may also refer to this data\\n\\n\\n\\n\\n\"}]","[{\"text\":\"type as signed int or signed.\\n-   unsigned int\\n\\n\\n\\n\\nThe 32-bit unsigned int data type can hold integer values in the\\n\\n\\n\\n\\n\"}]","[{\"text\":\"range of 0 to 4,294,967,295. You may also refer to this data type\\n\\n\\n\\n\\nsimply as unsigned.\\n-   long int\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The 32-bit long int data type can hold integer values in the range\\n\\n\\n\\n\\nof at least -2,147,483,648 to 2,147,483,647. (Depending on your\\n\\n\\n\\n\\n\"}]","[{\"text\":\"system, this data type might be 64-bit, in which case its range is\\n\\n\\n\\n\\nidentical to that of the long long int data type.) You may also\\n\\n\\n\\n\\n\"}]","[{\"text\":\"refer to this data type as long, signed long int, or signed long.\\n-   unsigned long int\\n\\n\\n\\n\\nThe 32-bit unsigned long int data type can hold integer values in\\n\\n\\n\\n\\n\"}]","[{\"text\":\"the range of at least 0 to 4,294,967,295. (Depending on your system,\\n\\n\\n\\n\\nthis data type might be 64-bit, in which case its range is identical\\n\\n\\n\\n\\n\"}]","[{\"text\":\"to that of the unsigned long long int data type.) You may also refer\\n\\n\\n\\n\\nto this data type as unsigned long.\\n-   long long int\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The 64-bit long long int data type can hold integer values in the\\n\\n\\n\\n\\nrange of -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.\\n\\n\\n\\n\\n\"}]","[{\"text\":\"You may also refer to this data type as long long,\\n\\n\\n\\n\\nsigned long long int or signed long long. This type is not part of\\n\\n\\n\\n\\n\"}]","[{\"text\":\"C89, but is both part of C99 and a GNU C extension.\\n-   unsigned long long int\\n\\n\\n\\n\\nThe 64-bit unsigned long long int data type can hold integer values\\n\\n\\n\\n\\n\"}]","[{\"text\":\"in the range of at least 0 to 18,446,744,073,709,551,615. You may\\n\\n\\n\\n\\nalso refer to this data type as unsigned long long. This type is not\\n\\n\\n\\n\"}]","[{\"text\":\"part of C89, but is both part of C99 and a GNU C extension.\\n\\nHere are some examples of declaring and defining integer variables:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int foo;\\n\\n\\n\\n\\nunsigned int bar = 42;\\n\\n\\n\\n\\nchar quux = 'a';\\n\\nThe first line \"}]","[{\"text\":\"declares an integer named foo but does not define its\\nvalue; it is left uninitialized, and its value should not be assumed to\\nbe anything in particular.\\n\\n------------------------------------------------------------------------\\n\"}]","[{\"text\":\"Next: Complex Number Types, Previous: Integer Types, Up: Primitive Types\\n\\n\\n[Contents][Index]\\n\\n2.1.2 Real Number Types\\n\\nThere are three data types that represent fractional \"}]","[{\"text\":\"numbers. While the\\nsizes and ranges of these types are consistent across most computer\\nsystems in use today, historically the sizes of these types varied from\\nsystem to system. As such, the minimum and maximum values are stored in\\nmacro definitions \"}]","[{\"text\":\"in the library header file float.h. In this section,\\nwe include the names of the macro definitions in place of their possible\\nvalues; check your system’s float.h for specific numbers.\\n\\n-   float\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The float data type is the smallest of the three floating point\\n\\n\\n\\n\\ntypes, if they differ in size at all. Its minimum value is stored in\\n\\n\\n\\n\\n\"}]","[{\"text\":\"the FLT_MIN, and should be no greater than 1e-37. Its maximum value\\n\\n\\n\\n\\nis stored in FLT_MAX, and should be no less than 1e37.\\n-   double\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The double data type is at least as large as the float type, and it\\n\\n\\n\\n\\nmay be larger. Its minimum value is stored in DBL_MIN, and its\\n\\n\\n\\n\\n\"}]","[{\"text\":\"maximum value is stored in DBL_MAX.\\n-   long double\\n\\n\\n\\n\\nThe long double data type is at least as large as the float type,\\n\\n\\n\\n\\n\"}]","[{\"text\":\"and it may be larger. Its minimum value is stored in LDBL_MIN, and\\n\\n\\n\\n\\nits maximum value is stored in LDBL_MAX.\\n\\nAll floating point data types are \"}]","[{\"text\":\"signed; trying to use unsigned float,\\nfor example, will cause a compile-time error.\\n\\nHere are some examples of declaring and defining real number variables:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"float foo;\\n\\n\\n\\n\\ndouble bar = 114.3943;\\n\\nThe first line declares a float named foo but does not define its value;\\nit is left uninitialized, and its \"}]","[{\"text\":\"value should not be assumed to be\\nanything in particular.\\n\\nThe real number types provided in C are of finite precision, and\\naccordingly, not all real numbers can be represented exactly. Most\\ncomputer systems \"}]","[{\"text\":\"that GCC compiles for use a binary representation for\\nreal numbers, which is unable to precisely represent numbers such as,\\nfor example, 4.2. For this reason, we recommend that you consider not\\ncomparing real numbers for exact equality with the == \"}]","[{\"text\":\"operator, but\\nrather check that real numbers are within an acceptable tolerance.\\n\\nThere are other more subtle implications of these imprecise\\nrepresentations; for more details, see David Goldberg’s paper What Every\\n\"}]","[{\"text\":\"Computer Scientist Should Know About Floating-Point Arithmetic and\\nsection 4.2.2 of Donald Knuth’s The Art of Computer Programming.\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Previous: Real Number Types, Up: Primitive Types   [Contents][Index]\\n\\n2.1.3 Complex Number Types\\n\\nGCC introduced some complex number types as an extension to C89. Similar\\nfeatures were introduced in C99¹, but \"}]","[{\"text\":\"there were a number of\\ndifferences. We describe the standard complex number types first.\\n\\n\\n\\n-------------------------------------------- ---- --\\n\\n\\n\"}]","[{\"text\":\"• Standard Complex Number Types:                  \\n\\n\\n• GNU Extensions for Complex Number Types:        \\n\\n\\n-------------------------------------------- ---- --\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: GNU Extensions for Complex Number Types, Up: Complex Number Types\\n\\n\\n[Contents][Index]\\n\\n2.1.3.1 Standard \"}]","[{\"text\":\"Complex Number Types\\n\\nComplex types were introduced in C99. There are three complex types:\\n\\n-   float _Complex\\n-   double _Complex\\n-   long double _Complex\\n\\n\"}]","[{\"text\":\"The names here begin with an underscore and an uppercase letter in order\\nto avoid conflicts with existing programs’ identifiers. However, the C99\\nstandard header file <complex.h> introduces some macros which make using\\ncomplex types easier.\\n\"}]","[{\"text\":\"-   complex\\n\\n\\n\\n\\nExpands to _Complex. This allows a variable to be declared as\\n\\n\\n\\n\\ndouble complex \"}]","[{\"text\":\"which seems more natural.\\n-   I\\n\\n\\n\\n\\nA constant of type const float _Complex having the value of the\\n\\n\\n\\n\"}]","[{\"text\":\"imaginary unit normally referred to as _i_.\\n\\nThe <complex.h> header file also declares a number of functions for\\nperforming computations on complex numbers, for example the creal and\\ncimag functions which respectively \"}]","[{\"text\":\"return the real and imaginary parts\\nof a double complex number. Other functions are also provided, as shown\\nin this example:\\n\\n\\n\\n\\n\\n#include <complex.h>    \\n\\n\\n\"}]","[{\"text\":\"#include <stdio.h>  \\n\\n\\n\\n\\n\\nvoid example (void) \\n\\n\\n\\n\\n{    \\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"complex double z = 1.0 + 3.0*I; \\n\\n\\n\\n\\n\\n\\nprintf (\\\"Phase is %f, modulus is %f\\\\n\\\", carg (z), cabs (z));        \\n\\n\\n\\n\"}]","[{\"text\":\"}  \\n\\n------------------------------------------------------------------------\\n\\nPrevious: Standard Complex Number Types, Up: Complex Number Types  \\n[Contents][Index]\\n\\n2.1.3.2 GNU \"}]","[{\"text\":\"Extensions for Complex Number Types\\n\\nGCC also introduced complex types as a GNU extension to C89, but the\\nspelling is different. The floating-point complex types in GCC’s C89\\nextension are:\\n\\n-   __complex__ \"}]","[{\"text\":\"float\\n-   __complex__ double\\n-   __complex__ long double\\n\\nGCC’s extension allow for complex types other than floating-point, so\\nthat you can declare complex character types and complex integer types;\\n\"}]","[{\"text\":\"in fact __complex__ can be used with any of the primitive data types. We\\nwon’t give you a complete list of all possibilities, but here are some\\nexamples:\\n\\n-   __complex__ float\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The __complex__ float data type has two components: a real part and\\n\\n\\n\\n\\nan imaginary part, both of which are of the float data type.\\n-   __complex__ int\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The __complex__ int data type also has two components: a real part\\n\\n\\n\\n\\nand an imaginary part, both of which are of the int data type.\\n\\nTo extract the \"}]","[{\"text\":\"real part of a complex-valued expression, use the keyword\\n__real__, followed by the expression. Likewise, use __imag__ to extract\\nthe imaginary part.\\n\\n\\n\\n\\n\"}]","[{\"text\":\"__complex__ float a = 4 + 3i;\\n\\n\\n\\n\\n\\nfloat b = __real__ a;          /* b is now 4. */\\n\\n\\n\\n\\n\"}]","[{\"text\":\"float c = __imag__ a;          /* c is now 3. */\\n\\nThis example creates a complex floating point variable a, and defines\\nits real part as 4 and its imaginary part as 3. Then, the real part is\\nassigned to the floating point \"}]","[{\"text\":\"variable b, and the imaginary part is\\nassigned to the floating point variable c.\\n\\n------------------------------------------------------------------------\\n\\nNext: Unions, Previous: Primitive Types, Up: Data Types  \\n\"}]","[{\"text\":\"[Contents][Index]\\n\\n2.2 Enumerations\\n\\nAn enumeration is a custom data type used for storing constant integer\\nvalues and referring to them by names. By default, these values are of\\ntype signed int; however, you can use \"}]","[{\"text\":\"the -fshort-enums GCC compiler\\noption to cause the smallest possible integer type to be used instead.\\nBoth of these behaviors conform to the C89 standard, but mixing the use\\nof these options within the same program can produce incompatibilities.\\n\\n\\n\"}]","[{\"text\":\"--------------------------- ---- --\\n\\n\\n• Defining Enumerations:         \\n\\n\\n• Declaring Enumerations:        \\n\\n\\n--------------------------- ---- --\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Declaring Enumerations, Up: Enumerations   [Contents][Index]\\n\\n2.2.1 Defining Enumerations\\n\\nYou define an \"}]","[{\"text\":\"enumeration using the enum keyword, followed by the name\\nof the enumeration (this is optional), followed by a list of constant\\nnames (separated by commas and enclosed in braces), and ending with a\\nsemicolon.\\n\\n\\n\\n\"}]","[{\"text\":\"enum fruit {grape, cherry, lemon, kiwi};\\n\\nThat example defines an enumeration, fruit, which contains four constant\\ninteger values, grape, cherry, lemon, and kiwi, whose values are, by\\ndefault, 0, 1, 2, and 3, \"}]","[{\"text\":\"respectively. You can also specify one or more\\nof the values explicitly:\\n\\n\\n\\n\\n\\nenum more_fruit {banana = -17, apple, blueberry, mango};\\n\\n\"}]","[{\"text\":\"That example defines banana to be -17, and the remaining values are\\nincremented by 1: apple is -16, blueberry is -15, and mango is -14.\\nUnless specified otherwise, an enumeration value is equal to one more\\nthan the previous value (and the \"}]","[{\"text\":\"first value defaults to 0).\\n\\nYou can also refer to an enumeration value defined earlier in the same\\nenumeration:\\n\\n\\n\\n\\n\\nenum \"}]","[{\"text\":\"yet_more_fruit {kumquat, raspberry, peach,\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"lum = peach + 2};\\n\\nIn that example, kumquat is 0, raspberry is 1, peach is 2, and plum is\\n4.\\n\\nYou can’t use the same name for an enum as a struct or union in the same\\nscope.\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nPrevious: Defining Enumerations, Up: Enumerations   [Contents][Index]\\n\\n2.2.2 Declaring Enumerations\\n\\nYou can declare \"}]","[{\"text\":\"variables of an enumeration type both when the\\nenumeration is defined and afterward. This example declares one\\nvariable, named my_fruit of type enum fruit, all in a single statement:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"enum fruit {banana, apple, blueberry, mango} my_fruit;\\n\\nwhile this example declares the type and variable separately:\\n\\n\\n\\n\\n\\nenum fruit \"}]","[{\"text\":\"{banana, apple, blueberry, mango};\\n\\n\\n\\n\\nenum fruit my_fruit;\\n\\n(Of course, you couldn’t declare it that way if you hadn’t named the\\nenumeration.)\\n\"}]","[{\"text\":\"Although such variables are considered to be of an enumeration type, you\\ncan assign them any value that you could assign to an int variable,\\nincluding values from other enumerations. Furthermore, any variable that\\ncan be assigned an int value can be \"}]","[{\"text\":\"assigned a value from an\\nenumeration.\\n\\nHowever, you cannot change the values in an enumeration once it has been\\ndefined; they are constant values. For example, this won’t work:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"enum fruit {banana, apple, blueberry, mango};\\n\\n\\n\\n\\nbanana = 15;  /* You can’t do this! */\\n\\nEnumerations are useful in conjunction with the switch \"}]","[{\"text\":\"statement,\\nbecause the compiler can warn you if you have failed to handle one of\\nthe enumeration values. Using the example above, if your code handles\\nbanana, apple and mango only but not blueberry, GCC can generate a\\nwarning.\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Structures, Previous: Enumerations, Up: Data Types  \\n[Contents][Index]\\n\\n2.3 Unions\\n\\nA union is a \"}]","[{\"text\":\"custom data type used for storing several variables in the\\nsame memory space. Although you can access any of those variables at any\\ntime, you should only read from one of them at a time—assigning a value\\nto one of them overwrites the values \"}]","[{\"text\":\"in the others.\\n\\n\\n\\n------------------------------ ---- --\\n\\n\\n• Defining Unions:                  \\n\\n\\n• Declaring Union \"}]","[{\"text\":\"Variables:        \\n\\n\\n• Accessing Union Members:          \\n\\n\\n• Size of Unions:                   \\n\\n\\n------------------------------ ---- --\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Declaring Union Variables, Up: Unions   [Contents][Index]\\n\\n2.3.1 Defining Unions\\n\\nYou define a union \"}]","[{\"text\":\"using the union keyword followed by the declarations\\nof the union’s members, enclosed in braces. You declare each member of a\\nunion just as you would normally declare a variable—using the data type\\nfollowed by one or more variable names separated by \"}]","[{\"text\":\"commas, and ending\\nwith a semicolon. Then end the union definition with a semicolon after\\nthe closing brace.\\n\\nYou should also include a name for the union between the union keyword\\nand the opening brace. This is syntactically optional, \"}]","[{\"text\":\"but if you leave\\nit out, you can’t refer to that union data type later on (without a\\ntypedef, see The typedef Statement).\\n\\nHere is an example of defining a simple union for holding an integer\\nvalue and a floating point value:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"union numbers\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int i;\\n\\n\\n\\n\\n\\n\\n\\n\\nfloat f;\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"};\\n\\nThat defines a union named numbers, which contains two members, i and f,\\nwhich are of type int and float, respectively.\\n\\n------------------------------------------------------------------------\\n\"}]","[{\"text\":\"Next: Accessing Union Members, Previous: Defining Unions, Up: Unions  \\n[Contents][Index]\\n\\n2.3.2 Declaring Union Variables\\n\\nYou can declare variables of a union type when both you initially define\\nthe union and \"}]","[{\"text\":\"after the definition, provided you gave the union type a\\nname.\\n\\n\\n\\n----------------------------------------------- ---- --\\n\\n\\n• Declaring Union Variables at \"}]","[{\"text\":\"Definition:           \\n\\n\\n• Declaring Union Variables After Definition:        \\n\\n\\n• Initializing Union Members:                        \\n\\n\\n\"}]","[{\"text\":\"----------------------------------------------- ---- --\\n\\n------------------------------------------------------------------------\\n\\nNext: Declaring Union Variables After Definition, Up: Declaring Union\\nVariables   \"}]","[{\"text\":\"[Contents][Index]\\n\\n2.3.2.1 Declaring Union Variables at Definition\\n\\nYou can declare variables of a union type when you define the union type\\nby putting the variable names after the closing brace of the union\\n\"}]","[{\"text\":\"definition, but before the final semicolon. You can declare more than\\none such variable by separating the names with commas.\\n\\n\\n\\n\\n\\nunion numbers\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nint i;\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"float f;\\n\\n\\n\\n\\n\\n\\n} first_number, second_number;\\n\\nThat example declares two variables of type union numbers, first_number\\n\"}]","[{\"text\":\"and second_number.\\n\\n------------------------------------------------------------------------\\n\\nNext: Initializing Union Members, Previous: Declaring Union Variables at\\nDefinition, Up: Declaring Union Variables   \"}]","[{\"text\":\"[Contents][Index]\\n\\n2.3.2.2 Declaring Union Variables After Definition\\n\\nYou can declare variables of a union type after you define the union by\\nusing the union keyword and the name you gave the union type, followed\\n\"}]","[{\"text\":\"by one or more variable names separated by commas.\\n\\n\\n\\n\\n\\nunion numbers\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nint i;\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"float f;\\n\\n\\n\\n\\n\\n\\n};\\n\\n\\n\\n\\nunion numbers first_number, \"}]","[{\"text\":\"second_number;\\n\\nThat example declares two variables of type union numbers, first_number\\nand second_number.\\n\\n------------------------------------------------------------------------\\n\\nPrevious: \"}]","[{\"text\":\"Declaring Union Variables After Definition, Up: Declaring\\nUnion Variables   [Contents][Index]\\n\\n2.3.2.3 Initializing Union Members\\n\\nYou can initialize the first member of a union variable when you declare\\n\"}]","[{\"text\":\"it:\\n\\n\\n\\n\\n\\nunion numbers\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int i;\\n\\n\\n\\n\\n\\n\\n\\n\\nfloat f;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"};\\n\\n\\n\\n\\nunion numbers first_number = { 5 };\\n\\nIn that example, the i member of first_number gets the value 5. The f\\nmember is left alone.\\n\"}]","[{\"text\":\"Another way to initialize a union member is to specify the name of the\\nmember to initialize. This way, you can initialize whichever member you\\nwant to, not just the first one. There are two methods that you can\\nuse—either follow the member name \"}]","[{\"text\":\"with a colon, and then its value, like\\nthis:\\n\\n\\n\\n\\n\\nunion numbers first_number = { f: 3.14159 };\\n\\nor precede the \"}]","[{\"text\":\"member name with a period and assign a value with the\\nassignment operator, like this:\\n\\n\\n\\n\\n\\nunion numbers first_number = { .f = 3.14159 };\\n\\n\"}]","[{\"text\":\"You can also initialize a union member when you declare the union\\nvariable during the definition:\\n\\n\\n\\n\\n\\nunion numbers\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nint i;\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"float f;\\n\\n\\n\\n\\n\\n\\n} first_number = { 5 };\\n\\n------------------------------------------------------------------------\\n\"}]","[{\"text\":\"Next: Size of Unions, Previous: Declaring Union Variables, Up: Unions  \\n[Contents][Index]\\n\\n2.3.3 Accessing Union Members\\n\\nYou can access the members of a union variable using the member access\\noperator. You put \"}]","[{\"text\":\"the name of the union variable on the left side of the\\noperator, and the name of the member on the right side.\\n\\n\\n\\n\\n\\nunion numbers\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nint i;\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"float f;\\n\\n\\n\\n\\n\\n\\n};\\n\\n\\n\\n\\nunion numbers first_number;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"first_number.i = 5;\\n\\n\\n\\n\\nfirst_number.f = 3.9;\\n\\nNotice in that example that giving a value to the f member overrides the\\nvalue stored in \"}]","[{\"text\":\"the i member.\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Accessing Union Members, Up: Unions   [Contents][Index]\\n\\n2.3.4 Size of Unions\\n\"}]","[{\"text\":\"This size of a union is equal to the size of its largest member.\\nConsider the first union example from this section:\\n\\n\\n\\n\\n\\nunion numbers\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nint i;\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"float f;\\n\\n\\n\\n\\n\\n\\n};\\n\\nThe size of the union data type is the same as sizeof (float), because\\nthe float type is \"}]","[{\"text\":\"larger than the int type. Since all of the members of\\na union occupy the same memory space, the union data type size doesn’t\\nneed to be large enough to hold the sum of all their sizes; it just\\nneeds to be large enough to hold the largest member.\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Arrays, Previous: Unions, Up: Data Types   [Contents][Index]\\n\\n2.4 Structures\\n\\nA structure is a programmer-defined \"}]","[{\"text\":\"data type made up of variables of\\nother data types (possibly including other structure types).\\n\\n\\n\\n---------------------------------- ---- --\\n\\n\\n\"}]","[{\"text\":\"• Defining Structures:                  \\n\\n\\n• Declaring Structure Variables:        \\n\\n\\n• Accessing Structure Members:          \\n\\n\\n\"}]","[{\"text\":\"• Bit Fields:                           \\n\\n\\n• Size of Structures:                   \\n\\n\\n---------------------------------- ---- --\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Declaring Structure Variables, Up: Structures   [Contents][Index]\\n\\n2.4.1 Defining Structures\\n\\nYou define a \"}]","[{\"text\":\"structure using the struct keyword followed by the\\ndeclarations of the structure’s members, enclosed in braces. You declare\\neach member of a structure just as you would normally declare a\\nvariable—using the data type followed by one or more \"}]","[{\"text\":\"variable names\\nseparated by commas, and ending with a semicolon. Then end the structure\\ndefinition with a semicolon after the closing brace.\\n\\nYou should also include a name for the structure in between the struct\\nkeyword and the \"}]","[{\"text\":\"opening brace. This is optional, but if you leave it\\nout, you can’t refer to that structure data type later on (without a\\ntypedef, see The typedef Statement).\\n\\nHere is an example of defining a simple structure for holding the X and\\n\"}]","[{\"text\":\"Y coordinates of a point:\\n\\n\\n\\n\\n\\nstruct point\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nint x, y;\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"};\\n\\nThat defines a structure type named struct point, which contains two\\nmembers, x and y, both of which are of type int.\\n\\nStructures (and unions) may contain instances of other structures and\\n\"}]","[{\"text\":\"unions, but of course not themselves. It is possible for a structure or\\nunion type to contain a field which is a pointer to the same type (see\\nIncomplete Types).\\n\\n------------------------------------------------------------------------\\n\"}]","[{\"text\":\"Next: Accessing Structure Members, Previous: Defining Structures, Up:\\nStructures   [Contents][Index]\\n\\n2.4.2 Declaring Structure Variables\\n\\nYou can declare variables of a structure type when both you initially\\n\"}]","[{\"text\":\"define the structure and after the definition, provided you gave the\\nstructure type a name.\\n\\n\\n\\n--------------------------------------------------- ---- --\\n\\n\\n\"}]","[{\"text\":\"• Declaring Structure Variables at Definition:           \\n\\n\\n• Declaring Structure Variables After Definition:        \\n\\n\\n• Initializing Structure \"}]","[{\"text\":\"Members:                        \\n\\n\\n--------------------------------------------------- ---- --\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Next: Declaring Structure Variables After Definition, Up: Declaring\\nStructure Variables   [Contents][Index]\\n\\n2.4.2.1 Declaring Structure Variables at Definition\\n\\nYou can declare variables of a \"}]","[{\"text\":\"structure type when you define the\\nstructure type by putting the variable names after the closing brace of\\nthe structure definition, but before the final semicolon. You can\\ndeclare more than one such variable by separating the names with commas.\\n\\n\\n\\n\\n\"}]","[{\"text\":\"struct point\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int x, y;\\n\\n\\n\\n\\n\\n\\n} first_point, second_point;\\n\\nThat example declares two variables of type struct point, first_point\\n\"}]","[{\"text\":\"and second_point.\\n\\n------------------------------------------------------------------------\\n\\nNext: Initializing Structure Members, Previous: Declaring Structure\\nVariables at Definition, Up: Declaring Structure \"}]","[{\"text\":\"Variables  \\n[Contents][Index]\\n\\n2.4.2.2 Declaring Structure Variables After Definition\\n\\nYou can declare variables of a structure type after defining the\\nstructure by using the struct keyword and the name you \"}]","[{\"text\":\"gave the\\nstructure type, followed by one or more variable names separated by\\ncommas.\\n\\n\\n\\n\\n\\nstruct point\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nint x, y;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"};\\n\\n\\n\\n\\nstruct point first_point, second_point;\\n\\nThat example declares two variables of type struct point, first_point\\nand second_point.\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nPrevious: Declaring Structure Variables After Definition, Up: Declaring\\nStructure Variables   [Contents][Index]\\n\\n2.4.2.3 \"}]","[{\"text\":\"Initializing Structure Members\\n\\nYou can initialize the members of a structure type to have certain\\nvalues when you declare structure variables.\\n\\nIf you do not initialize a structure variable, the \"}]","[{\"text\":\"effect depends on\\nwhether it has static storage (see Storage Class Specifiers) or not. If\\nit is, members with integral types are initialized with 0 and pointer\\nmembers are initialized to NULL; otherwise, the value of the structure’s\\nmembers is \"}]","[{\"text\":\"indeterminate.\\n\\nOne way to initialize a structure is to specify the values in a set of\\nbraces and separated by commas. Those values are assigned to the\\nstructure members in the same order that the members are declared in the\\n\"}]","[{\"text\":\"structure in definition.\\n\\n\\n\\n\\n\\nstruct point\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nint x, y;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"};\\n\\n\\n\\n\\nstruct point first_point = { 5, 10 };\\n\\nIn that example, the x member of first_point gets the value 5, and the y\\nmember gets the value 10.\\n\"}]","[{\"text\":\"Another way to initialize the members is to specify the name of the\\nmember to initialize. This way, you can initialize the members in any\\norder you like, and even leave some of them uninitialized. There are two\\nmethods that you can use. The first \"}]","[{\"text\":\"method is available in C99 and as a\\nC89 extension in GCC:\\n\\n\\n\\n\\n\\nstruct point first_point = { .y = 10, .x = 5 };\\n\\nYou can also omit \"}]","[{\"text\":\"the period and use a colon instead of ‘=’, though this\\nis a GNU C extension:\\n\\n\\n\\n\\n\\nstruct point first_point = { y: 10, x: 5 };\\n\\n\"}]","[{\"text\":\"You can also initialize the structure variable’s members when you\\ndeclare the variable during the structure definition:\\n\\n\\n\\n\\n\\nstruct point\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nint x, y;\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"} first_point = { 5, 10 };\\n\\nYou can also initialize fewer than all of a structure variable’s\\nmembers:\\n\\n\\n\\n\\n\\nstruct pointy\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nint x, y;\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"char *p;\\n\\n\\n\\n\\n\\n\\n};\\n\\n\\n\\n\\nstruct pointy first_pointy = { 5 };\\n\"}]","[{\"text\":\"Here, x is initialized with 5, y is initialized with 0, and p is\\ninitialized with NULL. The rule here is that y and p are initialized\\njust as they would be if they were static variables.\\n\\nHere is another example that \"}]","[{\"text\":\"initializes a structure’s members which are\\nstructure variables themselves:\\n\\n\\n\\n\\n\\nstruct point\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nint x, y;\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"};\\n\\n\\n\\n\\n\\nstruct rectangle\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"struct point top_left, bottom_right;\\n\\n\\n\\n\\n\\n\\n};\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"struct rectangle my_rectangle = { {0, 5}, {10, 0} };\\n\\nThat example defines the rectangle structure to consist of two point\\nstructure variables. Then it declares one variable of type\\nstruct rectangle and initializes its \"}]","[{\"text\":\"members. Since its members are\\nstructure variables, we used an extra set of braces surrounding the\\nmembers that belong to the point structure variables. However, those\\nextra braces are not necessary; they just make the code easier to read.\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Bit Fields, Previous: Declaring Structure Variables, Up:\\nStructures   [Contents][Index]\\n\\n2.4.3 Accessing Structure Members\\n\"}]","[{\"text\":\"You can access the members of a structure variable using the member\\naccess operator. You put the name of the structure variable on the left\\nside of the operator, and the name of the member on the right side.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"struct point\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int x, y;\\n\\n\\n\\n\\n\\n\\n};\\n\\n\\n\\n\\n\\nstruct point \"}]","[{\"text\":\"first_point;\\n\\n\\n\\n\\n\\nfirst_point.x = 0;\\n\\n\\n\\n\\nfirst_point.y = 5;\\n\\nYou can also \"}]","[{\"text\":\"access the members of a structure variable which is itself\\na member of a structure variable.\\n\\n\\n\\n\\n\\nstruct rectangle\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nstruct point top_left, bottom_right;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"};\\n\\n\\n\\n\\n\\nstruct rectangle my_rectangle;\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"my_rectangle.top_left.x = 0;\\n\\n\\n\\n\\nmy_rectangle.top_left.y = 5;\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"my_rectangle.bottom_right.x = 10;\\n\\n\\n\\n\\nmy_rectangle.bottom_right.y = 0;\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Next: Size of Structures, Previous: Accessing Structure Members, Up:\\nStructures   [Contents][Index]\\n\\n2.4.4 Bit Fields\\n\\nYou can create structures with integer members of nonstandard sizes,\\ncalled _bit \"}]","[{\"text\":\"fields_. You do this by specifying an integer (int, char,\\nlong int, etc.) member as usual, and inserting a colon and the number of\\nbits that the member should occupy in between the member’s name and the\\nsemicolon.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"struct card\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"unsigned int suit : 2;\\n\\n\\n\\n\\n\\n\\n\\n\\nunsigned int face_value : 4;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"};\\n\\nThat example defines a structure type with two bit fields, suit and\\nface_value, which take up 2 bits and 4 bits, respectively. suit can hold\\nvalues from 0 to 3, and face_value can hold values from 0 to 15. Notice\\n\"}]","[{\"text\":\"that these bit fields were declared as unsigned int; had they been\\nsigned integers, then their ranges would have been from -2 to 1, and\\nfrom -8 to 7, respectively.\\n\\nMore generally, the range of an unsigned bit field of \"}]","[{\"text\":\"_N_ bits is from 0\\nto _2^N - 1_, and the range of a signed bit field of _N_ bits is from\\n_-(2^N) / 2_ to _((2^N) / 2) - 1_.\\n\\nBit fields can be specified without a name in order to control which\\nactual bits within the containing \"}]","[{\"text\":\"unit are used. However, the effect of\\nthis is not very portable and it is rarely useful. You can also specify\\na bit field of size 0, which indicates that subsequent bit fields not\\nfurther bit fields should be packed into the unit containing the\\n\"}]","[{\"text\":\"previous bit field. This is likewise not generally useful.\\n\\nYou may not take the address of a bit field with the address operator &\\n(see Pointer Operators).\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nPrevious: Bit Fields, Up: Structures   [Contents][Index]\\n\\n2.4.5 Size of Structures\\n\\nThe size of a structure type is equal \"}]","[{\"text\":\"to the sum of the size of all of\\nits members, possibly including padding to cause the structure type to\\nalign to a particular byte boundary. The details vary depending on your\\ncomputer platform, but it would not be atypical to see structures padded\\n\"}]","[{\"text\":\"to align on four- or eight-byte boundaries. This is done in order to\\nspeed up memory accesses of instances of the structure type.\\n\\nAs a GNU extension, GCC allows structures with no members. Such\\nstructures have \"}]","[{\"text\":\"zero size.\\n\\nIf you wish to explicitly omit padding from your structure types (which\\nmay, in turn, decrease the speed of structure memory accesses), then GCC\\nprovides multiple methods of turning packing off. The quick and easy\\n\"}]","[{\"text\":\"method is to use the -fpack-struct compiler option. For more details on\\nomitting packing, please see the GCC manual which corresponds to your\\nversion of the compiler.\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Pointers, Previous: Structures, Up: Data Types   [Contents][Index]\\n\\n2.5 Arrays\\n\\nAn array is a data structure that \"}]","[{\"text\":\"lets you store one or more elements\\nconsecutively in memory. In C, array elements are indexed beginning at\\nposition zero, not one.\\n\\n\\n\\n----------------------------- ---- --\\n\\n\\n\"}]","[{\"text\":\"• Declaring Arrays:                \\n\\n\\n• Initializing Arrays:             \\n\\n\\n• Accessing Array Elements:        \\n\\n\\n• Multidimensional Arrays:         \\n\\n\\n\"}]","[{\"text\":\"• Arrays as Strings:               \\n\\n\\n• Arrays of Unions:                \\n\\n\\n• Arrays of Structures:            \\n\\n\\n----------------------------- ---- --\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Initializing Arrays, Up: Arrays   [Contents][Index]\\n\\n2.5.1 Declaring Arrays\\n\\nYou declare an \"}]","[{\"text\":\"array by specifying the data type for its elements, its\\nname, and the number of elements it can store. Here is an example that\\ndeclares an array that can store ten integers:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int my_array[10];\\n\\nFor standard C code, the number of elements in an array must be\\npositive.\\n\\nAs a GNU extension, the number of elements can be as small as zero.\\nZero-length arrays are useful as the \"}]","[{\"text\":\"last element of a structure which\\nis really a header for a variable-length object:\\n\\n\\n\\n\\n\\nstruct line\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\nint length;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"char contents[0];\\n\\n\\n\\n\\n};\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"struct line *this_line = (struct line *)\\n\\n\\n\\n\\n\\n\\n\\n\\nmalloc (sizeof (struct line) + this_length);\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"this_line -> length = this_length;\\n\\n\\n\\n\\n}\\n\\nAnother GNU extension allows you to declare an array size using\\nvariables, rather than only \"}]","[{\"text\":\"constants. For example, here is a function\\ndefinition that declares an array using its parameter as the number of\\nelements:\\n\\n\\n\\n\\n\\nint\\n\\n\\n\\n\\n\"}]","[{\"text\":\"my_function (int number)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\nint \"}]","[{\"text\":\"my_array[number];\\n\\n\\n\\n\\n\\n\\n…;\\n\\n\\n\\n\\n}\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Accessing Array Elements, Previous: Declaring Arrays, Up: Arrays  \\n[Contents][Index]\\n\\n2.5.2 Initializing Arrays\\n\\n\"}]","[{\"text\":\"You can initialize the elements in an array when you declare it by\\nlisting the initializing values, separated by commas, in a set of\\nbraces. Here is an example:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int my_array[5] = { 0, 1, 2, 3, 4 };\\n\\nYou don’t have to explicitly initialize all of the array elements. For\\nexample, this code initializes the first three elements as specified,\\nand then initializes the last two elements to a default \"}]","[{\"text\":\"value of zero:\\n\\n\\n\\n\\n\\nint my_array[5] = { 0, 1, 2 };\\n\\nWhen using either ISO C99, or C89 with GNU extensions, you can\\ninitialize array \"}]","[{\"text\":\"elements out of order, by specifying which array\\nindices to initialize. To do this, include the array index in brackets,\\nand optionally the assignment operator, before the value. Here is an\\nexample:\\n\\n\\n\\n\"}]","[{\"text\":\"int my_array[5] = { [2] 5, [4] 9 };\\n\\nOr, using the assignment operator:\\n\\n\\n\\n\\n\\nint my_array[5] = { [2] = 5, [4] = 9 };\\n\\n\"}]","[{\"text\":\"Both of those examples are equivalent to:\\n\\n\\n\\n\\n\\nint my_array[5] = { 0, 0, 5, 0, 9 };\\n\\nWhen using GNU extensions, you can initialize a range of \"}]","[{\"text\":\"elements to the\\nsame value, by specifying the first and last indices, in the form\\n\\n\\nfirst] ... [last] . Here is an example:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int new_array[100] = { [0 ... 9] = 1, [10 ... 98] = 2, 3 };\\n\\nThat initializes elements 0 through 9 to 1, elements 10 through 98 to 2,\\nand element 99 to 3. (You also could explicitly write [99] = 3.) Also,\\nnotice that you \"}]","[{\"text\":\"_must_ have spaces on both sides of the ‘...’.\\n\\nIf you initialize every element of an array, then you do not have to\\nspecify its size; its size is determined by the number of elements you\\ninitialize. Here is an example:\\n\\n\\n\"}]","[{\"text\":\"int my_array[] = { 0, 1, 2, 3, 4 };\\n\\nAlthough this does not explicitly state that the array has five elements\\nusing my_array[5], it initializes five elements, so that is how many it\\nhas.\\n\\nAlternately, if \"}]","[{\"text\":\"you specify which elements to initialize, then the size\\nof the array is equal to the highest element number initialized, plus\\none. For example:\\n\\n\\n\\n\\n\\nint my_array[] = { \"}]","[{\"text\":\"0, 1, 2, [99] = 99 };\\n\\nIn that example, only four elements are initialized, but the last one\\ninitialized is element number 99, so there are 100 elements.\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Multidimensional Arrays, Previous: Initializing Arrays, Up: Arrays\\n\\n\\n[Contents][Index]\\n\\n2.5.3 Accessing \"}]","[{\"text\":\"Array Elements\\n\\nYou can access the elements of an array by specifying the array name,\\nfollowed by the element index, enclosed in brackets. Remember that the\\narray elements are numbered starting with zero. Here is an example:\\n\\n\\n\"}]","[{\"text\":\"my_array[0] = 5;\\n\\nThat assigns the value 5 to the first element in the array, at position\\nzero. You can treat individual array elements like variables of whatever\\ndata type the array is made up of. For example, if you have an array\\n\"}]","[{\"text\":\"made of a structure data type, you can access the structure elements\\nlike this:\\n\\n\\n\\n\\n\\nstruct point\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\nint x, y;\\n\\n\\n\\n\\n};\\n\\n\\n\\n\\n\"}]","[{\"text\":\"struct point point_array[2] = { {4, 5}, {8, 9} };\\n\\n\\n\\n\\npoint_array[0].x = 3;\\n\\n------------------------------------------------------------------------\\n\"}]","[{\"text\":\"Next: Arrays as Strings, Previous: Accessing Array Elements, Up: Arrays\\n\\n\\n[Contents][Index]\\n\\n2.5.4 Multidimensional Arrays\\n\\nYou can make multidimensional arrays, or “arrays of \"}]","[{\"text\":\"arrays”. You do this\\nby adding an extra set of brackets and array lengths for every\\nadditional dimension you want your array to have. For example, here is a\\ndeclaration for a two-dimensional array that holds five elements in each\\n\"}]","[{\"text\":\"dimension (a two-element array consisting of five-element arrays):\\n\\n\\n\\n\\n\\nint two_dimensions[2][5] { {1, 2, 3, 4, 5}, {6, 7, 8, 9, 10} };\\n\\n\"}]","[{\"text\":\"Multidimensional array elements are accessed by specifying the desired\\nindex of both dimensions:\\n\\n\\n\\n\\n\\ntwo_dimensions[1][3] = 12;\\n\\n\"}]","[{\"text\":\"In our example, two_dimensions[0] is itself an array. The element\\ntwo_dimensions[0][2] is followed by two_dimensions[0][3], not by\\ntwo_dimensions[1][2].\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Arrays of Unions, Previous: Multidimensional Arrays, Up: Arrays  \\n[Contents][Index]\\n\\n2.5.5 Arrays as Strings\\n\\n\"}]","[{\"text\":\"You can use an array of characters to hold a string (see String\\nConstants). The array may be built of either signed or unsigned\\ncharacters.\\n\\nWhen you declare the array, you can specify the number of elements it\\n\"}]","[{\"text\":\"will have. That number will be the maximum number of characters that\\nshould be in the string, including the null character used to end the\\nstring. If you choose this option, then you do not have to initialize\\nthe array when you declare it. \"}]","[{\"text\":\"Alternately, you can simply initialize\\nthe array to a value, and its size will then be exactly large enough to\\nhold whatever string you used to initialize it.\\n\\nThere are two different ways to initialize the array. \"}]","[{\"text\":\"You can specify of\\ncomma-delimited list of characters enclosed in braces, or you can\\nspecify a string literal enclosed in double quotation marks.\\n\\nHere are some examples:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"char blue[26];\\n\\n\\n\\n\\nchar yellow[26] = {'y', 'e', 'l', 'l', 'o', 'w', '\\\\0'};\\n\\n\\n\\n\\nchar orange[26] = \\\"orange\\\";\\n\\n\\n\\n\\n\"}]","[{\"text\":\"char gray[] = {'g', 'r', 'a', 'y', '\\\\0'};\\n\\n\\n\\n\\nchar salmon[] = \\\"salmon\\\";\\n\\nIn each of these cases, the null character \\\\0 is included at the end of\\n\"}]","[{\"text\":\"the string, even when not explicitly stated. (Note that if you\\ninitialize a string using an array of individual characters, then the\\nnull character is _not_ guaranteed to be present. It might be, but such\\nan occurrence would be one of chance, \"}]","[{\"text\":\"and should not be relied upon.)\\n\\nAfter initialization, you cannot assign a new string literal to an array\\nusing the assignment operator. For example, this _will not work_:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"char lemon[26] = \\\"custard\\\";\\n\\n\\n\\n\\nlemon = \\\"steak sauce\\\";      /* Fails! */\\n\\nHowever, there are functions in the GNU C library that perform\\n\"}]","[{\"text\":\"operations (including copy) on string arrays. You can also change one\\ncharacter at a time, by accessing individual string elements as you\\nwould any other array:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"char name[] = \\\"bob\\\";\\n\\n\\n\\n\\nname[0] = 'r';\\n\\nIt is possible for you to explicitly state the number of elements in the\\narray, and then initialize it using a \"}]","[{\"text\":\"string that has more characters\\nthan there are elements in the array. This is not a good thing. The\\nlarger string will _not_ override the previously specified size of the\\narray, and you will get a compile-time warning. Since the original array\\n\"}]","[{\"text\":\"size remains, any part of the string that exceeds that original size is\\nbeing written to a memory location that was not allocated for it.\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Next: Arrays of Structures, Previous: Arrays as Strings, Up: Arrays  \\n[Contents][Index]\\n\\n2.5.6 Arrays of Unions\\n\\nYou can create an array of a union type just as you can an array of a\\nprimitive data \"}]","[{\"text\":\"type.\\n\\n\\n\\n\\n\\nunion numbers\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int i;\\n\\n\\n\\n\\n\\n\\n\\n\\nfloat f;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"};\\n\\n\\n\\n\\nunion numbers number_array [3];\\n\\nThat example creates a 3-element array of union numbers variables called\\nnumber_array. You can also initialize \"}]","[{\"text\":\"the first members of the elements\\nof a number array:\\n\\n\\n\\n\\n\\nunion numbers number_array [3] = { {3}, {4}, {5} };\\n\\nThe additional inner grouping braces \"}]","[{\"text\":\"are optional.\\n\\nAfter initialization, you can still access the union members in the\\narray using the member access operator. You put the array name and\\nelement number (enclosed in brackets) to the left of the operator, and\\n\"}]","[{\"text\":\"the member name to the right.\\n\\n\\n\\n\\n\\nunion numbers number_array [3];\\n\\n\\n\\n\\nnumber_array[0].i \"}]","[{\"text\":\"= 2;\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Arrays of Unions, Up: Arrays   [Contents][Index]\\n\\n2.5.7 Arrays of Structures\\n\"}]","[{\"text\":\"You can create an array of a structure type just as you can an array of\\na primitive data type.\\n\\n\\n\\n\\n\\nstruct point\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nint x, y;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"};\\n\\n\\n\\n\\nstruct point point_array [3];\\n\\nThat example creates a 3-element array of struct point variables called\\npoint_array. You can also initialize \"}]","[{\"text\":\"the elements of a structure array:\\n\\n\\n\\n\\n\\nstruct point point_array [3] = { {2, 3}, {4, 5}, {6, 7} };\\n\\nAs with initializing structures which \"}]","[{\"text\":\"contain structure members, the\\nadditional inner grouping braces are optional. But, if you use the\\nadditional braces, then you can partially initialize some of the\\nstructures in the array, and fully initialize others:\\n\\n\\n\\n\"}]","[{\"text\":\"struct point point_array [3] = { {2}, {4, 5}, {6, 7} };\\n\\nIn that example, the first element of the array has only its x member\\ninitialized. Because of the grouping braces, the value 4 is assigned to\\nthe x member of the second array \"}]","[{\"text\":\"element, _not_ to the y member of the\\nfirst element, as would be the case without the grouping braces.\\n\\nAfter initialization, you can still access the structure members in the\\narray using the member access operator. You put the \"}]","[{\"text\":\"array name and\\nelement number (enclosed in brackets) to the left of the operator, and\\nthe member name to the right.\\n\\n\\n\\n\\n\\nstruct point point_array [3];\\n\\n\\n\\n\\n\"}]","[{\"text\":\"point_array[0].x = 2;\\n\\n\\n\\n\\npoint_array[0].y = 3;\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Next: Incomplete Types, Previous: Arrays, Up: Data Types  \\n[Contents][Index]\\n\\n2.6 Pointers\\n\\nPointers hold memory addresses of stored constants or variables. For any\\ndata type, including both primitive \"}]","[{\"text\":\"types and custom types, you can\\ncreate a pointer that holds the memory address of an instance of that\\ntype.\\n\\n\\n\\n--------------------------- ---- --\\n\\n\\n\"}]","[{\"text\":\"• Declaring Pointers:            \\n\\n\\n• Initializing Pointers:         \\n\\n\\n• Pointers to Unions:            \\n\\n\\n• Pointers to Structures:        \\n\\n\"}]","[{\"text\":\"--------------------------- ---- --\\n\\n------------------------------------------------------------------------\\n\\nNext: Initializing Pointers, Up: Pointers   [Contents][Index]\\n\\n2.6.1 Declaring \"}]","[{\"text\":\"Pointers\\n\\nYou declare a pointer by specifying a name for it and a data type. The\\ndata type indicates of what type of variable the pointer will hold\\nmemory addresses.\\n\\nTo declare a pointer, include the \"}]","[{\"text\":\"indirection operator (see Pointer\\nOperators) before the identifier. Here is the general form of a pointer\\ndeclaration:\\n\\n\\n\\n\\n\\ndata-type * name;\\n\\n\"}]","[{\"text\":\"White space is not significant around the indirection operator:\\n\\n\\n\\n\\n\\ndata-type *name;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"data-type* name;\\n\\nHere is an example of declaring a pointer to hold the address of an int\\nvariable:\\n\\n\\n\\n\\n\\nint *ip;\\n\\n\"}]","[{\"text\":\"Be careful, though: when declaring multiple pointers in the same\\nstatement, you must explicitly declare each as a pointer, using the\\nindirection operator:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int *foo, *bar;  /* Two pointers. */\\n\\n\\n\\n\\nint *baz, quux;   /* A pointer and an integer variable. */\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Pointers to Unions, Previous: Declaring Pointers, Up: Pointers  \\n[Contents][Index]\\n\\n2.6.2 Initializing Pointers\\n\\n\"}]","[{\"text\":\"You can initialize a pointer when you first declare it by specifying a\\nvariable address to store in it. For example, the following code\\ndeclares an int variable ‘i’, and a pointer which is initialized with\\nthe address of ‘i’:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int i;\\n\\n\\n\\n\\nint *ip = &i;\\n\\nNote the use of the address operator (see Pointer Operators), used to\\nget the memory address of a variable. After you declare \"}]","[{\"text\":\"a pointer, you\\ndo _not_ use the indirection operator with the pointer’s name when\\nassigning it a new address to point to. On the contrary, that would\\nchange the value of the variable that the points to, not the value of\\nthe pointer \"}]","[{\"text\":\"itself. For example:\\n\\n\\n\\n\\n\\nint i, j;\\n\\n\\n\\n\\nint *ip = &i;  /* ‘ip’ now holds the \"}]","[{\"text\":\"address of ‘i’. */\\n\\n\\n\\n\\nip = &j;       /* ‘ip’ now holds the address of ‘j’. */\\n\\n\\n\\n\\n*ip = &i;      /* ‘j’ now holds the \"}]","[{\"text\":\"address of ‘i’. */\\n\\nThe value stored in a pointer is an integral number: a location within\\nthe computer’s memory space. If you are so inclined, you can assign\\npointer values explicitly using literal integers, casting them to the\\n\"}]","[{\"text\":\"appropriate pointer type. However, we do not recommend this practice\\nunless you need to have extremely fine-tuned control over what is stored\\nin memory, and you know exactly what you are doing. It would be all too\\neasy to accidentally overwrite \"}]","[{\"text\":\"something that you did not intend to.\\nMost uses of this technique are also non-portable.\\n\\nIt is important to note that if you do not initialize a pointer with the\\naddress of some other existing object, it points nowhere in particular\\n\"}]","[{\"text\":\"and will likely make your program crash if you use it (formally, this\\nkind of thing is called _undefined behavior_).\\n\\n------------------------------------------------------------------------\\n\\nNext: Pointers to \"}]","[{\"text\":\"Structures, Previous: Initializing Pointers, Up:\\nPointers   [Contents][Index]\\n\\n2.6.3 Pointers to Unions\\n\\nYou can create a pointer to a union type just as you can a pointer to a\\nprimitive data \"}]","[{\"text\":\"type.\\n\\n\\n\\n\\n\\nunion numbers\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int i;\\n\\n\\n\\n\\n\\n\\n\\n\\nfloat f;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"};\\n\\n\\n\\n\\nunion numbers foo = {4};\\n\\n\\n\\n\\nunion numbers *number_ptr = &foo;\\n\\n\"}]","[{\"text\":\"That example creates a new union type, union numbers, and declares (and\\ninitializes the first member of) a variable of that type named foo.\\nFinally, it declares a pointer to the type union numbers, and gives it\\nthe address of foo.\\n\"}]","[{\"text\":\"You can access the members of a union variable through a pointer, but\\nyou can’t use the regular member access operator anymore. Instead, you\\nhave to use the indirect member access operator (see Member Access\\nExpressions). Continuing with the \"}]","[{\"text\":\"previous example, the following\\nexample will change the value of the first member of foo:\\n\\n\\n\\n\\n\\nnumber_ptr -> i = 450;\\n\\n\"}]","[{\"text\":\"Now the i member in foo is 450.\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Pointers to Unions, Up: Pointers   [Contents][Index]\\n\\n2.6.4 Pointers to \"}]","[{\"text\":\"Structures\\n\\nYou can create a pointer to a structure type just as you can a pointer\\nto a primitive data type.\\n\\n\\n\\n\\n\\nstruct fish\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nfloat length, weight;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"};\\n\\n\\n\\n\\nstruct fish salmon = {4.3, 5.8};\\n\\n\\n\\n\\nstruct fish *fish_ptr = &salmon;\\n\\n\"}]","[{\"text\":\"That example creates a new structure type, struct fish, and declares\\n(and initializes) a variable of that type named salmon. Finally, it\\ndeclares a pointer to the type struct fish, and gives it the address of\\nsalmon.\\n\\n\"}]","[{\"text\":\"You can access the members of a structure variable through a pointer,\\nbut you can’t use the regular member access operator anymore. Instead,\\nyou have to use the indirect member access operator (see Member Access\\nExpressions). Continuing with the \"}]","[{\"text\":\"previous example, the following\\nexample will change the values of the members of salmon:\\n\\n\\n\\n\\n\\nfish_ptr -> length = 5.1;\\n\\n\\n\\n\"}]","[{\"text\":\"fish_ptr -> weight = 6.2;\\n\\nNow the length and width members in salmon are 5.1 and 6.2,\\nrespectively.\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Next: Type Qualifiers, Previous: Pointers, Up: Data Types  \\n[Contents][Index]\\n\\n2.7 Incomplete Types\\n\\nYou can define structures, unions, and enumerations without listing\\ntheir members (or \"}]","[{\"text\":\"values, in the case of enumerations). Doing so results\\nin an incomplete type. You can’t declare variables of incomplete types,\\nbut you can work with pointers to those types.\\n\\n\\n\\n\\n\"}]","[{\"text\":\"struct point;\\n\\nAt some time later in your program you will want to complete the type.\\nYou do this by defining it as you usually would:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"struct point\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int x, y;\\n\\n\\n\\n\\n\\n\\n};\\n\\nThis technique is commonly used to for linked lists:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"struct singly_linked_list\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"struct singly_linked_list *next;\\n\\n\\n\\n\\n\\n\\n\\n\\nint x;\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* other members here perhaps */\\n\\n\\n\\n\\n\\n\\n};\\n\\n\\n\\n\\nstruct \"}]","[{\"text\":\"singly_linked_list *list_head;\\n\\n------------------------------------------------------------------------\\n\\nNext: Storage Class Specifiers, Previous: Incomplete Types, Up: Data\\nTypes   [Contents][Index]\\n\"}]","[{\"text\":\"2.8 Type Qualifiers\\n\\nThere are two type qualifiers that you can prepend to your variable\\ndeclarations which change how the variables may be accessed: const and\\nvolatile.\\n\\nconst causes the \"}]","[{\"text\":\"variable to be read-only; after initialization, its\\nvalue may not be changed.\\n\\n\\n\\n\\n\\nconst float pi = 3.14159f;\\n\\nIn addition to \"}]","[{\"text\":\"helping to prevent accidental value changes, declaring\\nvariables with const can aid the compiler in code optimization.\\n\\nvolatile tells the compiler that the variable is explicitly changeable,\\nand seemingly useless accesses of the \"}]","[{\"text\":\"variable (for instance, via\\npointers) should not be optimized away. You might use volatile variables\\nto store data that is updated via callback functions or signal handlers.\\nSequence Points and Signal Delivery.\\n\\n\\n\\n\"}]","[{\"text\":\"volatile float currentTemperature = 40.0;\\n\\n------------------------------------------------------------------------\\n\\nNext: Renaming Types, Previous: Type Qualifiers, Up: Data Types  \\n[Contents][Index]\\n\"}]","[{\"text\":\"2.9 Storage Class Specifiers\\n\\nThere are four storage class specifiers that you can prepend to your\\nvariable declarations which change how the variables are stored in\\nmemory: auto, extern, register, and static.\\n\"}]","[{\"text\":\"You use auto for variables which are local to a function, and whose\\nvalues should be discarded upon return from the function in which they\\nare declared. This is the default behavior for variables declared within\\nfunctions.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"void\\n\\n\\n\\n\\nfoo (int value)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"auto int x = value;\\n\\n\\n\\n\\n\\n\\n…\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return;\\n\\n\\n\\n\\n}\\n\\nregister is nearly identical in purpose to auto, except that it also\\nsuggests to the compiler that the variable will be \"}]","[{\"text\":\"heavily used, and, if\\npossible, should be stored in a register. You cannot use the address-of\\noperator to obtain the address of a variable declared with register.\\nThis means that you cannot refer to the elements of an array declared\\n\"}]","[{\"text\":\"with storage class register. In fact the only thing you can do with such\\nan array is measure its size with sizeof. GCC normally makes good\\nchoices about which values to hold in registers, and so register is not\\noften used.\\n\\n\"}]","[{\"text\":\"static is essentially the opposite of auto: when applied to variables\\nwithin a function or block, these variables will retain their value even\\nwhen the function or block is finished. This is known as _static storage\\nduration_.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int\\n\\n\\n\\n\\nsum (int x)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"static int sumSoFar = 0;\\n\\n\\n\\n\\n\\n\\nsumSoFar = sumSoFar + x;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return sumSoFar;\\n\\n\\n\\n\\n}\\n\\nYou can also declare variables (or functions) at the top level (that is,\\nnot inside a function) to be static; such variables are \"}]","[{\"text\":\"visible (global)\\nto the current source file (but not other source files). This gives an\\nunfortunate double meaning to static; this second meaning is known as\\n_static linkage_. Two functions or variables having static linkage in\\nseparate files are \"}]","[{\"text\":\"entirely separate; neither is visible outside the\\nfile in which it is declared.\\n\\nUninitialized variables that are declared as extern are given default\\nvalues of 0, 0.0, or NULL, depending on the type. Uninitialized\\n\"}]","[{\"text\":\"variables that are declared as auto or register (including the default\\nusage of auto) are left uninitialized, and hence should not be assumed\\nto hold any particular value.\\n\\nextern is useful for declaring variables that you want \"}]","[{\"text\":\"to be visible to\\nall source files that are linked into your project. You cannot\\ninitialize a variable in an extern declaration, as no space is actually\\nallocated during the declaration. You must make both an extern\\ndeclaration \"}]","[{\"text\":\"(typically in a header file that is included by the other\\nsource files which need to access the variable) and a non-extern\\ndeclaration which is where space is actually allocated to store the\\nvariable. The extern declaration may \"}]","[{\"text\":\"be repeated multiple times.\\n\\n\\n\\n\\n\\nextern int numberOfClients;\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"…\\n\\n\\n\\n\\n\\nint numberOfClients = 0;\\n\\nSee Program Structure and Scope, for related information.\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nPrevious: Storage Class Specifiers, Up: Data Types   [Contents][Index]\\n\\n2.10 Renaming Types\\n\\nSometimes it is \"}]","[{\"text\":\"convenient to give a new name to a type. You can do this\\nusing the typedef statement. See The typedef Statement, for more\\ninformation.\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Next: Statements, Previous: Data Types, Up: Top   [Contents][Index]\\n\\n\\n3 Expressions and Operators\\n\\n\\n\\n----------------------------------------------- ---- --\\n\\n\\n\"}]","[{\"text\":\"• Expressions:                                       \\n\\n\\n• Assignment Operators:                              \\n\\n\\n• Incrementing and Decrementing:                     \\n\\n\\n\"}]","[{\"text\":\"• Arithmetic Operators:                              \\n\\n\\n• Complex Conjugation:                               \\n\\n\\n• Comparison Operators:                              \\n\\n\\n\"}]","[{\"text\":\"• Logical Operators:                                 \\n\\n\\n• Bit Shifting:                                      \\n\\n\\n• Bitwise Logical Operators:                         \\n\\n\\n\"}]","[{\"text\":\"• Pointer Operators:                                 \\n\\n\\n• The sizeof Operator:                               \\n\\n\\n• Type Casts:                                        \\n\\n\\n\"}]","[{\"text\":\"• Array Subscripts:                                  \\n\\n\\n• Function Calls as Expressions:                     \\n\\n\\n• The Comma Operator:                                \\n\\n\\n\"}]","[{\"text\":\"• Member Access Expressions:                         \\n\\n\\n• Conditional Expressions:                           \\n\\n\\n• Statements and Declarations in Expressions:        \\n\\n\\n\"}]","[{\"text\":\"• Operator Precedence:                               \\n\\n\\n• Order of Evaluation:                               \\n\\n\\n----------------------------------------------- ---- --\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Assignment Operators, Up: Expressions and Operators  \\n[Contents][Index]\\n\\n3.1 Expressions\\n\\nAn _expression_ \"}]","[{\"text\":\"consists of at least one operand and zero or more\\noperators. Operands are typed objects such as constants, variables, and\\nfunction calls that return values. Here are some examples:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"47\\n\\n\\n\\n\\n2 + 2\\n\\n\\n\\n\\ncosine(3.14159) /* We presume this returns a floating point value. */\\n\"}]","[{\"text\":\"Parentheses group subexpressions:\\n\\n\\n\\n\\n\\n( 2 * ( ( 3 + 10 ) - ( 2 * 6 ) ) )\\n\\nInnermost expressions are evaluated first. In the above example, 3 + 10\\n\"}]","[{\"text\":\"and 2 * 6 evaluate to 13 and 12, respectively. Then 12 is subtracted\\nfrom 13, resulting in 1. Finally, 1 is multiplied by 2, resulting in 2.\\nThe outermost parentheses are completely optional.\\n\\nAn _operator_ specifies an operation \"}]","[{\"text\":\"to be performed on its operand(s).\\nOperators may have one, two, or three operands, depending on the\\noperator.\\n\\n------------------------------------------------------------------------\\n\\nNext: Incrementing \"}]","[{\"text\":\"and Decrementing, Previous: Expressions, Up:\\nExpressions and Operators   [Contents][Index]\\n\\n3.2 Assignment Operators\\n\\nAssignment operators store values in variables. C provides several\\n\"}]","[{\"text\":\"variations of assignment operators.\\n\\nThe standard assignment operator = simply stores the value of its right\\noperand in the variable specified by its left operand. As with all\\nassignment operators, the left operand (commonly \"}]","[{\"text\":\"referred to as the\\n“lvalue”) cannot be a literal or constant value.\\n\\n\\n\\n\\n\\nint x = 10;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"float y = 45.12 + 2.0;\\n\\n\\n\\n\\nint z = (2 * (3 + function () ));\\n\\n\\n\\n\\n\\nstruct foo {\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int bar;\\n\\n\\n\\n\\n\\n\\nint baz;\\n\\n\\n\\n\\n} quux = {3, 4};\\n\\n\"}]","[{\"text\":\"Note that, unlike the other assignment operators described below, you\\ncan use the plain assignment operator to store values of a structure\\ntype.\\n\\nCompound assignment operators perform an operation involving both the\\n\"}]","[{\"text\":\"left and right operands, and then assign the resulting expression to the\\nleft operand. Here is a list of the compound assignment operators, and a\\nbrief description of what they do:\\n\\n-   +=\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Adds the two operands together, and then assign the result of the\\n\\n\\n\\n\\naddition to the left operand.\\n\\n-   -=\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Subtract the right operand from the left operand, and then assign\\n\\n\\n\\n\\nthe result of the subtraction to the left operand.\\n\\n-   *=\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Multiply the two operands together, and then assign the result of\\n\\n\\n\\n\\nthe multiplication to the left operand.\\n\\n-   /=\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Divide the left operand by the right operand, and assign the result\\n\\n\\n\\n\\nof the division to the left operand.\\n\\n-   %=\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Perform modular division on the two operands, and assign the result\\n\\n\\n\\n\\nof the division to the left operand.\\n\\n-   <<=\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Perform a left shift operation on the left operand, shifting by the\\n\\n\\n\\n\\nnumber of bits specified by the right operand, and assign the result\\n\\n\\n\\n\"}]","[{\"text\":\"of the shift to the left operand.\\n\\n-   >>=\\n\\n\\n\\n\\n\\nPerform a right shift operation on the left operand, shifting by the\\n\\n\\n\\n\\n\"}]","[{\"text\":\"number of bits specified by the right operand, and assign the result\\n\\n\\n\\n\\nof the shift to the left operand.\\n\\n-   &=\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Perform a bitwise conjunction operation on the two operands, and\\n\\n\\n\\n\\nassign the result of the operation to the left operand.\\n\\n-   ^=\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Performs a bitwise exclusive disjunction operation on the two\\n\\n\\n\\n\\noperands, and assign the result of the operation to the left\\n\\n\\n\\n\"}]","[{\"text\":\"operand.\\n\\n-   |=\\n\\n\\n\\n\\n\\nPerforms a bitwise inclusive disjunction operation on the two\\n\\n\\n\\n\\n\"}]","[{\"text\":\"operands, and assign the result of the operation to the left\\n\\n\\n\\n\\noperand.\\n\\nHere is an example of using one of the compound assignment operators:\\n\\n\\n\"}]","[{\"text\":\"x += y;\\n\\nSince there are no side effects wrought by evaluating the variable x as\\nan lvalue, the above code produces the same result as:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"x = x + y;\\n\\n------------------------------------------------------------------------\\n\\nNext: Arithmetic Operators, Previous: Assignment Operators, Up:\\nExpressions and Operators   [Contents][Index]\\n\"}]","[{\"text\":\"3.3 Incrementing and Decrementing\\n\\nThe increment operator ++ adds 1 to its operand. The operand must be a\\neither a variable of one of the primitive data types, a pointer, or an\\nenumeration variable. You can apply the increment \"}]","[{\"text\":\"operator either before\\nor after the operand. Here are some examples:\\n\\n\\n\\n\\n\\nchar w = '1';\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int x = 5;\\n\\n\\n\\n\\nchar y = 'B';\\n\\n\\n\\n\\nfloat z = 5.2;\\n\\n\\n\\n\"}]","[{\"text\":\"int *p = &x;\\n\\n\\n\\n\\n\\n++w;   /* w is now the character ‘2’ (not the value 2). */\\n\\n\\n\\n\\n\"}]","[{\"text\":\"x++;   /* x is now 6. */\\n\\n\\n\\n\\n++y;   /* y is now ‘C’ (on ASCII systems). */\\n\\n\\n\\n\\nz++;   /* z is now \"}]","[{\"text\":\"6.2. */\\n\\n\\n\\n\\n++p;   /* p is now &x + sizeof(int). */\\n\\n(Note that incrementing a pointer only makes sense if you have reason to\\nbelieve that the \"}]","[{\"text\":\"new pointer value will be a valid memory address.)\\n\\nA prefix increment adds 1 before the operand is evaluated. A postfix\\nincrement adds 1 after the operand is evaluated. In the previous\\nexamples, changing the position of \"}]","[{\"text\":\"the operator would make no\\ndifference. However, there are cases where it does make a difference:\\n\\n\\n\\n\\n\\nint x = 5;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"printf (\\\"%d \\\\n\\\", x++);    /* Print x and then increment it. */\\n\\n\\n\\n\\n/* x is now equal to 6. */\\n\\n\\n\\n\\n\"}]","[{\"text\":\"printf (\\\"%d \\\\n\\\", ++x);    /* Increment x and then print it. */\\n\\nThe output of the above example is:\\n\\n\\n\\n\\n\\n5\\n\\n\\n\"}]","[{\"text\":\"7\\n\\nLikewise, you can subtract 1 from an operand using the decrement\\noperator:\\n\\n\\n\\n\\n\\nint x = 5;\\n\\n\\n\\n\"}]","[{\"text\":\"x--; /* x is now 4. */\\n\\nThe concepts of prefix and postfix application apply here as with the\\nincrement operator.\\n\\n------------------------------------------------------------------------\\n\"}]","[{\"text\":\"Next: Complex Conjugation, Previous: Incrementing and Decrementing, Up:\\nExpressions and Operators   [Contents][Index]\\n\\n3.4 Arithmetic Operators\\n\\nC provides operators for standard arithmetic operations: \"}]","[{\"text\":\"addition,\\nsubtraction, multiplication, and division, along with modular division\\nand negation. Usage of these operators is straightforward; here are some\\nexamples:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* Addition. */\\n\\n\\n\\n\\nx = 5 + 3;\\n\\n\\n\\n\\ny = 10.23 + 37.332;\\n\\n\\n\\n\"}]","[{\"text\":\"quux_pointer = foo_pointer + bar_pointer;\\n\\n\\n\\n\\n\\n/* Subtraction. */\\n\\n\\n\\n\\nx = 5 - 3;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"y = 57.223 - 10.903;\\n\\n\\n\\n\\nquux_pointer = foo_pointer - bar_pointer;\\n\\nYou can add and subtract memory pointers, but you cannot multiply or\\n\"}]","[{\"text\":\"divide them.\\n\\n\\n\\n\\n\\n/* Multiplication. */\\n\\n\\n\\n\\nx = 5 * 3;\\n\\n\\n\"}]","[{\"text\":\"y = 47.4 * 1.001;\\n\\n\\n\\n\\n\\n/* Division. */\\n\\n\\n\\n\\nx = 5 / 3;\\n\\n\\n\\n\"}]","[{\"text\":\"y = 940.0 / 20.2;\\n\\nInteger division of positive values truncates towards zero, so 5/3 is 1.\\nHowever, if either operand is negative, the direction of rounding is\\nimplementation-defined. Signed Integer Division for information about\\n\"}]","[{\"text\":\"overflow in signed integer division.\\n\\nYou use the modulus operator % to obtain the remainder produced by\\ndividing its two operands. You put the operands on either side of the\\noperator, and it does matter which operand goes on which \"}]","[{\"text\":\"side: 3 % 5 and\\n5 % 3 do not have the same result. The operands must be expressions of a\\nprimitive data type.\\n\\n\\n\\n\\n\\n/* Modular division. */\\n\\n\\n\\n\\n\"}]","[{\"text\":\"x = 5 % 3;\\n\\n\\n\\n\\ny = 74 % 47;\\n\\nModular division returns the remainder produced after performing integer\\ndivision on the two operands. The operands must be of a \"}]","[{\"text\":\"primitive\\ninteger type.\\n\\n\\n\\n\\n\\n/* Negation. */\\n\\n\\n\\n\\nint x = -5;\\n\\n\\n\"}]","[{\"text\":\"float y = -3.14159;\\n\\nIf the operand you use with the negative operator is of an unsigned data\\ntype, then the result cannot negative, but rather is the maximum value\\nof the unsigned data type, minus the value of the \"}]","[{\"text\":\"operand.\\n\\nMany systems use twos-complement arithmetic, and on such systems the\\nmost negative value a signed type can hold is further away from zero\\nthan the most positive value. For example, on one platform, this\\n\"}]","[{\"text\":\"program:\\n\\n\\n\\n\\n\\n#include <limits.h>\\n\\n\\n\\n\\n#include <stdio.h>\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int main (int argc, char *argv[]) \\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\nint x;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"x = INT_MAX;\\n\\n\\n\\n\\n\\n\\nprintf(\\\"INT_MAX  = %d\\\\n\\\", x);\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"x = INT_MIN;\\n\\n\\n\\n\\n\\n\\nprintf(\\\"INT_MIN  = %d\\\\n\\\", x);\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"x = -x;\\n\\n\\n\\n\\n\\n\\nprintf(\\\"-INT_MIN = %d\\\\n\\\", x);\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return 0;\\n\\n\\n\\n\\n}\\n\\nProduces this output:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"INT_MAX  = 2147483647\\n\\n\\n\\n\\nINT_MIN  = -2147483648\\n\\n\\n\\n\\n-INT_MIN = -2147483648\\n\"}]","[{\"text\":\"Trivially, you can also apply a positive operator to a numeric\\nexpression:\\n\\n\\n\\n\\n\\nint x = +42;\\n\\nNumeric values are assumed to be \"}]","[{\"text\":\"positive unless explicitly made\\nnegative, so this operator has no effect on program operation.\\n\\n------------------------------------------------------------------------\\n\\nNext: Comparison Operators, Previous: \"}]","[{\"text\":\"Arithmetic Operators, Up:\\nExpressions and Operators   [Contents][Index]\\n\\n3.5 Complex Conjugation\\n\\nAs a GNU extension, you can use the complex conjugation operator ~ to\\nperform complex \"}]","[{\"text\":\"conjugation on its operand — that is, it reverses the\\nsign of its imaginary component. The operand must be an expression of a\\ncomplex number type. Here is an example:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"__complex__ int x = 5 + 17i;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nprintf (\\\"%d  \\\\n\\\", (x * ~x));\\n\"}]","[{\"text\":\"Since an imaginary number _(a + bi)_ multiplied by its conjugate is\\nequal to _a^2 + b^2_, the above printf statement will print 314, which\\nis equal to _25 + 289_.\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Logical Operators, Previous: Complex Conjugation, Up: Expressions\\nand Operators   [Contents][Index]\\n\\n3.6 Comparison Operators\\n\"}]","[{\"text\":\"You use the comparison operators to determine how two operands relate to\\neach other: are they equal to each other, is one larger than the other,\\nis one smaller than the other, and so on. When you use any of the\\ncomparison operators, the result is \"}]","[{\"text\":\"either 1 or 0, meaning true or\\nfalse, respectively.\\n\\n(In the following code examples, the variables x and y stand for any two\\nexpressions of arithmetic types, or pointers.)\\n\\nThe equal-to \"}]","[{\"text\":\"operator == tests its two operands for equality. The result\\nis 1 if the operands are equal, and 0 if the operands are not equal.\\n\\n\\n\\n\\n\\nif (x == y)\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"puts (\\\"x is equal to y\\\");\\n\\n\\n\\n\\nelse\\n\\n\\n\\n\\n\\n\\nputs (\\\"x is not \"}]","[{\"text\":\"equal to y\\\");\\n\\nThe not-equal-to operator != tests its two operands for inequality. The\\nresult is 1 if the operands are not equal, and 0 if the operands _are_\\nequal.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"if (x != y)\\n\\n\\n\\n\\n\\n\\nputs (\\\"x is not equal to y\\\");\\n\\n\\n\\n\\nelse\\n\\n\\n\\n\"}]","[{\"text\":\"puts (\\\"x is equal to y\\\");\\n\\nComparing floating-point values for exact equality or inequality can\\nproduce unexpected results. Real Number Types for more information.\\n\\nYou can compare function pointers for \"}]","[{\"text\":\"equality or inequality; the\\ncomparison tests if two function pointers point to the same function or\\nnot.\\n\\nBeyond equality and inequality, there are operators you can use to test\\nif one value is less than, greater \"}]","[{\"text\":\"than, less-than-or-equal-to, or\\ngreater-than-or-equal-to another value. Here are some code samples that\\nexemplify usage of these operators:\\n\\n\\n\\n\\n\\nif (x < y)\\n\\n\\n\\n\"}]","[{\"text\":\"puts (\\\"x is less than y\\\");\\n\\n\\n\\n\\n\\nif (x <= y)\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"puts (\\\"x is less than or equal to y\\\");\\n\\n\\n\\n\\n\\nif (x > y)\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"puts (\\\"x is greater than y\\\");\\n\\n\\n\\n\\n\\nif (x >= y)\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"puts (\\\"x is greater than or equal to y\\\");\\n\\n------------------------------------------------------------------------\\n\\nNext: Bit Shifting, Previous: Comparison Operators, Up: Expressions and\\nOperators   \"}]","[{\"text\":\"[Contents][Index]\\n\\n3.7 Logical Operators\\n\\nLogical operators test the truth value of a pair of operands. Any\\nnonzero expression is considered true in C, while an expression that\\nevaluates to zero \"}]","[{\"text\":\"is considered false.\\n\\nThe logical conjunction operator && tests if two expressions are both\\ntrue. If the first expression is false, then the second expression is\\nnot evaluated.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"if ((x == 5) && (y == 10))\\n\\n\\n\\n\\n\\n\\nprintf (\\\"x is 5 and y is 10\\\");\\n\\nThe logical disjunction operator || tests if at least \"}]","[{\"text\":\"one of two\\nexpressions it true. If the first expression is true, then the second\\nexpression is not evaluated.\\n\\n\\n\\n\\n\\nif ((x == 5) || (y == 10))\\n\\n\\n\\n\\n\"}]","[{\"text\":\"rintf (\\\"x is 5 or y is 10\\\");\\n\\nYou can prepend a logical expression with a negation operator ! to flip\\nthe truth value:\\n\\n\\n\\n\\n\\nif (!(x == 5))\\n\\n\\n\\n\"}]","[{\"text\":\"printf (\\\"x is not 5\\\");\\n\\nSince the second operand in a logical expression pair is not necessarily\\nevaluated, you can write code with perhaps unintuitive results:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"if (foo && x++)\\n\\n\\n\\n\\n\\n\\nbar();\\n\\nIf foo is ever zero, then not only would bar not be called, but x would\\nnot be \"}]","[{\"text\":\"incremented. If you intend to increment x regardless of the value\\nof foo, you should do so outside of the conjunction expression.\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Next: Bitwise Logical Operators, Previous: Logical Operators, Up:\\nExpressions and Operators   [Contents][Index]\\n\\n3.8 Bit Shifting\\n\\nYou use the left-shift operator << to shift its first operand’s bits to\\n\"}]","[{\"text\":\"the left. The second operand denotes the number of bit places to shift.\\nBits shifted off the left side of the value are discarded; new bits\\nadded on the right side will all be 0.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"x = 47;    /* 47 is 00101111 in binary. */\\n\\n\\n\\n\\nx << 1;    /* 00101111 << 1 is 01011110. */\\n\\nSimilarly, you use the right-shift operator >> to shift \"}]","[{\"text\":\"its first\\noperand’s bits to the right. Bits shifted off the right side are\\ndiscarded; new bits added on the left side are _usually_ 0, but if the\\nfirst operand is a signed negative value, then the added bits will be\\neither 0 _or_ \"}]","[{\"text\":\"whatever value was previously in the leftmost bit\\nposition.\\n\\n\\n\\n\\n\\nx = 47;   /* 47 is 00101111 in binary. */\\n\\n\\n\\n\"}]","[{\"text\":\"x >> 1;   /* 00101111 >> 1 is 00010111. */\\n\\nFor both << and >>, if the second operand is greater than the bit-width\\nof the first operand, or the second operand is negative, the behavior is\\nundefined.\\n\\n\"}]","[{\"text\":\"You can use the shift operators to perform a variety of interesting\\nhacks. For example, given a date with the day of the month numbered as\\nd, the month numbered as m, and the year y, you can store the entire\\ndate in a single number x:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int d = 12;\\n\\n\\n\\n\\nint m = 6;\\n\\n\\n\\n\\nint y = 1983;\\n\\n\\n\\n\"}]","[{\"text\":\"int x = (((y << 4) + m) << 5) + d;\\n\\nYou can then extract the original day, month, and year out of x using a\\ncombination of shift operators and modular division:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"d = x % 32;\\n\\n\\n\\n\\nm = (x >> 5) % 16;\\n\\n\\n\\n\\ny = x >> 9;\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Pointer Operators, Previous: Bit Shifting, Up: Expressions and\\nOperators   [Contents][Index]\\n\\n3.9 Bitwise Logical Operators\\n\"}]","[{\"text\":\"C provides operators for performing bitwise conjunction, inclusive\\ndisjunction, exclusive disjunction, and negation (complement).\\n\\nBiwise conjunction examines each bit in its two operands, and when two\\ncorresponding bits \"}]","[{\"text\":\"are both 1, the resulting bit is 1. All other\\nresulting bits are 0. Here is an example of how this works, using binary\\nnumbers:\\n\\n\\n\\n\\n\\n11001001 & \"}]","[{\"text\":\"10011011 = 10001001\\n\\nBitwise inclusive disjunction examines each bit in its two operands, and\\nwhen two corresponding bits are both 0, the resulting bit is 0. All\\nother resulting bits are 1.\\n\\n\\n\\n\"}]","[{\"text\":\"11001001 | 10011011 = 11011011\\n\\nBitwise exclusive disjunction examines each bit in its two operands, and\\nwhen two corresponding bits are different, the resulting bit is 1. All\\nother resulting bits are 0.\\n\\n\\n\\n\"}]","[{\"text\":\"11001001 ^ 10011011 = 01010010\\n\\nBitwise negation reverses each bit in its operand:\\n\\n\\n\\n\\n\\n~11001001 = 00110110\\n\\n\"}]","[{\"text\":\"In C, you can only use these operators with operands of an integer (or\\ncharacter) type, and for maximum portability, you should only use the\\nbitwise negation operator with unsigned integer types. Here are some\\nexamples of using these operators in \"}]","[{\"text\":\"C code:\\n\\n\\n\\n\\n\\nunsigned int foo = 42;\\n\\n\\n\\n\\nunsigned int bar = 57;\\n\\n\\n\"}]","[{\"text\":\"unsigned int quux;\\n\\n\\n\\n\\n\\nquux = foo & bar;\\n\\n\\n\\n\\nquux = foo | bar;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"quux = foo ^ bar;\\n\\n\\n\\n\\nquux = ~foo;\\n\\n------------------------------------------------------------------------\\n\\nNext: The sizeof Operator, Previous: \"}]","[{\"text\":\"Bitwise Logical Operators, Up:\\nExpressions and Operators   [Contents][Index]\\n\\n3.10 Pointer Operators\\n\\nYou can use the address operator & to obtain the memory address of an\\nobject.\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int x = 5;\\n\\n\\n\\n\\nint *pointer_to_x = &x;\\n\\nIt is not necessary to use this operator to obtain the address of a\\nfunction, although you can:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"extern int foo (void);\\n\\n\\n\\n\\nint (*fp1) (void) = foo; /* fp1 points to foo */\\n\\n\\n\\n\\nint (*fp2) (void) \"}]","[{\"text\":\"= &foo; /* fp2 also points to foo */\\n\\nFunction pointers and data pointers are not compatible, in the sense\\nthat you cannot expect to store the address of a function into a data\\npointer, and then copy that into a function pointer and \"}]","[{\"text\":\"call it\\nsuccessfully. It might work on some systems, but it’s not a portable\\ntechnique.\\n\\nAs a GNU extension to C89, you can also obtain the address of a label\\nwith the label address operator &&. The result is a \"}]","[{\"text\":\"void* pointer which\\ncan be used with goto. See The goto Statement.\\n\\nGiven a memory address stored in a pointer, you can use the indirection\\noperator * to obtain the value stored at the address. (This is called\\n\"}]","[{\"text\":\"_dereferencing_ the pointer.)\\n\\n\\n\\n\\n\\nint x = 5;\\n\\n\\n\\n\\nint y;\\n\\n\\n\"}]","[{\"text\":\"int *ptr;\\n\\n\\n\\n\\n\\nptr = &x;    /* ptr now holds the address of x. */\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"y = *ptr;    /* y gets the value stored at the address\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"stored in ptr. */\\n\\nAvoid using dereferencing pointers that have not been initialized to a\\nknown memory location.\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Next: Type Casts, Previous: Pointer Operators, Up: Expressions and\\nOperators   [Contents][Index]\\n\\n3.11 The sizeof Operator\\n\\nYou can use the sizeof operator to obtain the size (in bytes) of the\\n\"}]","[{\"text\":\"data type of its operand. The operand may be an actual type specifier\\n(such as int or float), as well as any valid expression. When the\\noperand is a type name, it must be enclosed in parentheses. Here are\\nsome examples:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"size_t a = sizeof(int);\\n\\n\\n\\n\\nsize_t b = sizeof(float);\\n\\n\\n\\n\\nsize_t c = sizeof(5);\\n\\n\\n\\n\\n\"}]","[{\"text\":\"size_t d = sizeof(5.143);\\n\\n\\n\\n\\nsize_t e = sizeof a;\\n\\nThe result of the sizeof operator is of a type called size_t, which is\\ndefined in the \"}]","[{\"text\":\"header file <stddef.h>. size_t is an unsigned integer\\ntype, perhaps identical to unsigned int or unsigned long int; it varies\\nfrom system to system.\\n\\nThe size_t type is often a convenient type for a loop index, since it is\\n\"}]","[{\"text\":\"guaranteed to be able to hold the number of elements in any array; this\\nis not the case with int, for example.\\n\\nThe sizeof operator can be used to automatically compute the number of\\nelements in an array:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"#include <stddef.h>\\n\\n\\n\\n\\n#include <stdio.h>\\n\\n\\n\\n\\n\\nstatic const int values[] = { 1, 2, \"}]","[{\"text\":\"48, 681 };\\n\\n\\n\\n\\n#define ARRAYSIZE(x) (sizeof x/sizeof x[0])\\n\\n\\n\\n\\n\\nint main (int \"}]","[{\"text\":\"argc, char *argv[]) \\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"size_t i;\\n\\n\\n\\n\\n\\n\\n\\n\\nfor (i = 0; i < ARRAYSIZE(values); i++) \\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nprintf(\\\"%d\\\\n\\\", \"}]","[{\"text\":\"values[i]);\\n\\n\\n\\n\\n\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return 0;\\n\\n\\n\\n\\n}\\n\\nThere are two cases where this technique does not work. The first is\\nwhere the array element has zero size (GCC supports \"}]","[{\"text\":\"zero-sized\\nstructures as a GNU extension). The second is where the array is in fact\\na function parameter (see Function Parameters).\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Next: Array Subscripts, Previous: The sizeof Operator, Up: Expressions\\nand Operators   [Contents][Index]\\n\\n3.12 Type Casts\\n\\nYou can use a type cast to explicitly cause an expression to be of a\\nspecified data \"}]","[{\"text\":\"type. A type cast consists of a type specifier enclosed\\nin parentheses, followed by an expression. To ensure proper casting, you\\nshould also enclose the expression that follows the type specifier in\\nparentheses. Here is an example:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"float x;\\n\\n\\n\\n\\nint y = 7;\\n\\n\\n\\n\\nint z = 3;\\n\\n\\n\\n\"}]","[{\"text\":\"x = (float) (y / z);\\n\\nIn that example, since y and z are both integers, integer division is\\nperformed, and even though x is a floating-point variable, it receives\\nthe value 2. Explicitly casting the result of the \"}]","[{\"text\":\"division to float does\\nno good, because the computed value of y/z is already 2.\\n\\nTo fix this problem, you need to convert one of the operands to a\\nfloating-point type before the division takes place:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"float x;\\n\\n\\n\\n\\nint y = 7;\\n\\n\\n\\n\\nint z = 3;\\n\\n\\n\\n\"}]","[{\"text\":\"x = (y / (float)z);\\n\\nHere, a floating-point value close to 2.333… is assigned to x.\\n\\nType casting only works with scalar types (that is, integer,\\nfloating-point or pointer types). \"}]","[{\"text\":\"Therefore, this is not allowed:\\n\\n\\n\\n\\n\\nstruct fooTag { /* members ... */ };\\n\\n\\n\\n\\nstruct fooTag foo;\\n\\n\\n\"}]","[{\"text\":\"unsigned char byteArray[8];\\n\\n\\n\\n\\n\\nfoo = (struct fooType) byteArray; /* Fail! */\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Function Calls as Expressions, Previous: Type Casts, Up:\\nExpressions and Operators   [Contents][Index]\\n\\n3.13 Array \"}]","[{\"text\":\"Subscripts\\n\\nYou can access array elements by specifying the name of the array, and\\nthe array subscript (or index, or element number) enclosed in brackets.\\nHere is an example, supposing an integer array called my_array:\\n\\n\\n\"}]","[{\"text\":\"my_array[0] = 5;\\n\\nThe array subscript expression A[i] is defined as being identical to the\\nexpression (*((A)+(i))). This means that many uses of an array name are\\nequivalent to a pointer expression. It also means that you cannot\\n\"}]","[{\"text\":\"subscript an array having the register storage class.\\n\\n------------------------------------------------------------------------\\n\\nNext: The Comma Operator, Previous: Array Subscripts, Up: Expressions\\nand Operators   \"}]","[{\"text\":\"[Contents][Index]\\n\\n3.14 Function Calls as Expressions\\n\\nA call to any function which returns a value is an expression.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int function(void);\\n\\n\\n\\n\\n…\\n\\n\\n\\n\\na = 10 + function();\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Member Access Expressions, Previous: Function Calls as\\nExpressions, Up: Expressions and Operators   [Contents][Index]\\n\\n\"}]","[{\"text\":\"3.15 The Comma Operator\\n\\nYou use the comma operator , to separate two (ostensibly related)\\nexpressions. For instance, the first expression might produce a value\\nthat is used by the second expression:\\n\\n\\n\"}]","[{\"text\":\"x++, y = x * x;\\n\\nMore commonly, the comma operator is used in for statements, like this:\\n\\n\\n\\n\\n\\n/* Using the comma operator in a for statement. */\\n\\n\\n\\n\\n\"}]","[{\"text\":\"for (x = 1, y = 10;  x <=10 && y >=1;  x++, y--)\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"…\\n\\n\\n\\n\\n\\n\\n}\\n\\nThis lets you conveniently set, monitor, and modify multiple control\\nexpressions for \"}]","[{\"text\":\"the for statement.\\n\\nA comma is also used to separate function parameters; however, this is\\n_not_ the comma operator in action. In fact, if the comma operator is\\nused as we have discussed here in a function call, then the compiler\\n\"}]","[{\"text\":\"will interpret that as calling the function with an extra parameter.\\n\\nIf you want to use the comma operator in a function argument, you need\\nto put parentheses around it. That’s because commas in a function\\nargument list have \"}]","[{\"text\":\"a different meaning: they separate arguments. Thus,\\n\\n\\n\\n\\n\\nfoo (x,  y=47,  x,  z);\\n\\nis interpreted as a function call with four arguments, \"}]","[{\"text\":\"but\\n\\n\\n\\n\\n\\nfoo (x,  (y=47,  x),  z);\\n\\nis a function call with just three arguments. (The second argument is\\n(y=47, x).)\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Conditional Expressions, Previous: The Comma Operator, Up:\\nExpressions and Operators   [Contents][Index]\\n\\n3.16 Member Access \"}]","[{\"text\":\"Expressions\\n\\nYou can use the member access operator . to access the members of a\\nstructure or union variable. You put the name of the structure variable\\non the left side of the operator, and the name of the member on the\\n\"}]","[{\"text\":\"right side.\\n\\n\\n\\n\\n\\nstruct point\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int x, y;\\n\\n\\n\\n\\n};\\n\\n\\n\\n\\n\\nstruct point first_point;\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"first_point.x = 0;\\n\\n\\n\\n\\nfirst_point.y = 5;\\n\\nYou can also access the members of a structure or union variable via a\\npointer by using the indirect member access operator ->. \"}]","[{\"text\":\"x->y is\\nequivalent to (*x).y.\\n\\n\\n\\n\\n\\nstruct fish\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nint length, weight;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"};\\n\\n\\n\\n\\n\\nstruct fish salmon;\\n\\n\\n\\n\\n\\nstruct fish \"}]","[{\"text\":\"*fish_pointer = &salmon;\\n\\n\\n\\n\\n\\nfish_pointer->length = 3;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"fish_pointer->weight = 9;\\n\\nSee Pointers.\\n\\n------------------------------------------------------------------------\\n\\nNext: Statements and Declarations in Expressions, Previous: Member\\n\"}]","[{\"text\":\"Access Expressions, Up: Expressions and Operators   [Contents][Index]\\n\\n3.17 Conditional Expressions\\n\\nYou use the conditional operator to cause the entire conditional\\nexpression to evaluate to either its \"}]","[{\"text\":\"second or its third operand, based\\non the truth value of its first operand. Here’s an example:\\n\\n\\n\\n\\n\\na ? b : c\\n\\nIf expression a is \"}]","[{\"text\":\"true, then expression b is evaluated and the result\\nis the value of b. Otherwise, expression c is evaluated and the result\\nis c.\\n\\nExpressions b and c must be compatible. That is, they must both be\\n\\n\"}]","[{\"text\":\"1.  arithmetic types\\n2.  compatible struct or union types\\n3.  pointers to compatible types (one of which might be the NULL\\n\\n\\n\\n\\npointer)\\n\\n\"}]","[{\"text\":\"Alternatively, one operand is a pointer and the other is a void*\\npointer.\\n\\nHere is an example\\n\\n\\n\\n\\n\\na = (x == 5) ? y : z;\\n\"}]","[{\"text\":\"Here, if x equals 5, then a will receive the value of y. Otherwise, a\\nwill receive the value of z. This can be considered a shorthand method\\nfor writing a simple if…else statement. The following example will\\naccomplish the same task as the \"}]","[{\"text\":\"previous one:\\n\\n\\n\\n\\n\\nif (x == 5)\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"a = y;\\n\\n\\n\\n\\nelse\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"a = z;\\n\\nIf the first operand of the conditional operator is true, then the third\\noperand is never evaluated. Similarly, if the first operand is false,\\nthen the second operand is never evaluated. The first operand is always\\n\"}]","[{\"text\":\"evaluated.\\n\\n------------------------------------------------------------------------\\n\\nNext: Operator Precedence, Previous: Conditional Expressions, Up:\\nExpressions and Operators   [Contents][Index]\\n\"}]","[{\"text\":\"3.18 Statements and Declarations in Expressions\\n\\nAs a GNU C extension, you can build an expression using compound\\nstatement enclosed in parentheses. This allows you to included loops,\\nswitches, and local variables within \"}]","[{\"text\":\"an expression.\\n\\nRecall that a compound statement (also known as a block) is a sequence\\nof statements surrounded by braces. In this construct, parentheses go\\naround the braces. Here is an example:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"({ int y = function (); int z;\\n\\n\\n\\n\\n\\n\\n\\n\\nif (y > 0) z = y;\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"else z = - y;\\n\\n\\n\\n\\n\\n\\n\\n\\n; })\\n\\nThat is a valid (though slightly more complex than \"}]","[{\"text\":\"necessary) expression\\nfor the absolute value of function ().\\n\\nThe last thing in the compound statement should be an expression\\nfollowed by a semicolon; the value of this subexpression serves as the\\n\"}]","[{\"text\":\"value of the entire construct. (If you use some other kind of statement\\nlast within the braces, the construct has type void, and thus\\neffectively no value.)\\n\\nThis feature is especially useful in making macro \"}]","[{\"text\":\"definitions “safe” (so\\nthat they evaluate each operand exactly once). For example, the\\n“maximum” function is commonly defined as a macro in standard C as\\nfollows:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"#define max(a,b) ((a) > (b) ? (a) : (b))\\n\\nBut this definition computes either a or b twice, with bad results if\\nthe operand has side effects. In GNU C, if you know the type of the\\noperands (here let’s assume int), you \"}]","[{\"text\":\"can define the macro safely as\\nfollows:\\n\\n\\n\\n\\n\\n#define maxint(a,b) \\\\\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"({int _a = (a), _b = (b); _a > _b ? _a : _b; })\\n\\nIf you don’t know the type of the operand, you can still do this, but\\nyou must use typeof expressions or type naming.\\n\\nEmbedded statements are not allowed \"}]","[{\"text\":\"in constant expressions, such as the\\nvalue of an enumeration constant, the width of a bit field, or the\\ninitial value of a static variable.\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Next: Order of Evaluation, Previous: Statements and Declarations in\\nExpressions, Up: Expressions and Operators   [Contents][Index]\\n\\n3.19 Operator Precedence\\n\\nWhen an expression contains multiple \"}]","[{\"text\":\"operators, such as a + b * f(), the\\noperators are grouped based on rules of _precedence_. For instance, the\\nmeaning of that expression is to call the function f with no arguments,\\nmultiply the result by b, then add that result to a. That’s what the C\\n\"}]","[{\"text\":\"rules of operator precedence determine for this expression.\\n\\nThe following is a list of types of expressions, presented in order of\\nhighest precedence first. Sometimes two or more operators have equal\\nprecedence; all \"}]","[{\"text\":\"those operators are applied from left to right unless\\nstated otherwise.\\n\\n1.  Function calls, array subscripting, and membership access operator\\n\\n\\n\\n\\nexpressions.\\n\"}]","[{\"text\":\"2.  Unary operators, including logical negation, bitwise complement,\\n\\n\\n\\n\\nincrement, decrement, unary positive, unary negative, indirection\\n\\n\\n\\n\\n\"}]","[{\"text\":\"operator, address operator, type casting, and sizeof expressions.\\n\\n\\n\\n\\nWhen several unary operators are consecutive, the later ones are\\n\\n\\n\\n\\n\"}]","[{\"text\":\"nested within the earlier ones: !-x means !(-x).\\n3.  Multiplication, division, and modular division expressions.\\n4.  Addition and subtraction expressions.\\n5.  Bitwise shifting expressions.\\n6.  Greater-than, less-than, \"}]","[{\"text\":\"greater-than-or-equal-to, and\\n\\n\\n\\n\\nless-than-or-equal-to\\n\\n\\n\\n\\nexpressions.\\n7.  Equal-to and \"}]","[{\"text\":\"not-equal-to expressions.\\n8.  Bitwise AND expressions.\\n9.  Bitwise exclusive OR expressions.\\n10. Bitwise inclusive OR expressions.\\n11. Logical AND expressions.\\n12. Logical OR expressions.\\n13. Conditional expressions (using \"}]","[{\"text\":\"?:). When used as subexpressions,\\n\\n\\n\\n\\nthese are evaluated right to left.\\n14. All assignment expressions, including compound assignment. When\\n\\n\\n\\n\\n\"}]","[{\"text\":\"multiple assignment statements appear as subexpressions in a single\\n\\n\\n\\n\\nlarger expression, they are evaluated right to left.\\n15. Comma operator expressions.\\n\\n\"}]","[{\"text\":\"The above list is somewhat dry and is apparently straightforward, but it\\ndoes hide some pitfalls. Take this example:\\n\\n\\n\\n\\n\\nfoo = *p++;\\n\\n\"}]","[{\"text\":\"Here p is incremented as a side effect of the expression, but foo takes\\nthe value of *(p++) rather than (*p)++, since the unary operators bind\\nright to left. There are other examples of potential surprises lurking\\nbehind the C precedence table. For \"}]","[{\"text\":\"this reason if there is the slightest\\nrisk of the reader misunderstanding the meaning of the program, you\\nshould use parentheses to make your meaning clear.\\n\\n------------------------------------------------------------------------\\n\"}]","[{\"text\":\"Previous: Operator Precedence, Up: Expressions and Operators  \\n[Contents][Index]\\n\\n3.20 Order of Evaluation\\n\\nIn C you cannot assume that multiple subexpressions are evaluated in the\\norder that seems \"}]","[{\"text\":\"natural. For instance, consider the expression\\n++a * f(). Does this increment a before or after calling the function f?\\nThe compiler could do it in either order, so you cannot make\\nassumptions.\\n\\nThis manual \"}]","[{\"text\":\"explains the semantics of the C language in the abstract.\\nHowever, an actual compiler translates source code into specific actions\\nin an actual computer, and may re-order operations for the sake of\\nefficiency. The correspondence \"}]","[{\"text\":\"between the program you write and the\\nthings the computer actually does are specified in terms of _side\\neffects_ and _sequence points_.\\n\\n\\n\\n------------------------------------------ ---- --\\n\\n\\n\"}]","[{\"text\":\"• Side Effects:                                 \\n\\n\\n• Sequence Points:                              \\n\\n\\n• Sequence Points Constrain Expressions:        \\n\\n\\n\"}]","[{\"text\":\"• Sequence Points and Signal Delivery:          \\n\\n\\n------------------------------------------ ---- --\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Next: Sequence Points, Up: Order of Evaluation   [Contents][Index]\\n\\n3.20.1 Side Effects\\n\\nA _side effect_ is one of the following:\\n\\n1.  accessing a volatile object\\n\"}]","[{\"text\":\"2.  modifying an object\\n3.  modifying a file\\n4.  a call to a function which performs any of the above side effects\\n\\nThese are essentially the externally-visible effects of running a\\nprogram. They are \"}]","[{\"text\":\"called side effects because they are effects of\\nexpression evalation beyond the expression’s actual resulting value.\\n\\nThe compiler is allowed to perform the operations of your program in an\\norder different to the order implied \"}]","[{\"text\":\"by the source of your program,\\nprovided that in the end all the necessary side effects actually take\\nplace. The compiler is also allowed to entirely omit some operations;\\nfor example it’s allowed to skip evaluating part of an expression if it\\n\"}]","[{\"text\":\"can be certain that the value is not used and evaluating that part of\\nthe expression won’t produce any needed side effects.\\n\\n------------------------------------------------------------------------\\n\\nNext: Sequence \"}]","[{\"text\":\"Points Constrain Expressions, Previous: Side Effects, Up:\\nOrder of Evaluation   [Contents][Index]\\n\\n3.20.2 Sequence Points\\n\\nAnother requirement on the compiler is that side effects \"}]","[{\"text\":\"should take\\nplace in the correct order. In order to provide this without\\nover-constraining the compiler, the C89 and C90 standards specify a list\\nof sequence points. A _sequence point_ is one of the following:\\n\\n\"}]","[{\"text\":\"1.  a call to a function (after argument evaluation is complete)\\n2.  the end of the left-hand operand of the and operator &&\\n3.  the end of the left-hand operand of the or operator ||\\n4.  the end of the left-hand operand \"}]","[{\"text\":\"of the comma operator ,\\n5.  the end of the first operand of the ternary operator a ? b : c\\n6.  the end of a full declarator ²\\n7.  the end of an initialisation expression\\n8.  the end of an expression statement (i.e. an \"}]","[{\"text\":\"expression followed by\\n\\n\\n\\n\\n;)\\n9.  the end of the controlling expression of an if or switch statement\\n10. the end of the controlling expression of a while or \"}]","[{\"text\":\"do statement\\n11. the end of any of the three controlling expressions of a for\\n\\n\\n\\n\\nstatement\\n12. the end of the expression in a return statement\\n13. immediately \"}]","[{\"text\":\"before the return of a library function\\n14. after the actions associated with an item of formatted I/O (as used\\n\\n\\n\\n\\nfor example with the strftime or the printf and scanf \"}]","[{\"text\":\"famlies of\\n\\n\\n\\n\\nfunctions).\\n15. immediately before and after a call to a comparison function (as\\n\\n\\n\\n\\n\"}]","[{\"text\":\"called for example by qsort)\\n\\nAt a sequence point, all the side effects of previous expression\\nevaluations must be complete, and no side effects of later evaluations\\nmay have taken place.\\n\\n\"}]","[{\"text\":\"This may seem a little hard to grasp, but there is another way to\\nconsider this. Imagine you wrote a library (some of whose functions are\\nexternal and perhaps others not) and compiled it, allowing someone else\\nto call one of your functions from \"}]","[{\"text\":\"their code. The definitions above\\nensure that, at the time they call your function, the data they pass in\\nhas values which are consistent with the behaviour specified by the\\nabstract machine, and any data returned by your function has a state\\n\"}]","[{\"text\":\"which is also consistent with the abstract machine. This includes data\\naccessible via pointers (i.e. not just function parameters and\\nidentifiers with external linkage).\\n\\nThe above is a slight simplification, since compilers \"}]","[{\"text\":\"exist that perform\\nwhole-program optimisation at link time. Importantly however, although\\nthey might perform optimisations, the visible side effects of the\\nprogram must be the same as if they were produced by the abstract\\nmachine.\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Sequence Points and Signal Delivery, Previous: Sequence Points,\\nUp: Order of Evaluation   [Contents][Index]\\n\\n3.20.3 Sequence \"}]","[{\"text\":\"Points Constrain Expressions\\n\\nThe code fragment\\n\\n\\n\\n\\n\\ni = i + 1;\\n\\nis quite normal and no doubt occurs in many programs. \"}]","[{\"text\":\"However, the quite\\nsimilar code fragment\\n\\n\\n\\n\\n\\ni = ++i + 1;\\n\\nis a little harder to understand; what is the final value of i? The C\\n\"}]","[{\"text\":\"standards (both C89 and C99) both forbid this construct in conforming\\nprograms.\\n\\nBetween two sequence points,\\n\\n1.  an object may have its stored value modified at most once by the\\n\\n\\n\\n\\n\"}]","[{\"text\":\"evaluation of an expression\\n2.  the prior value of the object shall be read only to determine the\\n\\n\\n\\n\\nvalue to be stored.\\n\\nThe first of these \"}]","[{\"text\":\"two conditions forbids expressions like\\nfoo(x=2, ++x). The second condition forbids expressions like a[i++] = i.\\n\\nint x=0; foo(++x, ++x)\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Not allowed in a conforming program; modifies x twice before\\n\\n\\n\\n\\nargument evaluation is complete.\\n\\nint x=0; bar((++x,++x))\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Allowed; the function bar takes one argument (the value 2 is passed\\n\\n\\n\\n\\nhere), and there is a sequence point at the comma operator.\\n\\n*p++ || *p++\\n\\n\\n\"}]","[{\"text\":\"Allowed; there is a sequence point at ||.\\n\\nint x = 1, y = x++;\\n\\n\\n\\n\\n\\nAllowed; there is a sequence point after the full \"}]","[{\"text\":\"declarator of x.\\n\\nx=2; x++;\\n\\n\\n\\n\\n\\nAllowed; there is a sequence point at the end of the first\\n\\n\\n\\n\"}]","[{\"text\":\"expression statement.\\n\\nif (x++ > MAX) x = 0;\\n\\n\\n\\n\\n\\nAllowed; there is a sequence point at the end of the controlling\\n\\n\\n\"}]","[{\"text\":\"expression of the if³.\\n\\n(x=y) ? ++x : x--;\\n\\n\\n\\n\\n\\nAllowed; there is a sequence point before the ?, and only one of the\\n\\n\\n\"}]","[{\"text\":\"two following expressions is evaluated.\\n\\nint *p=malloc(sizeof(*p)), *q=p;  *p=foo(); bar((*p)++,(*q)++);\\n\\n\\n\\n\\n\\nNot allowed; the \"}]","[{\"text\":\"object at p is being modified twice before the\\n\\n\\n\\n\\nevaluation of the arguments to bar is complete. The fact that this\\n\\n\\n\\n\\n\"}]","[{\"text\":\"is done once via p and once via q is irrelevant, since they both\\n\\n\\n\\n\\npoint to the same object.\\n\\nLet’s go back to the example we used to introduce the \"}]","[{\"text\":\"problem of the\\norder of evaluation, ++a * f(). Suppose the code actually looks like\\nthis:\\n\\n\\n\\n\\n\\nstatic int a = 1;\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"static int f (void)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\na = 100;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return 3;\\n\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\nint foo (void)\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\nreturn ++a * f();\\n\\n\\n\\n\\n}\\n\"}]","[{\"text\":\"Is this code allowed in a standard-conforming program? Although the\\nexpression in foo modifies a twice, this is not a problem. Let’s look at\\nthe two possible cases.\\n\\nThe right operand f() is evaluated first\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Since f returns a value other than void, it must contain a return\\n\\n\\n\\n\\nstatement. Therefore, there is a sequence point at the end of the\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return expression. That comes between the modification to a that f\\n\\n\\n\\n\\nmakes and the evaluation of the left operand.\\n\\nThe left operand ++a is evaluated \"}]","[{\"text\":\"first\\n\\n\\n\\n\\n\\nFirst, a is incremented. Then the arguments to f are evaluated\\n\\n\\n\\n\\n\"}]","[{\"text\":\"(there are zero of them). Then there is a sequence point before f is\\n\\n\\n\\n\\nactually called.\\n\\nSo, we see that our program is standard-conforming. Notice that the\\n\"}]","[{\"text\":\"above argument does not actually depend on the details of the body of\\nthe function f. It only depends on the function containing something\\nending in a sequence point – in our example this is a return statement,\\nbut an expression statement or a full \"}]","[{\"text\":\"declarator would do just as well.\\n\\nHowever, the result of executing this code depends on the order of\\nevaluation of the operands of *. If the left-hand operand is evaluated\\nfirst, foo returns 6. Otherwise, it returns 303. The C \"}]","[{\"text\":\"standard does not\\nspecify in which order the operands should be evaluated, and also does\\nnot require an implementation either to document the order or even to\\nstick to one order. The effect of this code is _unspecified_, meaning\\nthat one of \"}]","[{\"text\":\"several specific things will happen, but the C standards do\\nnot say which.\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Sequence Points Constrain Expressions, Up: \"}]","[{\"text\":\"Order of Evaluation\\n\\n\\n[Contents][Index]\\n\\n3.20.4 Sequence Points and Signal Delivery\\n\\nSignals are mainly documented in the GNU C Library manual rather than\\n\"}]","[{\"text\":\"this document, even though the C standards consider the compiler and the\\nC library together to be “the implementation”.\\n\\nWhen a signal is received, this will happen between sequence points.\\nSide effects on volatile objects \"}]","[{\"text\":\"prior to the previous sequence point\\nwill have occurred, but other updates may not have occurred yet. This\\neven applies to straight assignments, such as x=0;, because the code\\ngenerated for that statement may require more than one instruction,\\n\"}]","[{\"text\":\"meaning that it can be interrupted part-way through by the delivery of a\\nsignal.\\n\\nThe C standard is quite restrictive about what data access can occur\\nwithin a signal handler. They can of course use auto variables, but in\\n\"}]","[{\"text\":\"terms of reading or writing other objects, they must be\\nvolatile sig_atomic_t. The volatile type qualifier ensures that access\\nto the variable in the other parts of the program doesn’t span sequence\\npoints and the use of the sig_atomic_t type ensures that \"}]","[{\"text\":\"changes to the\\nvariable are atomic with respect to signal delivery.\\n\\nThe POSIX standard also allows a small number of library functions to be\\ncalled from a signal handler. These functions are referred to as the set\\nof \"}]","[{\"text\":\"_async-signal-safe_ functions. If your program is intended to run on\\na POSIX system but not on other systems, you can safely call these from\\nyour signal handler too.\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Functions, Previous: Expressions and Operators, Up: Top  \\n[Contents][Index]\\n\\n\\n4 Statements\\n\\n\"}]","[{\"text\":\"You write statements to cause actions and to control flow within your\\nprograms. You can also write statements that do not do anything at all,\\nor do things that are uselessly trivial.\\n\\n\\n\\n\"}]","[{\"text\":\"--------------------------- ---- --\\n\\n\\n• Labels:                        \\n\\n\\n• Expression Statements:         \\n\\n\\n• The if Statement:              \\n\\n\\n\"}]","[{\"text\":\"• The switch Statement:          \\n\\n\\n• The while Statement:           \\n\\n\\n• The do Statement:              \\n\\n\\n• The for Statement:             \\n\\n\\n\"}]","[{\"text\":\"• Blocks:                        \\n\\n\\n• The Null Statement:            \\n\\n\\n• The goto Statement:            \\n\\n\\n• The break Statement:           \\n\\n\\n\"}]","[{\"text\":\"• The continue Statement:        \\n\\n\\n• The return Statement:          \\n\\n\\n• The typedef Statement:         \\n\\n\\n--------------------------- ---- --\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Expression Statements, Up: Statements   [Contents][Index]\\n\\n4.1 Labels\\n\\nYou can use labels to identify a \"}]","[{\"text\":\"section of source code for use with a\\nlater goto (see The goto Statement). A label consists of an identifier\\n(such as those used for variable names) followed by a colon. Here is an\\nexample:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"treet:\\n\\nYou should be aware that label names do not interfere with other\\nidentifier names:\\n\\n\\n\\n\\n\\nint treet = 5;    /* treet the \"}]","[{\"text\":\"variable. */\\n\\n\\n\\n\\ntreet:            /* treet the label. */\\n\\nThe ISO C standard mandates that a label must be followed by at least\\none statement, \"}]","[{\"text\":\"possibly a null statement (see The Null Statement). GCC\\nwill compile code that does not meet this requirement, but be aware that\\nif you violate it, your code may have portability issues.\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: The if Statement, Previous: Labels, Up: Statements  \\n[Contents][Index]\\n\\n4.2 Expression Statements\\n\\n\"}]","[{\"text\":\"You can turn any expression into a statement by adding a semicolon to\\nthe end of the expression. Here are some examples:\\n\\n\\n\\n\\n\\n5;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"2 + 2;\\n\\n\\n\\n\\n10 >= 9;\\n\\nIn each of those, all that happens is that each expression is evaluated.\\nHowever, they are useless because they do not store a \"}]","[{\"text\":\"value anywhere,\\nnor do they actually do anything, other than the evaluation itself. The\\ncompiler is free to ignore such statements.\\n\\nExpression statements are only useful when they have some kind of side\\neffect, such as \"}]","[{\"text\":\"storing a value, calling a function, or (this is\\nesoteric) causing a fault in the program. Here are some more useful\\nexamples:\\n\\n\\n\\n\\n\\nx++;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"y = x + 25;\\n\\n\\n\\n\\nputs (\\\"Hello, user!\\\");\\n\\n\\n\\n\\n*cucumber;\\n\\nThe last of those \"}]","[{\"text\":\"statements, *cucumber;, could potentially cause a\\nfault in the program if the value of cucumber is both not a valid\\npointer and has been declared as volatile.\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: The switch Statement, Previous: Expression Statements, Up:\\nStatements   [Contents][Index]\\n\\n4.3 The if Statement\\n\"}]","[{\"text\":\"You can use the if statement to conditionally execute part of your\\nprogram, based on the truth value of a given expression. Here is the\\ngeneral form of an if statement:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"if (test)\\n\\n\\n\\n\\n\\n\\nthen-statement\\n\\n\\n\\n\\nelse\\n\\n\\n\\n\"}]","[{\"text\":\"else-statement\\n\\nIf test evaluates to true, then then-statement is executed and\\nelse-statement is not. If test evaluates to false, then else-statement\\nis executed and then-statement is not. The else clause is optional.\\n\"}]","[{\"text\":\"Here is an actual example:\\n\\n\\n\\n\\n\\nif (x == 10)\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"puts (\\\"x is 10\\\");\\n\\nIf x == 10 evaluates to true, then the statement puts (\\\"x is 10\\\"); is\\nexecuted. If x == 10 evaluates to false, then the statement\\nputs (\\\"x is 10\\\"); is not executed.\\n\\nHere is an example \"}]","[{\"text\":\"using else:\\n\\n\\n\\n\\n\\nif (x == 10)\\n\\n\\n\\n\\n\\n\\nputs (\\\"x is 10\\\");\\n\\n\\n\\n\\n\"}]","[{\"text\":\"else\\n\\n\\n\\n\\n\\n\\nputs (\\\"x is not 10\\\");\\n\\nYou can use a series of if statements to test for multiple conditions:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"if (x == 1)\\n\\n\\n\\n\\n\\n\\nputs (\\\"x is 1\\\");\\n\\n\\n\\n\\nelse if (x == 2)\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"puts (\\\"x is 2\\\");\\n\\n\\n\\n\\nelse if (x == 3)\\n\\n\\n\\n\\n\\n\\nputs (\\\"x is 3\\\");\\n\\n\\n\\n\\n\"}]","[{\"text\":\"else\\n\\n\\n\\n\\n\\n\\nputs (\\\"x is something else\\\");\\n\\nThis function calculates and displays the date of Easter for the given\\n\"}]","[{\"text\":\"year y:\\n\\n\\n\\n\\n\\nvoid\\n\\n\\n\\n\\neasterDate (int y)\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\nint n = 0;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int g = (y % 19) + 1;\\n\\n\\n\\n\\n\\n\\nint c = (y / 100) + 1;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int x = ((3 * c) / 4) - 12;\\n\\n\\n\\n\\n\\n\\nint z = (((8 * c) + 5) / 25) - 5;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int d = ((5 * y) / 4) - x - 10;\\n\\n\\n\\n\\n\\n\\nint e = ((11 * g) + 20 + z - x) % 30;\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"if (((e == 25) && (g > 11)) || (e == 24))\\n\\n\\n\\n\\n\\n\\n\\n\\ne++;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"n = 44 - e;\\n\\n\\n\\n\\n\\n\\n\\nif (n < 21)\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"n += 30;\\n\\n\\n\\n\\n\\n\\n\\nn = n + 7 - ((d + n) % 7);\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"if (n > 31)\\n\\n\\n\\n\\n\\n\\n\\n\\nprintf (\\\"Easter: %d April %d\\\", n - 31, y);\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"else\\n\\n\\n\\n\\n\\n\\n\\n\\nprintf (\\\"Easter: %d March %d\\\", n, y);\\n\\n\\n\\n\"}]","[{\"text\":\"}\\n\\n------------------------------------------------------------------------\\n\\nNext: The while Statement, Previous: The if Statement, Up: Statements  \\n[Contents][Index]\\n\\n4.4 The switch \"}]","[{\"text\":\"Statement\\n\\nYou can use the switch statement to compare one expression with others,\\nand then execute a series of sub-statements based on the result of the\\ncomparisons. Here is the general form of a switch statement:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"switch (test)\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"case compare-1:\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nif-equal-statement-1\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"case compare-2:\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nif-equal-statement-2\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"…\\n\\n\\n\\n\\n\\n\\n\\n\\ndefault:\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"default-statement\\n\\n\\n\\n\\n\\n\\n}\\n\\nThe switch statement compares test to each of the compare expressions,\\nuntil it finds one \"}]","[{\"text\":\"that is equal to test. Then, the statements following\\nthe successful case are executed. All of the expressions compared must\\nbe of an integer type, and the compare-N expressions must be of a\\nconstant integer type (e.g., a literal integer or an \"}]","[{\"text\":\"expression built of\\nliteral integers).\\n\\nOptionally, you can specify a default case. If test doesn’t match any of\\nthe specific cases listed prior to the default case, then the statements\\nfor the default case are executed. \"}]","[{\"text\":\"Traditionally, the default case is\\nput after the specific cases, but that isn’t required.\\n\\n\\n\\n\\n\\nswitch (x)\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\ncase 0:\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"puts (\\\"x is 0\\\");\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nbreak;\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"case 1:\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nputs (\\\"x is 1\\\");\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"break;\\n\\n\\n\\n\\n\\n\\n\\n\\ndefault:\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"puts (\\\"x is something else\\\");\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nbreak;\\n\\n\\n\\n\"}]","[{\"text\":\"}\\n\\nNotice the usage of the break statement in each of the cases. This is\\nbecause, once a matching case is found, not only are its statements\\nexecuted, but so are the statements for all following cases:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int x = 0;\\n\\n\\n\\n\\nswitch (x)\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"case 0:\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nputs (\\\"x is 0\\\");\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"case 1:\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nputs (\\\"x is 1\\\");\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"default:\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nputs (\\\"x is something else\\\");\\n\\n\\n\\n\"}]","[{\"text\":\"}\\n\\nThe output of that example is:\\n\\n\\n\\n\\n\\nx is 0\\n\\n\\n\\n\\n\"}]","[{\"text\":\"x is 1\\n\\n\\n\\n\\nx is something else\\n\\nThis is often not desired. Including a break statement at the end of\\neach case redirects program flow to \"}]","[{\"text\":\"after the switch statement.\\n\\nAs a GNU C extension, you can also specify a range of consecutive\\ninteger values in a single case label, like this:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"case low ... high:\\n\\nThis has the same effect as the corresponding number of individual case\\nlabels, one for each integer value from low to high, inclusive.\\n\\nThis feature is especially useful for ranges of ASCII \"}]","[{\"text\":\"character codes:\\n\\n\\n\\n\\n\\ncase 'A' ... 'Z':\\n\\nBe careful to include spaces around the ...; otherwise it may be parsed\\nincorrectly when you use it with \"}]","[{\"text\":\"integer values. For example, write\\nthis:\\n\\n\\n\\n\\n\\ncase 1 ... 5:\\n\\ninstead of this:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"case 1...5:\\n\\nIt is common to use a switch statement to handle various possible values\\nof errno. In this case a portable program should watch out for the\\npossibility that two macros for errno values in fact have the same\\n\"}]","[{\"text\":\"value, for example EWOULDBLOCK and EAGAIN.\\n\\n------------------------------------------------------------------------\\n\\nNext: The do Statement, Previous: The switch Statement, Up: Statements  \\n[Contents][Index]\\n\"}]","[{\"text\":\"4.5 The while Statement\\n\\nThe while statement is a loop statement with an exit test at the\\nbeginning of the loop. Here is the general form of the while statement:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"while (test)\\n\\n\\n\\n\\n\\n\\nstatement\\n\\nThe while statement first evaluates test. If test evaluates to true,\\nstatement is \"}]","[{\"text\":\"executed, and then test is evaluated again. statement\\ncontinues to execute repeatedly as long as test is true after each\\nexecution of statement.\\n\\nThis example prints the integers from zero through nine:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int counter = 0;\\n\\n\\n\\n\\nwhile (counter < 10)\\n\\n\\n\\n\\n\\n\\nprintf (\\\"%d \\\", \"}]","[{\"text\":\"counter++);\\n\\nA break statement can also cause a while loop to exit.\\n\\n------------------------------------------------------------------------\\n\\nNext: The for Statement, Previous: The while Statement, \"}]","[{\"text\":\"Up: Statements  \\n[Contents][Index]\\n\\n4.6 The do Statement\\n\\nThe do statement is a loop statement with an exit test at the end of the\\nloop. Here is the general form of the do statement:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"do\\n\\n\\n\\n\\n\\n\\nstatement\\n\\n\\n\\n\\nwhile (test);\\n\\n\"}]","[{\"text\":\"The do statement first executes statement. After that, it evaluates\\ntest. If test is true, then statement is executed again. statement\\ncontinues to execute repeatedly as long as test is true after each\\nexecution of statement.\\n\"}]","[{\"text\":\"This example also prints the integers from zero through nine:\\n\\n\\n\\n\\n\\nint x = 0;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"do\\n\\n\\n\\n\\n\\n\\nprintf (\\\"%d \\\", x++);\\n\\n\\n\\n\\nwhile (x < 10);\\n\"}]","[{\"text\":\"A break statement can also cause a do loop to exit.\\n\\n------------------------------------------------------------------------\\n\\nNext: Blocks, Previous: The do Statement, Up: Statements  \\n[Contents][Index]\\n\"}]","[{\"text\":\"4.7 The for Statement\\n\\nThe for statement is a loop statement whose structure allows easy\\nvariable initialization, expression testing, and variable modification.\\nIt is very convenient for making counter-controlled \"}]","[{\"text\":\"loops. Here is the\\ngeneral form of the for statement:\\n\\n\\n\\n\\n\\nfor (initialize; test; step)\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"statement\\n\\nThe for statement first evaluates the expression initialize. Then it\\nevaluates the expression test. If test is false, then the loop ends and\\nprogram control resumes after statement. Otherwise, if test is true,\\n\"}]","[{\"text\":\"then statement is executed. Finally, step is evaluated, and the next\\niteration of the loop begins with evaluating test again.\\n\\nMost often, initialize assigns values to one or more variables, which\\nare generally used as counters, test \"}]","[{\"text\":\"compares those variables to a\\npredefined expression, and step modifies those variables’ values. Here\\nis another example that prints the integers from zero through nine:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int x;\\n\\n\\n\\n\\nfor (x = 0; x < 10; x++)\\n\\n\\n\\n\\n\\n\\nprintf (\\\"%d \\\", x);\\n\"}]","[{\"text\":\"First, it evaluates initialize, which assigns x the value 0. Then, as\\nlong as x is less than 10, the value of x is printed (in the body of the\\nloop). Then x is incremented in the step clause and the test\\nre-evaluated.\\n\\n\"}]","[{\"text\":\"All three of the expressions in a for statement are optional, and any\\ncombination of the three is valid. Since the first expression is\\nevaluated only once, it is perhaps the most commonly omitted expression.\\nYou could also write the above \"}]","[{\"text\":\"example as:\\n\\n\\n\\n\\n\\nint x = 1;\\n\\n\\n\\n\\nfor (; x <= 10; x++)\\n\\n\\n\\n\"}]","[{\"text\":\"printf (\\\"%d \\\", x);\\n\\nIn this example, x receives its value prior to the beginning of the for\\nstatement.\\n\\nIf you leave out the test expression, then the for statement is an\\ninfinite loop (unless you put a break \"}]","[{\"text\":\"or goto statement somewhere in\\nstatement). This is like using 1 as test; it is never false.\\n\\nThis for statement starts printing numbers at 1 and then continues\\nindefinitely, always printing x incremented by 1:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"for (x = 1; ; x++)\\n\\n\\n\\n\\n\\n\\nprintf (\\\"%d \\\", x);\\n\\nIf you leave out the step expression, then no progress is made toward\\ncompleting the \"}]","[{\"text\":\"loop—at least not as is normally expected with a for\\nstatement.\\n\\nThis example prints the number 1 over and over, indefinitely:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"for (x = 1; x <= 10;)\\n\\n\\n\\n\\n\\n\\nprintf (\\\"%d \\\", x);\\n\\nPerhaps confusingly, you cannot use the comma operator (see The Comma\\n\"}]","[{\"text\":\"Operator) for monitoring multiple variables in a for statement, because\\nas usual the comma operator discards the result of its left operand.\\nThis loop:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int x, y;\\n\\n\\n\\n\\nfor (x = 1, y = 10; x <= 10, y >= 1; x+=2, y--)\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"printf (\\\"%d %d\\\\n\\\", x, y);\\n\\nOutputs:\\n\\n\\n\\n\\n\\n1 10\\n\\n\\n\\n\\n\"}]","[{\"text\":\"3 9\\n\\n\\n\\n\\n5 8\\n\\n\\n\\n\\n7 7\\n\\n\\n\\n\\n\"}]","[{\"text\":\"9 6\\n\\n\\n\\n\\n11 5\\n\\n\\n\\n\\n13 4\\n\\n\\n\\n\\n\"}]","[{\"text\":\"15 3\\n\\n\\n\\n\\n17 2\\n\\n\\n\\n\\n19 1\\n\\nIf you need to test two conditions, \"}]","[{\"text\":\"you will need to use the &&\\noperator:\\n\\n\\n\\n\\n\\nint x, y;\\n\\n\\n\\n\\nfor (x = 1, y = \"}]","[{\"text\":\"10; x <= 10 && y >= 1; x+=2, y--)\\n\\n\\n\\n\\n\\n\\nprintf (\\\"%d %d\\\\n\\\", x, y);\\n\\nA break statement can also cause a for loop to exit.\\n\"}]","[{\"text\":\"Here is an example of a function that computes the summation of squares,\\ngiven a starting integer to square and an ending integer to square:\\n\\n\\n\\n\\n\\nint\\n\\n\\n\\n\\n\"}]","[{\"text\":\"sum_of_squares (int start, int end)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\nint i, sum = 0;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"for (i = start; i <= end; i++)\\n\\n\\n\\n\\n\\n\\n\\n\\nsum += i * i;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return sum;\\n\\n\\n\\n\\n}\\n\\n------------------------------------------------------------------------\\n\\nNext: The Null Statement, Previous: \"}]","[{\"text\":\"The for Statement, Up: Statements  \\n[Contents][Index]\\n\\n4.8 Blocks\\n\\nA _block_ is a set of zero or more statements enclosed in braces. Blocks\\nare also known as _compound statements_. Often, a block is used as the\\n\"}]","[{\"text\":\"body of an if statement or a loop statement, to group statements\\ntogether.\\n\\n\\n\\n\\n\\nfor (x = 1; x <= 10; x++)\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nprintf (\\\"x is %d\\\\n\\\", x);\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"if ((x % 2) == 0)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nprintf (\\\"%d is even\\\\n\\\", x);\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"else\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nprintf (\\\"%d is odd\\\\n\\\", x);\\n\\n\\n\\n\"}]","[{\"text\":\"}\\n\\nYou can also put blocks inside other blocks:\\n\\n\\n\\n\\n\\nfor (x = 1; x <= 10; x++)\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nif ((x % 2) == 0)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nprintf (\\\"x is \"}]","[{\"text\":\"%d\\\\n\\\", x);\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nprintf (\\\"%d is \"}]","[{\"text\":\"even\\\\n\\\", x);\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"else\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"printf (\\\"x is %d\\\\n\\\", x);\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"printf (\\\"%d is odd\\\\n\\\", x);\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n}\\n\\n\\n\\n\"}]","[{\"text\":\"}\\n\\nYou can declare variables inside a block; such variables are local to\\nthat block. In C89, declarations must occur before other statements, and\\nso sometimes it is useful to introduce a block simply for this purpose:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\nint x = 5;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"printf (\\\"%d\\\\n\\\", x);\\n\\n\\n\\n\\n}\\n\\n\\n\\n\\nprintf (\\\"%d\\\\n\\\", x);   /* Compilation error! x exists only\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"n the preceding block. */\\n\\n------------------------------------------------------------------------\\n\\nNext: The goto Statement, Previous: Blocks, Up: Statements  \\n[Contents][Index]\\n\\n\"}]","[{\"text\":\"4.9 The Null Statement\\n\\nThe _null statement_ is merely a semicolon alone.\\n\\n\\n\\n\\n\\n;\\n\\nA null statement \"}]","[{\"text\":\"does not do anything. It does not store a value\\nanywhere. It does not cause time to pass during the execution of your\\nprogram.\\n\\nMost often, a null statement is used as the body of a loop statement, or\\nas one or more of \"}]","[{\"text\":\"the expressions in a for statement. Here is an example\\nof a for statement that uses the null statement as the body of the loop\\n(and also calculates the integer square root of n, just for fun):\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"for (i = 1; i*i < n; i++)\\n\\n\\n\\n\\n\\n\\n;\\n\\nHere is another example that uses the null statement as the body of a\\n\"}]","[{\"text\":\"for loop and also produces output:\\n\\n\\n\\n\\n\\nfor (x = 1; x <= 5; printf (\\\"x is now %d\\\\n\\\", x), x++)\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\";\\n\\nA null statement is also sometimes used to follow a label that would\\notherwise be the last thing in a block.\\n\\n------------------------------------------------------------------------\\n\"}]","[{\"text\":\"Next: The break Statement, Previous: The Null Statement, Up: Statements\\n\\n\\n[Contents][Index]\\n\\n4.10 The goto Statement\\n\\nYou can use the goto statement to unconditionally jump \"}]","[{\"text\":\"to a different\\nplace in the program. Here is the general form of a goto statement:\\n\\n\\n\\n\\n\\ngoto label;\\n\\nYou have to specify a label to jump \"}]","[{\"text\":\"to; when the goto statement is\\nexecuted, program control jumps to that label. See Labels. Here is an\\nexample:\\n\\n\\n\\n\\n\\ngoto end_of_program;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"…\\n\\n\\n\\n\\nend_of_program:\\n\\nThe label can be anywhere in the same function as the goto statement\\nthat jumps to it, but a goto statement cannot jump to a \"}]","[{\"text\":\"label in a\\ndifferent function.\\n\\nYou _can_ use goto statements to simulate loop statements, but we do not\\nrecommend it—it makes the program harder to read, and GCC cannot\\noptimize it as well. You should use \"}]","[{\"text\":\"for, while, and do statements\\ninstead of goto statements, when possible.\\n\\nAs an extension, GCC allows a goto statement to jump to an address\\nspecified by a void* variable. To make this work, you also need to take\\n\"}]","[{\"text\":\"the address of a label by using the unary operator && (not &). Here is a\\ncontrived example:\\n\\n\\n\\n\\n\\nenum Play { ROCK=0, PAPER=1, SCISSORS=2 };\\n\\n\\n\"}]","[{\"text\":\"enum Result { WIN, LOSE, DRAW };\\n\\n\\n\\n\\n\\nstatic enum Result turn (void) \\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"const void * const jumptable[] = {&&rock, &&paper, &&scissors};\\n\\n\\n\\n\\n\\n\\nenum Play opp;                /* opponent’s play */\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"goto *jumptable[select_option (&opp)];\\n\\n\\n\\n\\n\\nrock:\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return opp == ROCK ? DRAW : (opp == PAPER ? LOSE : WIN);\\n\\n\\n\\n\\n\\npaper:\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return opp == ROCK ? WIN  : (opp == PAPER ? DRAW : LOSE);\\n\\n\\n\\n\\n\\nscissors:\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return opp == ROCK ? LOSE : (opp == PAPER ? WIN  : DRAW);\\n\\n\\n\\n\\n}\\n\\n------------------------------------------------------------------------\\n\"}]","[{\"text\":\"Next: The continue Statement, Previous: The goto Statement, Up:\\nStatements   [Contents][Index]\\n\\n4.11 The break Statement\\n\\nYou can use the break statement to terminate a while, do, for, or switch\\n\"}]","[{\"text\":\"statement. Here is an example:\\n\\n\\n\\n\\n\\nint x;\\n\\n\\n\\n\\nfor (x = 1; x <= 10; x++)\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n\\n\\nif (x == 8)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"break;\\n\\n\\n\\n\\n\\n\\n\\n\\nelse\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"printf (\\\"%d \\\", x);\\n\\n\\n\\n\\n\\n\\n}\\n\\nThat example prints numbers from 1 to 7. When x is incremented to 8,\\nx == 8 is true, so \"}]","[{\"text\":\"the break statement is executed, terminating the for\\nloop prematurely.\\n\\nIf you put a break statement inside of a loop or switch statement which\\nitself is inside of a loop or switch statement, the break only\\nterminates the \"}]","[{\"text\":\"innermost loop or switch statement.\\n\\n------------------------------------------------------------------------\\n\\nNext: The return Statement, Previous: The break Statement, Up:\\nStatements   [Contents][Index]\\n\"}]","[{\"text\":\"4.12 The continue Statement\\n\\nYou can use the continue statement in loops to terminate an iteration of\\nthe loop and begin the next iteration. Here is an example:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"for (x = 0; x < 100; x++)\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"if (x % 2 == 0)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ncontinue;\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"else\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nsum_of_odd_numbers + = x;\\n\\n\\n\\n\"}]","[{\"text\":\"}\\n\\nIf you put a continue statement inside a loop which itself is inside a\\nloop, then it affects only the innermost loop.\\n\\n------------------------------------------------------------------------\\n\"}]","[{\"text\":\"Next: The typedef Statement, Previous: The continue Statement, Up:\\nStatements   [Contents][Index]\\n\\n4.13 The return Statement\\n\\nYou can use the return statement to end the execution of a function and\\n\"}]","[{\"text\":\"return program control to the function that called it. Here is the\\ngeneral form of the return statement:\\n\\n\\n\\n\\n\\nreturn return-value;\\n\\n\"}]","[{\"text\":\"return-value is an optional expression to return. If the function’s\\nreturn type is void, then it is invalid to return an expression. You\\ncan, however, use the return statement without a return value.\\n\\nIf the function’s \"}]","[{\"text\":\"return type is not the same as the type of\\nreturn-value, and automatic type conversion cannot be performed, then\\nreturning return-value is invalid.\\n\\nIf the function’s return type is not void and no return value is\\n\"}]","[{\"text\":\"specified, then the return statement is valid unless the function is\\ncalled in a context that requires a return value. For example:\\n\\n\\n\\n\\n\\nx = cosine (y);\\n\"}]","[{\"text\":\"In that case, the function cosine was called in a context that required\\na return value, so the value could be assigned to x.\\n\\nEven in contexts where a return value is not required, it is a bad idea\\nfor a non-void function to omit the \"}]","[{\"text\":\"return value. With GCC, you can use\\nthe command line option -Wreturn-type to issue a warning if you omit the\\nreturn value in such functions.\\n\\nHere are some examples of using the return statement, in both a void and\\nnon-void function:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"void\\n\\n\\n\\n\\nprint_plus_five (int x)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"printf (\\\"%d \\\", x + 5);\\n\\n\\n\\n\\n\\n\\nreturn;\\n\\n\\n\\n\\n}\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int\\n\\n\\n\\n\\nsquare_value (int x)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return x * x;\\n\\n\\n\\n\\n}\\n\\n------------------------------------------------------------------------\\n\\nPrevious: The return Statement, Up: \"}]","[{\"text\":\"Statements   [Contents][Index]\\n\\n4.14 The typedef Statement\\n\\nYou can use the typedef statement to create new names for data types.\\nHere is the general form of the typedef statement:\\n\\n\\n\\n\"}]","[{\"text\":\"typedef old-type-name new-type-name\\n\\nold-type-name is the existing name for the type, and may consist of more\\nthan one token (e.g., unsigned long int). new-type-name is the resulting\\nnew name for the type, and must be a single identifier. \"}]","[{\"text\":\"Creating this\\nnew name for the type does not cause the old name to cease to exist.\\nHere are some examples:\\n\\n\\n\\n\\n\\ntypedef unsigned char byte_type;\\n\\n\\n\"}]","[{\"text\":\"typedef double real_number_type;\\n\\nIn the case of custom data types, you can use typedef to make a new name\\nfor the type while defining the type:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"typedef struct fish\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\nfloat weight;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"float length;\\n\\n\\n\\n\\n\\n\\nfloat probability_of_being_caught;\\n\\n\\n\\n\\n} fish_type;\\n\"}]","[{\"text\":\"To make a type definition of an array, you first provide the type of the\\nelement, and then establish the number of elements at the end of the\\ntype definition:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"typedef char array_of_bytes [5];\\n\\n\\n\\n\\narray_of_bytes five_bytes = {0, 1, 2, 3, 4};\\n\\nWhen selecting names for types, you should avoid ending your type names\\n\"}]","[{\"text\":\"with a _t suffix. The compiler will allow you to do this, but the POSIX\\nstandard reserves use of the _t suffix for standard library type names.\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Next: Program Structure and Scope, Previous: Statements, Up: Top  \\n[Contents][Index]\\n\\n\\n5 Functions\\n\\nYou can write functions to separate parts of your program into distinct\\nsubprocedures. To \"}]","[{\"text\":\"write a function, you must at least create a function\\ndefinition. It is a good idea also to have an explicit function\\ndeclaration; you don’t have to, but if you leave it out, then the\\ndefault implicit declaration might not match the \"}]","[{\"text\":\"function itself, and\\nyou will get some compile-time warnings.\\n\\nEvery program requires at least one function, called main. That is where\\nthe program’s execution begins.\\n\\n\\n\\n\"}]","[{\"text\":\"------------------------------------------------ ---- --\\n\\n\\n• Function Declarations:                              \\n\\n\\n• Function Definitions:                               \\n\\n\\n\"}]","[{\"text\":\"• Calling Functions:                                  \\n\\n\\n• Function Parameters:                                \\n\\n\\n• Variable Length Parameter Lists:                    \\n\\n\\n\"}]","[{\"text\":\"• Calling Functions Through Function Pointers:        \\n\\n\\n• The main Function:                                  \\n\\n\\n• Recursive Functions:                                \\n\\n\\n\"}]","[{\"text\":\"• Static Functions:                                   \\n\\n\\n• Nested Functions:                                   \\n\\n\\n------------------------------------------------ ---- --\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Function Definitions, Up: Functions   [Contents][Index]\\n\\n5.1 Function Declarations\\n\\nYou write a \"}]","[{\"text\":\"function declaration to specify the name of a function, a\\nlist of parameters, and the function’s return type. A function\\ndeclaration ends with a semicolon. Here is the general form:\\n\\n\\n\\n\"}]","[{\"text\":\"return-type function-name (parameter-list);\\n\\nreturn-type indicates the data type of the value returned by the\\nfunction. You can declare a function that doesn’t return anything by\\nusing the return type void.\\n\"}]","[{\"text\":\"function-name can be any valid identifier (see Identifiers).\\n\\nparameter-list consists of zero or more parameters, separated by commas.\\nA typical parameter consists of a data type and an optional name for the\\nparameter. You can \"}]","[{\"text\":\"also declare a function that has a variable number of\\nparameters (see Variable Length Parameter Lists), or no parameters using\\nvoid. Leaving out parameter-list entirely also indicates no parameters,\\nbut it is better to specify it explicitly with void.\\n\"}]","[{\"text\":\"Here is an example of a function declaration with two parameters:\\n\\n\\n\\n\\n\\nint foo (int, double);\\n\\nIf you include a name for a \"}]","[{\"text\":\"parameter, the name immediately follows the\\ndata type, like this:\\n\\n\\n\\n\\n\\nint foo (int x, double y);\\n\\nThe parameter \"}]","[{\"text\":\"names can be any identifier (see Identifiers), and if you\\nhave more than one parameter, you can’t use the same name more than once\\nwithin a single declaration. The parameter names in the declaration need\\nnot match the names in the definition.\\n\"}]","[{\"text\":\"You should write the function declaration above the first use of the\\nfunction. You can put it in a header file and use the #include directive\\nto include that function declaration in any source code files that use\\nthe function.\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Calling Functions, Previous: Function Declarations, Up: Functions\\n\\n\\n[Contents][Index]\\n\\n5.2 Function \"}]","[{\"text\":\"Definitions\\n\\nYou write a function definition to specify what a function actually\\ndoes. A function definition consists of information regarding the\\nfunction’s name, return type, and types and names of parameters, along\\n\"}]","[{\"text\":\"with the body of the function. The function body is a series of\\nstatements enclosed in braces; in fact it is simply a block (see\\nBlocks).\\n\\nHere is the general form of a function definition:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return-type\\n\\n\\n\\n\\nfunction-name (parameter-list)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"function-body\\n\\n\\n\\n\\n}\\n\\nreturn-type and function-name are the same as what you use in the\\nfunction declaration (see Function Declarations).\\n\"}]","[{\"text\":\"parameter-list is the same as the parameter list used in the function\\ndeclaration (see Function Declarations), except you _must_ include names\\nfor the parameters in a function definition.\\n\\nHere is an simple example of a \"}]","[{\"text\":\"function definition—it takes two integers\\nas its parameters and returns the sum of them as its return value:\\n\\n\\n\\n\\n\\nint\\n\\n\\n\\n\\n\"}]","[{\"text\":\"add_values (int x, int y)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\nreturn x + y;\\n\\n\\n\"}]","[{\"text\":\"}\\n\\nFor compatibility with the original design of C, you can also specify\\nthe type of the function parameters _after_ the closing parenthesis of\\nthe parameter list, like this:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int\\n\\n\\n\\n\\nadd_values (x, y)\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int x, int y;\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\nreturn x + y;\\n\\n\\n\"}]","[{\"text\":\"}\\n\\nHowever, we strongly discourage this style of coding; it can cause\\nsubtle problems with type casting, among other problems.\\n\\n------------------------------------------------------------------------\\n\"}]","[{\"text\":\"Next: Function Parameters, Previous: Function Definitions, Up: Functions\\n\\n\\n[Contents][Index]\\n\\n5.3 Calling Functions\\n\\nYou can call a function by using its name and supplying \"}]","[{\"text\":\"any needed\\nparameters. Here is the general form of a function call:\\n\\n\\n\\n\\n\\nfunction-name (parameters)\\n\\nA function call can make up an entire \"}]","[{\"text\":\"statement, or it can be used as a\\nsubexpression. Here is an example of a standalone function call:\\n\\n\\n\\n\\n\\nfoo (5);\\n\\nIn that example, \"}]","[{\"text\":\"the function ‘foo’ is called with the parameter 5.\\n\\nHere is an example of a function call used as a subexpression:\\n\\n\\n\\n\\n\\na = square (5);\\n\"}]","[{\"text\":\"Supposing that the function ‘square’ squares its parameter, the above\\nexample assigns the value 25 to a.\\n\\nIf a parameter takes more than one argument, you separate parameters\\nwith commas:\\n\\n\\n\\n\"}]","[{\"text\":\"a = quux (5, 10);\\n\\n------------------------------------------------------------------------\\n\\nNext: Variable Length Parameter Lists, Previous: Calling Functions, Up:\\nFunctions   [Contents][Index]\\n\\n\"}]","[{\"text\":\"5.4 Function Parameters\\n\\nFunction parameters can be any expression—a literal value, a value\\nstored in variable, an address in memory, or a more complex expression\\nbuilt by combining these.\\n\\n\"}]","[{\"text\":\"Within the function body, the parameter is a local copy of the value\\npassed into the function; you cannot change the value passed in by\\nchanging the local copy.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int x = 23;\\n\\n\\n\\n\\nfoo (x);\\n\\n\\n\\n\\n…\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* Definition for function foo. */\\n\\n\\n\\n\\nint foo (int a)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"a = 2 * a;\\n\\n\\n\\n\\n\\n\\nreturn a;\\n\\n\\n\\n\\n}\\n\\n\"}]","[{\"text\":\"In that example, even though the parameter a is modified in the function\\n‘foo’, the variable x that is passed to the function does not change. If\\nyou wish to use the function to change the original value of x, then you\\nwould have to incorporate the \"}]","[{\"text\":\"function call into an assignment\\nstatement:\\n\\n\\n\\n\\n\\nx = foo (x);\\n\\nIf the value that you pass to a function is a memory address (that is, a\\n\"}]","[{\"text\":\"pointer), then you can access (and change) the data stored at the memory\\naddress. This achieves an effect similar to pass-by-reference in other\\nlanguages, but is not the same: the memory address is simply a value,\\njust like any other value, and cannot \"}]","[{\"text\":\"itself be changed. The difference\\nbetween passing a pointer and passing an integer lies in what you can do\\nusing the value within the function.\\n\\nHere is an example of calling a function with a pointer parameter:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"void\\n\\n\\n\\n\\nfoo (int *x)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"*x = *x + 42;\\n\\n\\n\\n\\n}\\n\\n\\n\\n\\n…\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int a = 15;\\n\\n\\n\\n\\nfoo (&a);\\n\\nThe formal parameter for the function is of type pointer-to-int, and we\\ncall the function by passing it the address of a \"}]","[{\"text\":\"variable of type int.\\nBy dereferencing the pointer within the function body, we can both see\\nand change the value stored in the address. The above changes the value\\nof a to ‘57’.\\n\\nEven if you don’t want to change the \"}]","[{\"text\":\"value stored in the address,\\npassing the address of a variable rather than the variable itself can be\\nuseful if the variable type is large and you need to conserve memory\\nspace or limit the performance impact of parameter copying. For example:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"struct foo\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\nint x;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"float y;\\n\\n\\n\\n\\n\\n\\ndouble z;\\n\\n\\n\\n\\n};\\n\\n\\n\\n\"}]","[{\"text\":\"void bar (const struct foo *a);\\n\\nIn this case, unless you are working on a computer with very large\\nmemory addresses, it will take less memory to pass a pointer to the\\nstructure than to pass an instance of the structure.\\n\"}]","[{\"text\":\"One type of parameter that is always passed as a pointer is any sort of\\narray:\\n\\n\\n\\n\\n\\nvoid foo (int a[]);\\n\\n\\n\\n\\n\"}]","[{\"text\":\"…\\n\\n\\n\\n\\nint x[100];\\n\\n\\n\\n\\nfoo (x);\\n\\nIn this example, calling the function \"}]","[{\"text\":\"foo with the parameter a does not\\ncopy the entire array into a new local parameter within foo; rather, it\\npasses x as a pointer to the first element in x. Be careful, though:\\nwithin the function, you cannot use sizeof to determine the size of the\\n\"}]","[{\"text\":\"array x—sizeof instead tells you the size of the pointer x. Indeed, the\\nabove code is equivalent to:\\n\\n\\n\\n\\n\\nvoid foo (int *a);\\n\\n\\n\\n\\n\"}]","[{\"text\":\"…\\n\\n\\n\\n\\nint x[100];\\n\\n\\n\\n\\nfoo (x);\\n\\nExplicitly specifying the length of \"}]","[{\"text\":\"the array in the parameter\\ndeclaration will not help. If you really need to pass an array by value,\\nyou can wrap it in a struct, though doing this will rarely be useful\\n(passing a const-qualified pointer is normally sufficient to indicate\\n\"}]","[{\"text\":\"that the caller should not modify the array).\\n\\n------------------------------------------------------------------------\\n\\nNext: Calling Functions Through Function Pointers, Previous: Function\\nParameters, Up: \"}]","[{\"text\":\"Functions   [Contents][Index]\\n\\n5.5 Variable Length Parameter Lists\\n\\nYou can write a function that takes a variable number of arguments;\\nthese are called _variadic functions_. To do this, the function needs to\\n\"}]","[{\"text\":\"have at least one parameter of a known data type, but the remaining\\nparameters are optional, and can vary in both quantity and data type.\\n\\nYou list the initial parameters as normal, but then after that, use an\\nellipsis: ‘...’. \"}]","[{\"text\":\"Here is an example function prototype:\\n\\n\\n\\n\\n\\nint add_multiple_values (int number, ...);\\n\\nTo work with the optional parameters \"}]","[{\"text\":\"in the function definition, you\\nneed to use macros that are defined in the library header file\\n‘<stdarg.h>’, so you must #include that file. For a detailed description\\nof these macros, see The GNU C Library manual’s section on variadic\\n\"}]","[{\"text\":\"functions.\\n\\nHere is an example:\\n\\n\\n\\n\\n\\nint\\n\\n\\n\\n\\n\"}]","[{\"text\":\"add_multiple_values (int number, ...)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\nint counter, total \"}]","[{\"text\":\"= 0;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* Declare a variable of type ‘va_list’. */\\n\\n\\n\\n\\n\\n\\nva_list parameters;\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* Call the ‘va_start’ function. */\\n\\n\\n\\n\\n\\n\\nva_start (parameters, number);\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"for (counter = 0; counter < number; counter++)\\n\\n\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* Get the values of the optional parameters. */\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ntotal += va_arg \"}]","[{\"text\":\"(parameters, int);\\n\\n\\n\\n\\n\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* End use of the ‘parameters’ variable. */\\n\\n\\n\\n\\n\\n\\nva_end (parameters);\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return total;\\n\\n\\n\\n\\n}\\n\\nTo use optional parameters, you need to have a way to know how many\\nthere are. This can vary, so it can’t be hard-coded, but \"}]","[{\"text\":\"if you don’t\\nknow how many optional parameters you have, then you could have\\ndifficulty knowing when to stop using the ‘va_arg’ function. In the\\nabove example, the first parameter to the ‘add_multiple_values’\\nfunction, \"}]","[{\"text\":\"‘number’, is the number of optional parameters actually\\npassed. So, we might call the function like this:\\n\\n\\n\\n\\n\\nsum = add_multiple_values (3, 12, 34, 190);\\n\"}]","[{\"text\":\"The first parameter indicates how many optional parameters follow it.\\n\\nAlso, note that you don’t actually need to use ‘va_end’ function. In\\nfact, with GCC it doesn’t do anything at all. However, you might want to\\ninclude it to \"}]","[{\"text\":\"maximize compatibility with other compilers.\\n\\nSee Variadic Functions in The GNU C Library Reference Manual.\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Next: The main Function, Previous: Variable Length Parameter Lists, Up:\\nFunctions   [Contents][Index]\\n\\n5.6 Calling Functions Through Function Pointers\\n\\nYou can also call a function identified by a pointer. \"}]","[{\"text\":\"The indirection\\noperator * is optional when doing this.\\n\\n\\n\\n\\n\\n#include <stdio.h>\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"void foo (int i)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\nprintf (\\\"foo %d!\\\\n\\\", i);\\n\\n\\n\"}]","[{\"text\":\"}\\n\\n\\n\\n\\n\\nvoid bar (int i)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"printf (\\\"%d bar!\\\\n\\\", i);\\n\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\nvoid message (void (*func)(int), int \"}]","[{\"text\":\"times)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\nint j;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"for (j=0; j<times; ++j)\\n\\n\\n\\n\\n\\n\\n\\n\\nfunc (j);  /* (*func) (j); would be equivalent. */\\n\\n\\n\"}]","[{\"text\":\"}\\n\\n\\n\\n\\n\\nvoid example (int want_foo) \\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"void (*pf)(int) = &bar; /* The & is optional. */\\n\\n\\n\\n\\n\\n\\nif (want_foo)\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"pf = foo;\\n\\n\\n\\n\\n\\n\\nmessage (pf, 5);\\n\\n\\n\\n\\n}\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Recursive Functions, Previous: Calling Functions Through Function\\nPointers, Up: Functions   [Contents][Index]\\n\\n5.7 The main \"}]","[{\"text\":\"Function\\n\\nEvery program requires at least one function, called ‘main’. This is\\nwhere the program begins executing. You do not need to write a\\ndeclaration or prototype for main, but you do need to define it.\\n\"}]","[{\"text\":\"The return type for main is always int. You do not have to specify the\\nreturn type for main, but you can. However, you _cannot_ specify that it\\nhas a return type other than int.\\n\\nIn general, the return value from main indicates the \"}]","[{\"text\":\"program’s _exit\\nstatus_. A value of zero or EXIT_SUCCESS indicates success and\\nEXIT_FAILURE indicates an error. Otherwise, the significance of the\\nvalue returned is implementation-defined.\\n\\nReaching the } at \"}]","[{\"text\":\"the end of main without a return, or executing a\\nreturn statement with no value (that is, return;) are both equivalent.\\nIn C89, the effect of this is undefined, but in C99 the effect is\\nequivalent to return 0;.\\n\\n\"}]","[{\"text\":\"You can write your main function to have no parameters (that is, as\\nint main (void)), or to accept parameters from the command line. Here is\\na very simple main function with no parameters:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int\\n\\n\\n\\n\\nmain (void)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"puts (\\\"Hi there!\\\");\\n\\n\\n\\n\\n\\n\\nreturn 0;\\n\\n\\n\\n\\n}\\n\"}]","[{\"text\":\"To accept command line parameters, you need to have two parameters in\\nthe main function, int argc followed by char *argv[]. You can change the\\nnames of those parameters, but they must have those data types—int and\\narray of pointers to char. argc is \"}]","[{\"text\":\"the number of command line\\nparameters, including the name of the program itself. argv is an array\\nof the parameters, as character strings. argv[0], the first element in\\nthe array, is the name of the program as typed at the command line⁴; any\\n\"}]","[{\"text\":\"following array elements are the parameters that followed the name of\\nthe program.\\n\\nHere is an example main function that accepts command line parameters,\\nand prints out what those parameters are:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int\\n\\n\\n\\n\\nmain (int argc, char *argv[])\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int counter;\\n\\n\\n\\n\\n\\n\\n\\nfor (counter = 0; counter < argc; counter++)\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"printf (\\\"%s\\\\n\\\", argv[counter]);\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return 0;\\n\\n\\n\\n\\n}\\n\\n------------------------------------------------------------------------\\n\\nNext: Static Functions, Previous: The \"}]","[{\"text\":\"main Function, Up: Functions  \\n[Contents][Index]\\n\\n5.8 Recursive Functions\\n\\nYou can write a function that is recursive—a function that calls itself.\\nHere is an example that computes the factorial of an \"}]","[{\"text\":\"integer:\\n\\n\\n\\n\\n\\nint\\n\\n\\n\\n\\nfactorial (int x)\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\nif (x < 1)\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return 1;\\n\\n\\n\\n\\n\\n\\nelse\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return (x * factorial (x - 1));\\n\\n\\n\\n\\n}\\n\\nBe careful that you do not write a function that is infinitely\\nrecursive. In the above example, once \"}]","[{\"text\":\"x is 1, the recursion stops.\\nHowever, in the following example, the recursion does not stop until the\\nprogram is interrupted or runs out of memory:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int\\n\\n\\n\\n\\nwatermelon (int x)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return (watermelon (x));\\n\\n\\n\\n\\n}\\n\\nFunctions can also be indirectly recursive, of course.\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Nested Functions, Previous: Recursive Functions, Up: Functions  \\n[Contents][Index]\\n\\n5.9 Static Functions\\n\\n\"}]","[{\"text\":\"You can define a function to be static if you want it to be callable\\nonly within the source file where it is defined:\\n\\n\\n\\n\\n\\nstatic int\\n\\n\\n\\n\\n\"}]","[{\"text\":\"foo (int x)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\nreturn x + 42;\\n\\n\\n\"}]","[{\"text\":\"}\\n\\nThis is useful if you are building a reusable library of functions and\\nneed to include some subroutines that should not be callable by the end\\nuser.\\n\\nFunctions which are defined in this \"}]","[{\"text\":\"way are said to have _static\\nlinkage_. Unfortunately the static keyword has multiple meanings;\\nStorage Class Specifiers.\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Previous: Static Functions, Up: Functions   [Contents][Index]\\n\\n5.10 Nested Functions\\n\\nAs a GNU C extension, you can define functions within other functions, a\\ntechnique known as nesting functions.\\n\"}]","[{\"text\":\"Here is an example of a tail-recursive factorial function, defined using\\na nested function:\\n\\n\\n\\n\\n\\nint\\n\\n\\n\\n\\n\"}]","[{\"text\":\"factorial (int x)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\nint\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"factorial_helper (int a, int b)\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"if (a < 1)\\n\\n\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return b;\\n\\n\\n\\n\\n\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"else\\n\\n\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"return factorial_helper ((a - 1), (a * b));\\n\\n\\n\\n\\n\\n\\n\\n\\n}\\n\\n\\n\\n\\n\"}]","[{\"text\":\"}\\n\\n\\n\\n\\n\\n\\nreturn factorial_helper (x, 1);\\n\\n\\n\\n\\n}\\n\"}]","[{\"text\":\"Note that nested functions must be defined along with variable\\ndeclarations at the beginning of a function, and all other statements\\nfollow.\\n\\n------------------------------------------------------------------------\\n\"}]","[{\"text\":\"Next: A Sample Program, Previous: Functions, Up: Top   [Contents][Index]\\n\\n\\n6 Program Structure and Scope\\n\\nNow that we have seen all of the fundamental elements of C programs,\\nit’s time to look \"}]","[{\"text\":\"at the big picture.\\n\\n\\n\\n---------------------- ---- --\\n\\n\\n• Program Structure:        \\n\\n\\n• \"}]","[{\"text\":\"Scope:                    \\n\\n\\n---------------------- ---- --\\n\\n------------------------------------------------------------------------\\n\\nNext: Scope, Up: Program Structure \"}]","[{\"text\":\"and Scope   [Contents][Index]\\n\\n6.1 Program Structure\\n\\nA C program may exist entirely within a single source file, but more\\ncommonly, any non-trivial program will consist of several custom header\\n\"}]","[{\"text\":\"files and source files, and will also include and link with files from\\nexisting libraries.\\n\\nBy convention, header files (with a “.h” extension) contain variable and\\nfunction declarations, and source files (with a “.c” \"}]","[{\"text\":\"extension) contain\\nthe corresponding definitions. Source files may also store declarations,\\nif these declarations are not for objects which need to be seen by other\\nfiles. However, header files almost certainly should not contain any\\ndefinitions.\\n\"}]","[{\"text\":\"For example, if you write a function that computes square roots, and you\\nwanted this function to be accessible to files other than where you\\ndefine the function, then you would put the function declaration into a\\nheader file (with a “.h” file \"}]","[{\"text\":\"extension):\\n\\n\\n\\n\\n\\n/* sqrt.h */\\n\\n\\n\\n\\n\\ndouble\\n\\n\\n\"}]","[{\"text\":\"computeSqrt (double x);\\n\\nThis header file could be included by other source files which need to\\nuse your function, but do not need to know how it was implemented.\\n\\nThe implementation of the function \"}]","[{\"text\":\"would then go into a corresponding\\nsource file (with a “.c” file extension):\\n\\n\\n\\n\\n\\n/* sqrt.c */\\n\\n\\n\\n\"}]","[{\"text\":\"#include \\\"sqrt.h\\\"\\n\\n\\n\\n\\n\\ndouble\\n\\n\\n\\n\\ncomputeSqrt (double x)\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\ndouble result;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"…\\n\\n\\n\\n\\n\\n\\nreturn result;\\n\\n\\n\\n\\n}\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nPrevious: Program Structure, Up: Program Structure and Scope  \\n[Contents][Index]\\n\\n6.2 Scope\\n\\nScope refers to \"}]","[{\"text\":\"what parts of the program can “see” a declared object. A\\ndeclared object can be visible only within a particular function, or\\nwithin a particular file, or may be visible to an entire set of files by\\nway of including header files and using extern \"}]","[{\"text\":\"declarations.\\n\\nUnless explicitly stated otherwise, declarations made at the top-level\\nof a file (i.e., not within a function) are visible to the entire file,\\nincluding from within functions, but are not visible outside of the\\n\"}]","[{\"text\":\"file.\\n\\nDeclarations made within functions are visible only within those\\nfunctions.\\n\\nA declaration is not visible to declarations that came before it; for\\nexample:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int x = 5;\\n\\n\\n\\n\\nint y = x + 10;\\n\\nwill work, but:\\n\\n\\n\\n\\n\\nint x = y + 10;\\n\\n\\n\"}]","[{\"text\":\"int y = 5;\\n\\nwill not.\\n\\nSee Storage Class Specifiers, for more information on changing the scope\\nof declared objects. Also see Static Functions.\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Overflow, Previous: Program Structure and Scope, Up: Top  \\n[Contents][Index]\\n\\n\\n7 A Sample Program\\n\\n\"}]","[{\"text\":\"To conclude our description of C, here is a complete program written in\\nC, consisting of both a C source file and a header file. This program is\\nan expanded version of the quintessential “hello world” program, and\\nserves as an example of how to format \"}]","[{\"text\":\"and structure C code for use in\\nprograms for FSF Project GNU. (You can always download the most recent\\nversion of this program, including sample makefiles and other examples\\nof how to produce GNU software, from http://www.gnu.org/software/hello.)\\n\"}]","[{\"text\":\"This program uses features of the preprocessor; for a description of\\npreprocessor macros, see The C Preprocessor, available as part of the\\nGCC documentation.\\n\\n\\n\\n------------- ---- --\\n\\n\\n\"}]","[{\"text\":\"• hello.c:         \\n\\n\\n• system.h:        \\n\\n\\n------------- ---- --\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: system.h, Up: A Sample Program   [Contents][Index]\\n\\n7.1 hello.c\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* hello.c -- print a greeting message and exit.\\n\\n\\n\\n\\n\\n\\n\\n\\nCopyright (C) 1992, 1995, 1996, 1997, 1998, 1999, 2000, \"}]","[{\"text\":\"2001, 2002,\\n\\n\\n\\n\\n\\n\\n\\n\\n005, 2006, 2007 Free Software Foundation, Inc.\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"This program is free software; you can redistribute it and/or modify\\n\\n\\n\\n\\n\\n\\n\\nit under the terms of the GNU General Public License as \"}]","[{\"text\":\"published by\\n\\n\\n\\n\\n\\n\\n\\nthe Free Software Foundation; either version 3, or (at your option)\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"ny later version.\\n\\n\\n\\n\\n\\n\\n\\n\\nThis program is distributed in the hope that it will be useful,\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"but WITHOUT ANY WARRANTY; without even the implied warranty of\\n\\n\\n\\n\\n\\n\\n\\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \"}]","[{\"text\":\"See the\\n\\n\\n\\n\\n\\n\\n\\n\\nNU General Public License for more details.\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"You should have received a copy of the GNU General Public License\\n\\n\\n\\n\\n\\n\\n\\nalong with this program; if not, write to the Free \"}]","[{\"text\":\"Software Foundation,\\n\\n\\n\\n\\n\\n\\n\\n\\nnc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */\\n\\n\\n\\n\\n\"}]","[{\"text\":\"#include <config.h>\\n\\n\\n\\n\\n#include \\\"system.h\\\"\\n\\n\\n\\n\\n\\n/* String \"}]","[{\"text\":\"containing name the program is called with.  */\\n\\n\\n\\n\\nconst char *program_name;\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"static const struct option longopts[] =\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{ \\\"greeting\\\", required_argument, NULL, 'g' },\\n\\n\\n\\n\\n\\n\\n{ \\\"help\\\", no_argument, NULL, 'h' },\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{ \\\"next-generation\\\", no_argument, NULL, 'n' },\\n\\n\\n\\n\\n\\n\\n{ \\\"traditional\\\", no_argument, NULL, 't' },\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{ \\\"version\\\", no_argument, NULL, 'v' },\\n\\n\\n\\n\\n\\n\\n{ NULL, 0, NULL, 0 }\\n\\n\\n\\n\"}]","[{\"text\":\"};\\n\\n\\n\\n\\n\\nstatic void print_help (void);\\n\\n\\n\\n\\nstatic void print_version (void);\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int\\n\\n\\n\\n\\nmain (int argc, char *argv[])\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int optc;\\n\\n\\n\\n\\n\\n\\nint t = 0, n = 0, lose = 0;\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"const char *greeting = NULL;\\n\\n\\n\\n\\n\\n\\n\\nprogram_name = argv[0];\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* Set locale via LC_ALL.  */\\n\\n\\n\\n\\n\\n\\nsetlocale (LC_ALL, \\\"\\\");\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"#if ENABLE_NLS\\n\\n\\n\\n\\n\\n\\n/* Set the text message domain.  */\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"bindtextdomain (PACKAGE, LOCALEDIR);\\n\\n\\n\\n\\n\\n\\ntextdomain (PACKAGE);\\n\\n\\n\\n\\n\"}]","[{\"text\":\"#endif\\n\\n\\n\\n\\n\\n\\n\\n/* Even exiting has subtleties.  The /dev/full device on GNU/Linux\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"can be used for testing whether writes are checked properly.  For\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ninstance, hello \"}]","[{\"text\":\">/dev/full should exit unsuccessfully.  On exit,\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nif any writes failed, change the exit \"}]","[{\"text\":\"status.  This is\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nimplemented in the Gnulib module \\\"closeout\\\".  */\\n\\n\\n\\n\"}]","[{\"text\":\"atexit (close_stdout);\\n\\n\\n\\n\\n\\n\\n\\nwhile ((optc = getopt_long (argc, argv, \\\"g:hntv\\\", longopts, NULL)) != -1)\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"switch (optc)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* One goal here is having --help and --version exit immediately,\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"per GNU coding standards.  */\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ncase 'v':\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"print_version ();\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nexit \"}]","[{\"text\":\"(EXIT_SUCCESS);\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nbreak;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"case 'g':\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ngreeting = optarg;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"break;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ncase 'h':\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"print_help ();\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nexit \"}]","[{\"text\":\"(EXIT_SUCCESS);\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nbreak;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"case 'n':\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nn = 1;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"break;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ncase 't':\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"t = 1;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nbreak;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"default:\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nlose = 1;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"break;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"if (lose || optind < argc)\\n\\n\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* Print error message and exit.  */\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nif (optind < argc)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"fprintf (stderr, _(\\\"%s: extra operand: %s\\\\n\\\"),\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"program_name, argv[optind]);\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfprintf (stderr, _(\\\"Try `%s --help' \"}]","[{\"text\":\"for more information.\\\\n\\\"),\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"program_name);\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nexit (EXIT_FAILURE);\\n\\n\\n\\n\\n\"}]","[{\"text\":\"}\\n\\n\\n\\n\\n\\n\\n\\n/* Print greeting message and exit. */\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"if (t)\\n\\n\\n\\n\\n\\n\\n\\n\\nprintf (_(\\\"hello, world\\\\n\\\"));\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"else if (n)\\n\\n\\n\\n\\n\\n\\n\\n\\n/* TRANSLATORS: Use box drawing characters or other fancy stuff\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"if your encoding (e.g., UTF-8) allows it.  If done so add the\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"ollowing note, please:\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"[Note: For best viewing results use a UTF-8 locale, please.]\\n\\n\\n\\n\\n\\n\\n\\n\\n*/\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"printf (_(\\\"\\\\\\n\\n\\n\\n\\n+---------------+\\\\n\\\\\\n\\n\\n\\n\\n| Hello, world! |\\\\n\\\\\\n\\n\\n\\n\\n\"}]","[{\"text\":\"+---------------+\\\\n\\\\\\n\\n\\n\\n\\n\\\"));\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"else\\n\\n\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"if (!greeting)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ngreeting = \"}]","[{\"text\":\"_(\\\"Hello, world!\\\");\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nputs (greeting);\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"exit (EXIT_SUCCESS);\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* Print help info.  This long message is split into\\n\\n\\n\\n\\n\\n\\n\\nseveral pieces to help translators be able to align different\\n\\n\\n\\n\\n\"}]","[{\"text\":\"locks and identify the various pieces.  */\\n\\n\\n\\n\\n\\nstatic void\\n\\n\\n\\n\\nprint_help (void)\\n\\n\\n\\n\\n\"}]","[{\"text\":\"{\\n\\n\\n\\n\\n\\n\\n/* TRANSLATORS: --help output 1 (synopsis)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"no-wrap */\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nprintf (_(\\\"\\\\\\n\\n\\n\"}]","[{\"text\":\"Usage: %s [OPTION]...\\\\n\\\"), program_name);\\n\\n\\n\\n\\n\\n\\n\\n/* TRANSLATORS: --help output 2 (brief description)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"no-wrap */\\n\\n\\n\\n\\n\\n\\nfputs (_(\\\"\\\\\\n\\n\\n\\n\\nPrint a friendly, customizable \"}]","[{\"text\":\"greeting.\\\\n\\\"), stdout);\\n\\n\\n\\n\\n\\n\\n\\nputs (\\\"\\\");\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* TRANSLATORS: --help output 3: options 1/2\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nno-wrap */\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"fputs (_(\\\"\\\\\\n\\n\\n\\n\\n\\n\\n-h, --help          display this help and exit\\\\n\\\\\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-v, --version       display version information and exit\\\\n\\\"), stdout);\\n\\n\\n\\n\\n\\n\\n\\nputs (\\\"\\\");\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* TRANSLATORS: --help output 4: options 2/2\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nno-wrap */\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"fputs (_(\\\"\\\\\\n\\n\\n\\n\\n\\n\\n-t, --traditional       use traditional greeting format\\\\n\\\\\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"-n, --next-generation   use next-generation greeting format\\\\n\\\\\\n\\n\\n\\n\\n\\n\\n-g, --greeting=TEXT     use TEXT as the greeting message\\\\n\\\"), stdout);\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"printf (\\\"\\\\n\\\");\\n\\n\\n\\n\\n\\n\\n/* TRANSLATORS: --help output 5 (end)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"TRANSLATORS: the placeholder indicates the bug-reporting address\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfor this \"}]","[{\"text\":\"application.  Please add _another line_ with the\\n\\n\\n\\n\\n\\n\\n\\n\\n\\naddress for translation bugs.\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"no-wrap */\\n\\n\\n\\n\\n\\n\\nprintf (_(\\\"\\\\\\n\\n\\n\\n\\nReport bugs to <%s>.\\\\n\\\"), \"}]","[{\"text\":\"PACKAGE_BUGREPORT);\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* Print version and copyright information.  */\\n\\n\\n\\n\\n\\nstatic void\\n\\n\\n\\n\\nprint_version \"}]","[{\"text\":\"(void)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\nprintf (\\\"hello (GNU %s) %s\\\\n\\\", \"}]","[{\"text\":\"PACKAGE, VERSION);\\n\\n\\n\\n\\n\\n\\n/* xgettext: no-wrap */\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"puts (\\\"\\\");\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* It is important to separate the year from the rest of the message,\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nas done here, to \"}]","[{\"text\":\"avoid having to retranslate the message when a new\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nyear comes around.  */\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"printf (_(\\\"\\\\\\n\\n\\n\\n\\nCopyright (C) %s Free Software Foundation, Inc.\\\\n\\\\\\n\\n\\n\\n\\nLicense GPLv3+: GNU GPL version 3 or \"}]","[{\"text\":\"later\\\\\\n\\n\\n\\n\\n<http://gnu.org/licenses/gpl.html>\\\\n\\\\\\n\\n\\n\\n\\nThis is free software: you are free to change and \"}]","[{\"text\":\"redistribute it.\\\\n\\\\\\n\\n\\n\\n\\nThere is NO WARRANTY, to the extent permitted by law.\\\\n\\\"),\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"\\\"2007\\\");\\n\\n\\n\\n\\n}\\n\\n------------------------------------------------------------------------\\n\\nPrevious: hello.c, Up: A Sample \"}]","[{\"text\":\"Program   [Contents][Index]\\n\\n7.2 system.h\\n\\n\\n\\n\\n\\n/* system.h: system-dependent declarations; include this first.\\n\\n\\n\\n\\n\"}]","[{\"text\":\"opyright (C) 1996, 2005, 2006, 2007 Free Software Foundation, Inc.\\n\\n\\n\\n\\n\\n\\n\\n\\nThis program is free software; you \"}]","[{\"text\":\"can redistribute it and/or modify\\n\\n\\n\\n\\n\\n\\n\\nit under the terms of the GNU General Public License as published by\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"the Free Software Foundation; either version 3, or (at your option)\\n\\n\\n\\n\\n\\n\\n\\n\\nny later version.\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"This program is distributed in the hope that it will be useful,\\n\\n\\n\\n\\n\\n\\n\\nbut WITHOUT ANY WARRANTY; without even the implied \"}]","[{\"text\":\"warranty of\\n\\n\\n\\n\\n\\n\\n\\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"NU General Public License for more details.\\n\\n\\n\\n\\n\\n\\n\\n\\nYou should have received a copy of the GNU General \"}]","[{\"text\":\"Public License\\n\\n\\n\\n\\n\\n\\n\\nalong with this program; if not, write to the Free Software Foundation,\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"nc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */\\n\\n\\n\\n\\n\\n#ifndef HELLO_SYSTEM_H\\n\\n\\n\\n\"}]","[{\"text\":\"#define HELLO_SYSTEM_H\\n\\n\\n\\n\\n\\n/* Assume ANSI C89 headers are available.  */\\n\\n\\n\\n\\n\"}]","[{\"text\":\"#include <locale.h>\\n\\n\\n\\n\\n#include <stdio.h>\\n\\n\\n\\n\\n#include <stdlib.h>\\n\\n\\n\"}]","[{\"text\":\"#include <string.h>\\n\\n\\n\\n\\n\\n/* Use POSIX headers.  If they are not available, we use the substitute\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"provided by gnulib.  */\\n\\n\\n\\n\\n#include <getopt.h>\\n\\n\\n\\n\\n#include <unistd.h>\\n\\n\\n\\n\\n\"}]","[{\"text\":\"/* Internationalization.  */\\n\\n\\n\\n\\n#include \\\"gettext.h\\\"\\n\\n\\n\\n\\n#define _(str) gettext (str)\\n\\n\\n\"}]","[{\"text\":\"#define N_(str) gettext_noop (str)\\n\\n\\n\\n\\n\\n/* Check for errors on write.  */\\n\\n\\n\\n\\n#include \"}]","[{\"text\":\"\\\"closeout.h\\\"\\n\\n\\n\\n\\n\\n#endif /* HELLO_SYSTEM_H */\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Next: GNU Free Documentation License, Previous: A Sample Program, Up:\\nTop   [Contents][Index]\\n\\n\\nAppendix A Overflow\\n\\n[This appendix, written principally by Paul Eggert, is \"}]","[{\"text\":\"from the GNU\\nAutoconf manual. We thought that it would be helpful to include here.\\n–TJR]\\n\\nIn practice many portable C programs assume that signed integer overflow\\nwraps around reliably using two’s complement arithmetic. \"}]","[{\"text\":\"Yet the C\\nstandard says that program behavior is undefined on overflow, and in a\\nfew cases C programs do not work on some modern implementations because\\ntheir overflows do not wrap around as their authors expected.\\nConversely, in \"}]","[{\"text\":\"signed integer remainder, the C standard requires\\noverflow behavior that is commonly not implemented.\\n\\n\\n\\n-------------------------------- ---- ---------------------------------------------\\n\\n\\n\"}]","[{\"text\":\"• Integer Overflow Basics:            Why integer overflow is a problem\\n\\n\\n• Signed Overflow Examples:           Examples of code assuming wraparound\\n\\n\\n• Optimization and Wraparound:        \"}]","[{\"text\":\"Optimizations that break uses of wraparound\\n\\n\\n• Signed Overflow Advice:             Practical advice for signed overflow issues\\n\\n\\n• Signed Integer Division:            \"}]","[{\"text\":\"INT_MIN / -1 and INT_MIN % -1\\n\\n\\n-------------------------------- ---- ---------------------------------------------\\n\\n------------------------------------------------------------------------\\n\"}]","[{\"text\":\"Next: Signed Overflow Examples, Up: Overflow   [Contents][Index]\\n\\nA.1 Basics of Integer Overflow\\n\\nIn languages like C, unsigned integer overflow reliably wraps around;\\ne.g., UINT_MAX + 1 yields zero. This \"}]","[{\"text\":\"is guaranteed by the C standard and\\nis portable in practice, unless you specify aggressive, nonstandard\\noptimization options suitable only for special applications.\\n\\nIn contrast, the C standard says that signed integer \"}]","[{\"text\":\"overflow leads to\\nundefined behavior where a program can do anything, including dumping\\ncore or overrunning a buffer. The misbehavior can even precede the\\noverflow. Such an overflow can occur during addition, subtraction,\\nmultiplication, \"}]","[{\"text\":\"division, and left shift.\\n\\nDespite this requirement of the standard, many C programs assume that\\nsigned integer overflow silently wraps around modulo a power of two,\\nusing two’s complement arithmetic, so long as you cast \"}]","[{\"text\":\"the resulting\\nvalue to a signed integer type or store it into a signed integer\\nvariable. If you use conservative optimization flags, such programs are\\ngenerally portable to the vast majority of modern platforms, with a few\\nexceptions \"}]","[{\"text\":\"discussed later.\\n\\nFor historical reasons the C standard also allows implementations with\\nones’ complement or signed magnitude arithmetic, but it is safe to\\nassume two’s complement nowadays.\\n\\nAlso, overflow can \"}]","[{\"text\":\"occur when converting an out-of-range value to a\\nsigned integer type. Here a standard implementation must define what\\nhappens, but this might include raising an exception. In practice all\\nknown implementations support silent wraparound in this \"}]","[{\"text\":\"case, so you\\nneed not worry about other possibilities.\\n\\n------------------------------------------------------------------------\\n\\nNext: Optimization and Wraparound, Previous: Integer Overflow Basics,\\n\"}]","[{\"text\":\"Up: Overflow   [Contents][Index]\\n\\nA.2 Examples of Code Assuming Wraparound Overflow\\n\\nThere has long been a tension between what the C standard requires for\\nsigned integer overflow, and what C programs commonly \"}]","[{\"text\":\"assume. The\\nstandard allows aggressive optimizations based on assumptions that\\noverflow never occurs, but many practical C programs rely on overflow\\nwrapping around. These programs do not conform to the standard, but they\\ncommonly work in \"}]","[{\"text\":\"practice because compiler writers are understandably\\nreluctant to implement optimizations that would break many programs,\\nunless perhaps a user specifies aggressive optimization.\\n\\nThe C Standard says that if a program has signed integer \"}]","[{\"text\":\"overflow its\\nbehavior is undefined, and the undefined behavior can even precede the\\noverflow. To take an extreme example:\\n\\n\\n\\n\\n\\nif (password == expected_password)\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"allow_superuser_privileges ();\\n\\n\\n\\n\\nelse if (counter++ == INT_MAX)\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"abort ();\\n\\n\\n\\n\\nelse\\n\\n\\n\\n\\n\\n\\nprintf (\\\"%d password mismatches\\\\n\\\", \"}]","[{\"text\":\"counter);\\n\\nIf the int variable counter equals INT_MAX, counter++ must overflow and\\nthe behavior is undefined, so the C standard allows the compiler to\\noptimize away the test against INT_MAX and the abort call. Worse, if an\\n\"}]","[{\"text\":\"earlier bug in the program lets the compiler deduce that\\ncounter == INT_MAX or that counter previously overflowed, the C standard\\nallows the compiler to optimize away the password test and generate code\\nthat allows superuser privileges unconditionally.\\n\"}]","[{\"text\":\"Despite this requirement by the standard, it has long been common for C\\ncode to assume wraparound arithmetic after signed overflow, and all\\nknown practical C implementations support some C idioms that assume\\nwraparound signed arithmetic, even if \"}]","[{\"text\":\"the idioms do not conform strictly\\nto the standard. If your code looks like the following examples it will\\nalmost surely work with real-world compilers.\\n\\nHere is an example derived from the 7th Edition Unix implementation of\\n\"}]","[{\"text\":\"atoi (1979-01-10):\\n\\n\\n\\n\\n\\nchar *p;\\n\\n\\n\\n\\nint f, n;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"…\\n\\n\\n\\n\\nwhile (*p >= '0' && *p <= '9')\\n\\n\\n\\n\\n\\n\\nn = n * 10 + *p++ \"}]","[{\"text\":\"- '0';\\n\\n\\n\\n\\nreturn (f ? -n : n);\\n\\nEven if the input string is in range, on most modern machines this has\\nsigned overflow when computing the \"}]","[{\"text\":\"most negative integer (the -n\\noverflows) or a value near an extreme integer (the first + overflows).\\n\\nHere is another example, derived from the 7th Edition implementation of\\nrand (1979-01-10). Here the programmer expects both \"}]","[{\"text\":\"multiplication and\\naddition to wrap on overflow:\\n\\n\\n\\n\\n\\nstatic long int randx = 1;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"…\\n\\n\\n\\n\\nrandx = randx * 1103515245 + 12345;\\n\\n\\n\\n\\nreturn (randx >> 16) & 077777;\\n\\n\"}]","[{\"text\":\"In the following example, derived from the GNU C Library 2.5\\nimplementation of mktime (2006-09-09), the code assumes wraparound\\narithmetic in + to detect signed overflow:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"time_t t, t1, t2;\\n\\n\\n\\n\\nint sec_requested, sec_adjustment;\\n\\n\\n\\n\\n…\\n\\n\\n\\n\\n\"}]","[{\"text\":\"t1 = t + sec_requested;\\n\\n\\n\\n\\nt2 = t1 + sec_adjustment;\\n\\n\\n\\n\\nif (((t1 < t) != (sec_requested < 0))\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"|| ((t2 < t1) != (sec_adjustment < 0)))\\n\\n\\n\\n\\n\\n\\nreturn -1;\\n\\nIf your code looks like these examples, it is probably \"}]","[{\"text\":\"safe even though\\nit does not strictly conform to the C standard. This might lead one to\\nbelieve that one can generally assume wraparound on overflow, but that\\nis not always true, as can be seen in the next section.\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Signed Overflow Advice, Previous: Signed Overflow Examples, Up:\\nOverflow   [Contents][Index]\\n\\nA.3 Optimizations That Break \"}]","[{\"text\":\"Wraparound Arithmetic\\n\\nCompilers sometimes generate code that is incompatible with wraparound\\ninteger arithmetic. A simple example is an algebraic simplification: a\\ncompiler might translate (i * 2000) / 1000 to i * 2 \"}]","[{\"text\":\"because it assumes\\nthat i * 2000 does not overflow. The translation is not equivalent to\\nthe original when overflow occurs: e.g., in the typical case of 32-bit\\nsigned two’s complement wraparound int, if i has type int and value\\n1073742, the \"}]","[{\"text\":\"original expression returns -2147483 but the optimized\\nversion returns the mathematically correct value 2147484.\\n\\nMore subtly, loop induction optimizations often exploit the undefined\\nbehavior of signed overflow. Consider \"}]","[{\"text\":\"the following contrived function\\nsumc:\\n\\n\\n\\n\\n\\nint\\n\\n\\n\\n\\nsumc (int lo, int \"}]","[{\"text\":\"hi)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\nint sum = 0;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int i;\\n\\n\\n\\n\\n\\n\\nfor (i = lo; i <= hi; i++)\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"sum ^= i * 53;\\n\\n\\n\\n\\n\\n\\nreturn sum;\\n\\n\\n\\n\\n}\\n\\n\"}]","[{\"text\":\"To avoid multiplying by 53 each time through the loop, an optimizing\\ncompiler might internally transform sumc to the equivalent of the\\nfollowing:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int\\n\\n\\n\\n\\ntransformed_sumc (int lo, int hi)\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int sum = 0;\\n\\n\\n\\n\\n\\n\\nint hic = hi * 53;\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int ic;\\n\\n\\n\\n\\n\\n\\nfor (ic = lo * 53; ic <= hic; ic += 53)\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"sum ^= ic;\\n\\n\\n\\n\\n\\n\\nreturn sum;\\n\\n\\n\\n\\n}\\n\\n\"}]","[{\"text\":\"This transformation is allowed by the C standard, but it is invalid for\\nwraparound arithmetic when INT_MAX / 53 < hi, because then the overflow\\nin computing expressions like hi * 53 can cause the expression i <= hi\\nto yield a different value from the \"}]","[{\"text\":\"transformed expression ic <= hic.\\n\\nFor this reason, compilers that use loop induction and similar\\ntechniques often do not support reliable wraparound arithmetic when a\\nloop induction variable like ic is involved. Since loop \"}]","[{\"text\":\"induction\\nvariables are generated by the compiler, and are not visible in the\\nsource code, it is not always trivial to say whether the problem affects\\nyour code.\\n\\nHardly any code actually depends on wraparound \"}]","[{\"text\":\"arithmetic in cases like\\nthese, so in practice these loop induction optimizations are almost\\nalways useful. However, edge cases in this area can cause problems. For\\nexample:\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"int j;\\n\\n\\n\\n\\nfor (j = 1; 0 < j; j *= 2)\\n\\n\\n\\n\\n\\n\\ntest (j);\\n\"}]","[{\"text\":\"Here, the loop attempts to iterate through all powers of 2 that int can\\nrepresent, but the C standard allows a compiler to optimize away the\\ncomparison and generate an infinite loop, under the argument that\\nbehavior is undefined on overflow. As \"}]","[{\"text\":\"of this writing this optimization\\nis not done by any production version of GCC with -O2, but it might be\\nperformed by other compilers, or by more aggressive GCC optimization\\noptions, and the GCC developers have not decided whether it will\\n\"}]","[{\"text\":\"continue to work with GCC and -O2.\\n\\n------------------------------------------------------------------------\\n\\nNext: Signed Integer Division, Previous: Optimization and Wraparound,\\nUp: Overflow   [Contents][Index]\\n\"}]","[{\"text\":\"A.4 Practical Advice for Signed Overflow Issues\\n\\nIdeally the safest approach is to avoid signed integer overflow\\nentirely. For example, instead of multiplying two signed integers, you\\ncan convert them to unsigned \"}]","[{\"text\":\"integers, multiply the unsigned values,\\nthen test whether the result is in signed range.\\n\\nRewriting code in this way will be inconvenient, though, particularly if\\nthe signed values might be negative. Also, it may hurt \"}]","[{\"text\":\"performance.\\nUsing unsigned arithmetic to check for overflow is particularly painful\\nto do portably and efficiently when dealing with an integer type like\\nuid_t whose width and signedness vary from platform to platform.\\n\\n\"}]","[{\"text\":\"Furthermore, many C applications pervasively assume wraparound behavior\\nand typically it is not easy to find and remove all these assumptions.\\nHence it is often useful to maintain nonstandard code that assumes\\nwraparound on overflow, instead of \"}]","[{\"text\":\"rewriting the code. The rest of this\\nsection attempts to give practical advice for this situation.\\n\\nIf your code wants to detect signed integer overflow in sum = a + b, it\\nis generally safe to use an expression like (sum < a) != \"}]","[{\"text\":\"(b < 0).\\n\\nIf your code uses a signed loop index, make sure that the index cannot\\noverflow, along with all signed expressions derived from the index. Here\\nis a contrived example of problematic code with two instances of\\n\"}]","[{\"text\":\"overflow.\\n\\n\\n\\n\\n\\nfor (i = INT_MAX - 10; i <= INT_MAX; i++)\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"if (i + 1 < 0)\\n\\n\\n\\n\\n\\n\\n\\n\\n{\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"report_overflow ();\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nbreak;\\n\\n\\n\\n\\n\"}]","[{\"text\":\"}\\n\\nBecause of the two overflows, a compiler might optimize away or\\ntransform the two comparisons in a way that is incompatible with the\\nwraparound assumption.\\n\\nIf your code uses \"}]","[{\"text\":\"an expression like (i * 2000) / 1000 and you actually\\nwant the multiplication to wrap around on overflow, use unsigned\\narithmetic to do it, e.g., ((int) (i * 2000u)) / 1000.\\n\\nIf your code assumes wraparound behavior and you want to \"}]","[{\"text\":\"insulate it\\nagainst any GCC optimizations that would fail to support that behavior,\\nyou should use GCC’s -fwrapv option, which causes signed overflow to\\nwrap around reliably (except for division and remainder, as discussed in\\nthe next section).\\n\"}]","[{\"text\":\"If you need to port to platforms where signed integer overflow does not\\nreliably wrap around (e.g., due to hardware overflow checking, or to\\nhighly aggressive optimizations), you should consider debugging with\\nGCC’s -ftrapv option, which causes \"}]","[{\"text\":\"signed overflow to raise an\\nexception.\\n\\n------------------------------------------------------------------------\\n\\nPrevious: Signed Overflow Advice, Up: Overflow   [Contents][Index]\\n\\n\"}]","[{\"text\":\"A.5 Signed Integer Division and Integer Overflow\\n\\nOverflow in signed integer division is not always harmless: for example,\\non CPUs of the i386 family, dividing INT_MIN by -1 yields a SIGFPE\\nsignal which by default terminates \"}]","[{\"text\":\"the program. Worse, taking the\\nremainder of these two values typically yields the same signal on these\\nCPUs, even though the C standard requires INT_MIN % -1 to yield zero\\nbecause the expression does not overflow.\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nNext: Index, Previous: Overflow, Up: Top   [Contents][Index]\\n\\n\\nGNU Free Documentation License\\n\\n\"}]","[{\"text\":\"Version 1.3, 3 November 2008\\n\\n\\n\\n\\n\\nCopyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.\\n\\n\\n\\n\"}]","[{\"text\":\"http://fsf.org/\\n\\n\\n\\n\\n\\nEveryone is permitted to copy and distribute verbatim copies\\n\\n\\n\\n\\n\"}]","[{\"text\":\"of this license document, but changing it is not allowed.\\n\\n1.  PREAMBLE\\n\\n\\n\\n\\n\\nThe purpose of this License is to make a manual, \"}]","[{\"text\":\"textbook, or other\\n\\n\\n\\n\\nfunctional and useful document _free_ in the sense of freedom: to\\n\\n\\n\\n\\nassure everyone \"}]","[{\"text\":\"the effective freedom to copy and redistribute it,\\n\\n\\n\\n\\nwith or without modifying it, either commercially or\\n\\n\\n\\n\\n\"}]","[{\"text\":\"noncommercially. Secondarily, this License preserves for the author\\n\\n\\n\\n\\nand publisher a way to get credit for their work, while not being\\n\\n\\n\\n\"}]","[{\"text\":\"considered responsible for modifications made by others.\\n\\n\\n\\n\\n\\nThis License is a kind of “copyleft”, which means that derivative\\n\\n\\n\\n\\n\"}]","[{\"text\":\"works of the document must themselves be free in the same sense. It\\n\\n\\n\\n\\ncomplements the GNU General Public License, which is a copyleft\\n\\n\\n\\n\"}]","[{\"text\":\"license designed for free software.\\n\\n\\n\\n\\n\\nWe have designed this License in order to use it for manuals for\\n\\n\\n\\n\\n\"}]","[{\"text\":\"free software, because free software needs free documentation: a\\n\\n\\n\\n\\nfree program should come with manuals providing the same freedoms\\n\\n\\n\\n\\n\"}]","[{\"text\":\"that the software does. But this License is not limited to software\\n\\n\\n\\n\\nmanuals; it can be used for any textual work, regardless of subject\\n\\n\\n\\n\\n\"}]","[{\"text\":\"matter or whether it is published as a printed book. We recommend\\n\\n\\n\\n\\nthis License principally for works whose purpose is instruction or\\n\\n\\n\\n\"}]","[{\"text\":\"reference.\\n\\n2.  APPLICABILITY AND DEFINITIONS\\n\\n\\n\\n\\n\\nThis License applies to any manual or other work, in any medium,\\n\\n\\n\\n\\n\"}]","[{\"text\":\"that contains a notice placed by the copyright holder saying it can\\n\\n\\n\\n\\nbe distributed under the terms of this License. Such a notice grants\\n\\n\\n\\n\\n\"}]","[{\"text\":\"a world-wide, royalty-free license, unlimited in duration, to use\\n\\n\\n\\n\\nthat work under the conditions stated herein. The “Document”, below,\\n\\n\\n\\n\\n\"}]","[{\"text\":\"refers to any such manual or work. Any member of the public is a\\n\\n\\n\\n\\nlicensee, and is addressed as “you”. You accept the license if you\\n\\n\\n\\n\\n\"}]","[{\"text\":\"copy, modify or distribute the work in a way requiring permission\\n\\n\\n\\n\\nunder copyright law.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"A “Modified Version” of the Document means any work containing the\\n\\n\\n\\n\\nDocument or a portion of it, either copied verbatim, or with\\n\\n\\n\\n\"}]","[{\"text\":\"modifications and/or translated into another language.\\n\\n\\n\\n\\n\\nA “Secondary Section” is a named appendix or a front-matter section\\n\\n\\n\\n\\n\"}]","[{\"text\":\"of the Document that deals exclusively with the relationship of the\\n\\n\\n\\n\\npublishers or authors of the Document to the Document’s overall\\n\\n\\n\\n\\n\"}]","[{\"text\":\"subject (or to related matters) and contains nothing that could fall\\n\\n\\n\\n\\ndirectly within that overall subject. (Thus, if the Document is in\\n\\n\\n\\n\\n\"}]","[{\"text\":\"part a textbook of mathematics, a Secondary Section may not explain\\n\\n\\n\\n\\nany mathematics.) The relationship could be a matter of historical\\n\\n\\n\\n\\n\"}]","[{\"text\":\"connection with the subject or with related matters, or of legal,\\n\\n\\n\\n\\ncommercial, philosophical, ethical or political position regarding\\n\\n\\n\\n\"}]","[{\"text\":\"them.\\n\\n\\n\\n\\n\\nThe “Invariant Sections” are certain Secondary Sections whose titles\\n\\n\\n\\n\\n\"}]","[{\"text\":\"are designated, as being those of Invariant Sections, in the notice\\n\\n\\n\\n\\nthat says that the Document is released under this License. If a\\n\\n\\n\\n\\n\"}]","[{\"text\":\"section does not fit the above definition of Secondary then it is\\n\\n\\n\\n\\nnot allowed to be designated as Invariant. The Document may contain\\n\\n\\n\\n\\n\"}]","[{\"text\":\"zero Invariant Sections. If the Document does not identify any\\n\\n\\n\\n\\nInvariant Sections then there are none.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The “Cover Texts” are certain short passages of text that are\\n\\n\\n\\n\\nlisted, as Front-Cover Texts or Back-Cover Texts, in the notice that\\n\\n\\n\\n\\n\"}]","[{\"text\":\"says that the Document is released under this License. A Front-Cover\\n\\n\\n\\n\\nText may be at most 5 words, and a Back-Cover Text may be at most 25\\n\\n\\n\\n\"}]","[{\"text\":\"words.\\n\\n\\n\\n\\n\\nA “Transparent” copy of the Document means a machine-readable copy,\\n\\n\\n\\n\\n\"}]","[{\"text\":\"represented in a format whose specification is available to the\\n\\n\\n\\n\\ngeneral public, that is suitable for revising the document\\n\\n\\n\\n\\n\"}]","[{\"text\":\"straightforwardly with generic text editors or (for images composed\\n\\n\\n\\n\\nof pixels) generic paint programs or (for drawings) some widely\\n\\n\\n\\n\\n\"}]","[{\"text\":\"available drawing editor, and that is suitable for input to text\\n\\n\\n\\n\\nformatters or for automatic translation to a variety of formats\\n\\n\\n\\n\\n\"}]","[{\"text\":\"suitable for input to text formatters. A copy made in an otherwise\\n\\n\\n\\n\\nTransparent file format whose markup, or absence of markup, has been\\n\\n\\n\\n\\n\"}]","[{\"text\":\"arranged to thwart or discourage subsequent modification by readers\\n\\n\\n\\n\\nis not Transparent. An image format is not Transparent if used for\\n\\n\\n\\n\\n\"}]","[{\"text\":\"any substantial amount of text. A copy that is not “Transparent” is\\n\\n\\n\\n\\ncalled “Opaque”.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Examples of suitable formats for Transparent copies include plain\\n\\n\\n\\n\\nASCII without markup, Texinfo input format, LaTeX input format, SGML\\n\\n\\n\\n\\n\"}]","[{\"text\":\"or XML using a publicly available DTD, and standard-conforming\\n\\n\\n\\n\\nsimple HTML, PostScript or PDF designed for human modification.\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Examples of transparent image formats include PNG, XCF and JPG.\\n\\n\\n\\n\\nOpaque formats include proprietary formats that can be read and\\n\\n\\n\\n\\n\"}]","[{\"text\":\"edited only by proprietary word processors, SGML or XML for which\\n\\n\\n\\n\\nthe DTD and/or processing tools are not generally available, and the\\n\\n\\n\\n\\n\"}]","[{\"text\":\"machine-generated HTML, PostScript or PDF produced by some word\\n\\n\\n\\n\\nprocessors for output purposes only.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The “Title Page” means, for a printed book, the title page itself,\\n\\n\\n\\n\\nplus such following pages as are needed to hold, legibly, the\\n\\n\\n\\n\\n\"}]","[{\"text\":\"material this License requires to appear in the title page. For\\n\\n\\n\\n\\nworks in formats which do not have any title page as such, “Title\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Page” means the text near the most prominent appearance of the\\n\\n\\n\\n\\nwork’s title, preceding the beginning of the body of the text.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The “publisher” means any person or entity that distributes copies\\n\\n\\n\\n\\nof the Document to the public.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"A section “Entitled XYZ” means a named subunit of the Document whose\\n\\n\\n\\n\\ntitle either is precisely XYZ or contains XYZ in parentheses\\n\\n\\n\\n\\n\"}]","[{\"text\":\"following text that translates XYZ in another language. (Here XYZ\\n\\n\\n\\n\\nstands for a specific section name mentioned below, such as\\n\\n\\n\\n\\n\"}]","[{\"text\":\"“Acknowledgements”, “Dedications”, “Endorsements”, or “History”.) To\\n\\n\\n\\n\\n“Preserve the Title” of such a section when you modify the Document\\n\\n\\n\\n\\n\"}]","[{\"text\":\"means that it remains a section “Entitled XYZ” according to this\\n\\n\\n\\n\\ndefinition.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The Document may include Warranty Disclaimers next to the notice\\n\\n\\n\\n\\nwhich states that this License applies to the Document. These\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Warranty Disclaimers are considered to be included by reference in\\n\\n\\n\\n\\nthis License, but only as regards disclaiming warranties: any other\\n\\n\\n\\n\\n\"}]","[{\"text\":\"implication that these Warranty Disclaimers may have is void and has\\n\\n\\n\\n\\nno effect on the meaning of this License.\\n\\n3.  VERBATIM COPYING\\n\\n\\n\\n\\n\"}]","[{\"text\":\"You may copy and distribute the Document in any medium, either\\n\\n\\n\\n\\ncommercially or noncommercially, provided that this License, the\\n\\n\\n\\n\\n\"}]","[{\"text\":\"copyright notices, and the license notice saying this License\\n\\n\\n\\n\\napplies to the Document are reproduced in all copies, and that you\\n\\n\\n\\n\\n\"}]","[{\"text\":\"add no other conditions whatsoever to those of this License. You may\\n\\n\\n\\n\\nnot use technical measures to obstruct or control the reading or\\n\\n\\n\\n\\n\"}]","[{\"text\":\"further copying of the copies you make or distribute. However, you\\n\\n\\n\\n\\nmay accept compensation in exchange for copies. If you distribute a\\n\\n\\n\\n\\n\"}]","[{\"text\":\"large enough number of copies you must also follow the conditions in\\n\\n\\n\\n\\nsection 3.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"You may also lend copies, under the same conditions stated above,\\n\\n\\n\\n\\nand you may publicly display copies.\\n\\n4.  COPYING IN QUANTITY\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"If you publish printed copies (or copies in media that commonly have\\n\\n\\n\\n\\nprinted covers) of the Document, numbering more than 100, and the\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Document’s license notice requires Cover Texts, you must enclose the\\n\\n\\n\\n\\ncopies in covers that carry, clearly and legibly, all these Cover\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on\\n\\n\\n\\n\\nthe back cover. Both covers must also clearly and legibly identify\\n\\n\\n\\n\\n\"}]","[{\"text\":\"you as the publisher of these copies. The front cover must present\\n\\n\\n\\n\\nthe full title with all words of the title equally prominent and\\n\\n\\n\\n\\n\"}]","[{\"text\":\"visible. You may add other material on the covers in addition.\\n\\n\\n\\n\\nCopying with changes limited to the covers, as long as they preserve\\n\\n\\n\\n\\n\"}]","[{\"text\":\"the title of the Document and satisfy these conditions, can be\\n\\n\\n\\n\\ntreated as verbatim copying in other respects.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"If the required texts for either cover are too voluminous to fit\\n\\n\\n\\n\\nlegibly, you should put the first ones listed (as many as fit\\n\\n\\n\\n\\n\"}]","[{\"text\":\"reasonably) on the actual cover, and continue the rest onto adjacent\\n\\n\\n\\n\\npages.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"If you publish or distribute Opaque copies of the Document numbering\\n\\n\\n\\n\\nmore than 100, you must either include a machine-readable\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Transparent copy along with each Opaque copy, or state in or with\\n\\n\\n\\n\\neach Opaque copy a computer-network location from which the general\\n\\n\\n\\n\\n\"}]","[{\"text\":\"network-using public has access to download using public-standard\\n\\n\\n\\n\\nnetwork protocols a complete Transparent copy of the Document, free\\n\\n\\n\\n\\n\"}]","[{\"text\":\"of added material. If you use the latter option, you must take\\n\\n\\n\\n\\nreasonably prudent steps, when you begin distribution of Opaque\\n\\n\\n\\n\\n\"}]","[{\"text\":\"copies in quantity, to ensure that this Transparent copy will remain\\n\\n\\n\\n\\nthus accessible at the stated location until at least one year after\\n\\n\\n\\n\\n\"}]","[{\"text\":\"the last time you distribute an Opaque copy (directly or through\\n\\n\\n\\n\\nyour agents or retailers) of that edition to the public.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"It is requested, but not required, that you contact the authors of\\n\\n\\n\\n\\nthe Document well before redistributing any large number of copies,\\n\\n\\n\\n\\n\"}]","[{\"text\":\"to give them a chance to provide you with an updated version of the\\n\\n\\n\\n\\nDocument.\\n\\n5.  MODIFICATIONS\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"You may copy and distribute a Modified Version of the Document under\\n\\n\\n\\n\\nthe conditions of sections 2 and 3 above, provided that you release\\n\\n\\n\\n\\n\"}]","[{\"text\":\"the Modified Version under precisely this License, with the Modified\\n\\n\\n\\n\\nVersion filling the role of the Document, thus licensing\\n\\n\\n\\n\\n\"}]","[{\"text\":\"distribution and modification of the Modified Version to whoever\\n\\n\\n\\n\\npossesses a copy of it. In addition, you must do these things in the\\n\\n\\n\\n\"}]","[{\"text\":\"Modified Version:\\n\\n\\n\\n\\n\\n1.  Use in the Title Page (and on the covers, if any) a title\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"distinct from that of the Document, and from those of previous\\n\\n\\n\\n\\n\\n\\n\\n\\nversions (which should, if there were \"}]","[{\"text\":\"any, be listed in the\\n\\n\\n\\n\\n\\n\\n\\n\\nHistory section of the Document). You may use the same title as\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"a previous version if the original publisher of that version\\n\\n\\n\\n\\n\\n\\n\\n\\ngives permission.\\n\\n\\n\\n\\n\"}]","[{\"text\":\"2.  List on the Title Page, as authors, one or more persons or\\n\\n\\n\\n\\n\\n\\n\\n\\nentities responsible for authorship \"}]","[{\"text\":\"of the modifications in the\\n\\n\\n\\n\\n\\n\\n\\n\\nModified Version, together with at least five of the principal\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"authors of the Document (all of its principal authors, if it has\\n\\n\\n\\n\\n\\n\\n\\n\\nfewer than five), unless they release \"}]","[{\"text\":\"you from this requirement.\\n\\n\\n\\n\\n3.  State on the Title page the name of the publisher of the\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Modified Version, as the publisher.\\n\\n\\n\\n\\n4.  Preserve all the copyright notices of the Document.\\n\\n\\n\\n\\n5.  Add an \"}]","[{\"text\":\"appropriate copyright notice for your modifications\\n\\n\\n\\n\\n\\n\\n\\n\\nadjacent to the other copyright notices.\\n\\n\\n\\n\\n\"}]","[{\"text\":\"6.  Include, immediately after the copyright notices, a license\\n\\n\\n\\n\\n\\n\\n\\n\\nnotice giving the public permission \"}]","[{\"text\":\"to use the Modified Version\\n\\n\\n\\n\\n\\n\\n\\n\\nunder the terms of this License, in the form shown in the\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Addendum below.\\n\\n\\n\\n\\n7.  Preserve in that license notice the full lists of Invariant\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Sections and required Cover Texts given in the Document’s\\n\\n\\n\\n\\n\\n\\n\\n\\nlicense notice.\\n\\n\\n\\n\\n\"}]","[{\"text\":\"8.  Include an unaltered copy of this License.\\n\\n\\n\\n\\n9.  Preserve the section Entitled “History”, Preserve its Title, and\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"add to it an item stating at least the title, year, new authors,\\n\\n\\n\\n\\n\\n\\n\\n\\nand publisher of the Modified Version \"}]","[{\"text\":\"as given on the Title\\n\\n\\n\\n\\n\\n\\n\\n\\nPage. If there is no section Entitled “History” in the Document,\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"create one stating the title, year, authors, and publisher of\\n\\n\\n\\n\\n\\n\\n\\n\\nthe Document as given on its Title \"}]","[{\"text\":\"Page, then add an item\\n\\n\\n\\n\\n\\n\\n\\n\\ndescribing the Modified Version as stated in the previous\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"sentence.\\n\\n\\n\\n\\n10. Preserve the network location, if any, given in the Document for\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"public access to a Transparent copy of the Document, and\\n\\n\\n\\n\\n\\n\\n\\n\\nlikewise the network locations given in the Document for\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"previous versions it was based on. These may be placed in the\\n\\n\\n\\n\\n\\n\\n\\n\\n“History” section. You may omit a \"}]","[{\"text\":\"network location for a work\\n\\n\\n\\n\\n\\n\\n\\n\\nthat was published at least four years before the Document\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"itself, or if the original publisher of the version it refers to\\n\\n\\n\\n\\n\\n\\n\\n\\ngives permission.\\n\\n\\n\\n\\n\"}]","[{\"text\":\"11. For any section Entitled “Acknowledgements” or “Dedications”,\\n\\n\\n\\n\\n\\n\\n\\n\\nPreserve the Title of the section, \"}]","[{\"text\":\"and preserve in the section\\n\\n\\n\\n\\n\\n\\n\\n\\nall the substance and tone of each of the contributor\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"acknowledgements and/or dedications given therein.\\n\\n\\n\\n\\n12. Preserve all the Invariant Sections of the Document, unaltered\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"in their text and in their titles. Section numbers or the\\n\\n\\n\\n\\n\\n\\n\\n\\nequivalent are not considered part of \"}]","[{\"text\":\"the section titles.\\n\\n\\n\\n\\n13. Delete any section Entitled “Endorsements”. Such a section may\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"not be included in the Modified Version.\\n\\n\\n\\n\\n14. Do not retitle any existing section to be Entitled\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"“Endorsements” or to conflict in title with any Invariant\\n\\n\\n\\n\\n\\n\\n\\n\\nSection.\\n\\n\\n\"}]","[{\"text\":\"15. Preserve any Warranty Disclaimers.\\n\\n\\n\\n\\n\\nIf the Modified Version includes new front-matter sections or\\n\\n\\n\\n\\n\"}]","[{\"text\":\"appendices that qualify as Secondary Sections and contain no\\n\\n\\n\\n\\nmaterial copied from the Document, you may at your option designate\\n\\n\\n\\n\\n\"}]","[{\"text\":\"some or all of these sections as invariant. To do this, add their\\n\\n\\n\\n\\ntitles to the list of Invariant Sections in the Modified Version’s\\n\\n\\n\\n\\n\"}]","[{\"text\":\"license notice. These titles must be distinct from any other section\\n\\n\\n\\n\\ntitles.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"You may add a section Entitled “Endorsements”, provided it contains\\n\\n\\n\\n\\nnothing but endorsements of your Modified Version by various\\n\\n\\n\\n\\n\"}]","[{\"text\":\"parties—for example, statements of peer review or that the text has\\n\\n\\n\\n\\nbeen approved by an organization as the authoritative definition of\\n\\n\\n\\n\"}]","[{\"text\":\"a standard.\\n\\n\\n\\n\\n\\nYou may add a passage of up to five words as a Front-Cover Text, and\\n\\n\\n\\n\\n\"}]","[{\"text\":\"a passage of up to 25 words as a Back-Cover Text, to the end of the\\n\\n\\n\\n\\nlist of Cover Texts in the Modified Version. Only one passage of\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Front-Cover Text and one of Back-Cover Text may be added by (or\\n\\n\\n\\n\\nthrough arrangements made by) any one entity. If the Document\\n\\n\\n\\n\\n\"}]","[{\"text\":\"already includes a cover text for the same cover, previously added\\n\\n\\n\\n\\nby you or by arrangement made by the same entity you are acting on\\n\\n\\n\\n\\n\"}]","[{\"text\":\"behalf of, you may not add another; but you may replace the old one,\\n\\n\\n\\n\\non explicit permission from the previous publisher that added the\\n\\n\\n\\n\"}]","[{\"text\":\"old one.\\n\\n\\n\\n\\n\\nThe author(s) and publisher(s) of the Document do not by this\\n\\n\\n\\n\\n\"}]","[{\"text\":\"License give permission to use their names for publicity for or to\\n\\n\\n\\n\\nassert or imply endorsement of any Modified Version.\\n\\n6.  COMBINING DOCUMENTS\\n\\n\\n\\n\\n\"}]","[{\"text\":\"You may combine the Document with other documents released under\\n\\n\\n\\n\\nthis License, under the terms defined in section 4 above for\\n\\n\\n\\n\\n\"}]","[{\"text\":\"modified versions, provided that you include in the combination all\\n\\n\\n\\n\\nof the Invariant Sections of all of the original documents,\\n\\n\\n\\n\\n\"}]","[{\"text\":\"unmodified, and list them all as Invariant Sections of your combined\\n\\n\\n\\n\\nwork in its license notice, and that you preserve all their Warranty\\n\\n\\n\\n\"}]","[{\"text\":\"Disclaimers.\\n\\n\\n\\n\\n\\nThe combined work need only contain one copy of this License, and\\n\\n\\n\\n\\n\"}]","[{\"text\":\"multiple identical Invariant Sections may be replaced with a single\\n\\n\\n\\n\\ncopy. If there are multiple Invariant Sections with the same name\\n\\n\\n\\n\\n\"}]","[{\"text\":\"but different contents, make the title of each such section unique\\n\\n\\n\\n\\nby adding at the end of it, in parentheses, the name of the original\\n\\n\\n\\n\\n\"}]","[{\"text\":\"author or publisher of that section if known, or else a unique\\n\\n\\n\\n\\nnumber. Make the same adjustment to the section titles in the list\\n\\n\\n\\n\"}]","[{\"text\":\"of Invariant Sections in the license notice of the combined work.\\n\\n\\n\\n\\n\\nIn the combination, you must combine any sections Entitled “History”\\n\\n\\n\\n\\n\"}]","[{\"text\":\"in the various original documents, forming one section Entitled\\n\\n\\n\\n\\n“History”; likewise combine any sections Entitled\\n\\n\\n\\n\\n\"}]","[{\"text\":\"“Acknowledgements”, and any sections Entitled “Dedications”. You\\n\\n\\n\\n\\nmust delete all sections Entitled “Endorsements.”\\n\\n7.  COLLECTIONS OF DOCUMENTS\\n\\n\\n\\n\\n\"}]","[{\"text\":\"You may make a collection consisting of the Document and other\\n\\n\\n\\n\\ndocuments released under this License, and replace the individual\\n\\n\\n\\n\\n\"}]","[{\"text\":\"copies of this License in the various documents with a single copy\\n\\n\\n\\n\\nthat is included in the collection, provided that you follow the\\n\\n\\n\\n\\n\"}]","[{\"text\":\"rules of this License for verbatim copying of each of the documents\\n\\n\\n\\n\\nin all other respects.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"You may extract a single document from such a collection, and\\n\\n\\n\\n\\ndistribute it individually under this License, provided you insert a\\n\\n\\n\\n\\n\"}]","[{\"text\":\"copy of this License into the extracted document, and follow this\\n\\n\\n\\n\\nLicense in all other respects regarding verbatim copying of that\\n\\n\\n\\n\"}]","[{\"text\":\"document.\\n\\n8.  AGGREGATION WITH INDEPENDENT WORKS\\n\\n\\n\\n\\n\\nA compilation of the Document or its derivatives with other separate\\n\\n\\n\\n\\n\"}]","[{\"text\":\"and independent documents or works, in or on a volume of a storage\\n\\n\\n\\n\\nor distribution medium, is called an “aggregate” if the copyright\\n\\n\\n\\n\\n\"}]","[{\"text\":\"resulting from the compilation is not used to limit the legal rights\\n\\n\\n\\n\\nof the compilation’s users beyond what the individual works permit.\\n\\n\\n\\n\\n\"}]","[{\"text\":\"When the Document is included in an aggregate, this License does not\\n\\n\\n\\n\\napply to the other works in the aggregate which are not themselves\\n\\n\\n\\n\"}]","[{\"text\":\"derivative works of the Document.\\n\\n\\n\\n\\n\\nIf the Cover Text requirement of section 3 is applicable to these\\n\\n\\n\\n\\n\"}]","[{\"text\":\"copies of the Document, then if the Document is less than one half\\n\\n\\n\\n\\nof the entire aggregate, the Document’s Cover Texts may be placed on\\n\\n\\n\\n\\n\"}]","[{\"text\":\"covers that bracket the Document within the aggregate, or the\\n\\n\\n\\n\\nelectronic equivalent of covers if the Document is in electronic\\n\\n\\n\\n\\n\"}]","[{\"text\":\"form. Otherwise they must appear on printed covers that bracket the\\n\\n\\n\\n\\nwhole aggregate.\\n\\n9.  TRANSLATION\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Translation is considered a kind of modification, so you may\\n\\n\\n\\n\\ndistribute translations of the Document under the terms of section\\n\\n\\n\\n\\n\"}]","[{\"text\":\"4. Replacing Invariant Sections with translations requires special\\n\\n\\n\\n\\npermission from their copyright holders, but you may include\\n\\n\\n\\n\\n\"}]","[{\"text\":\"translations of some or all Invariant Sections in addition to the\\n\\n\\n\\n\\noriginal versions of these Invariant Sections. You may include a\\n\\n\\n\\n\\n\"}]","[{\"text\":\"translation of this License, and all the license notices in the\\n\\n\\n\\n\\nDocument, and any Warranty Disclaimers, provided that you also\\n\\n\\n\\n\\n\"}]","[{\"text\":\"include the original English version of this License and the\\n\\n\\n\\n\\noriginal versions of those notices and disclaimers. In case of a\\n\\n\\n\\n\\n\"}]","[{\"text\":\"disagreement between the translation and the original version of\\n\\n\\n\\n\\nthis License or a notice or disclaimer, the original version will\\n\\n\\n\\n\"}]","[{\"text\":\"prevail.\\n\\n\\n\\n\\n\\nIf a section in the Document is Entitled “Acknowledgements”,\\n\\n\\n\\n\\n\"}]","[{\"text\":\"“Dedications”, or “History”, the requirement (section 4) to Preserve\\n\\n\\n\\n\\nits Title (section 1) will typically require changing the actual\\n\\n\\n\\n\"}]","[{\"text\":\"title.\\n\\n10. TERMINATION\\n\\n\\n\\n\\n\\nYou may not copy, modify, sublicense, or distribute the Document\\n\\n\\n\\n\\n\"}]","[{\"text\":\"except as expressly provided under this License. Any attempt\\n\\n\\n\\n\\notherwise to copy, modify, sublicense, or distribute it is void, and\\n\\n\\n\\n\"}]","[{\"text\":\"will automatically terminate your rights under this License.\\n\\n\\n\\n\\n\\nHowever, if you cease all violation of this License, then your\\n\\n\\n\\n\\n\"}]","[{\"text\":\"license from a particular copyright holder is reinstated (a)\\n\\n\\n\\n\\nprovisionally, unless and until the copyright holder explicitly and\\n\\n\\n\\n\\n\"}]","[{\"text\":\"finally terminates your license, and (b) permanently, if the\\n\\n\\n\\n\\ncopyright holder fails to notify you of the violation by some\\n\\n\\n\\n\"}]","[{\"text\":\"reasonable means prior to 60 days after the cessation.\\n\\n\\n\\n\\n\\nMoreover, your license from a particular copyright holder is\\n\\n\\n\\n\\n\"}]","[{\"text\":\"reinstated permanently if the copyright holder notifies you of the\\n\\n\\n\\n\\nviolation by some reasonable means, this is the first time you have\\n\\n\\n\\n\\n\"}]","[{\"text\":\"received notice of violation of this License (for any work) from\\n\\n\\n\\n\\nthat copyright holder, and you cure the violation prior to 30 days\\n\\n\\n\\n\"}]","[{\"text\":\"after your receipt of the notice.\\n\\n\\n\\n\\n\\nTermination of your rights under this section does not terminate the\\n\\n\\n\\n\\n\"}]","[{\"text\":\"licenses of parties who have received copies or rights from you\\n\\n\\n\\n\\nunder this License. If your rights have been terminated and not\\n\\n\\n\\n\\n\"}]","[{\"text\":\"permanently reinstated, receipt of a copy of some or all of the same\\n\\n\\n\\n\\nmaterial does not give you any rights to use it.\\n\\n11. FUTURE REVISIONS OF THIS LICENSE\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The Free Software Foundation may publish new, revised versions of\\n\\n\\n\\n\\nthe GNU Free Documentation License from time to time. Such new\\n\\n\\n\\n\\n\"}]","[{\"text\":\"versions will be similar in spirit to the present version, but may\\n\\n\\n\\n\\ndiffer in detail to address new problems or concerns. See\\n\\n\\n\\n\"}]","[{\"text\":\"http://www.gnu.org/copyleft/.\\n\\n\\n\\n\\n\\nEach version of the License is given a distinguishing version\\n\\n\\n\\n\\n\"}]","[{\"text\":\"number. If the Document specifies that a particular numbered version\\n\\n\\n\\n\\nof this License “or any later version” applies to it, you have the\\n\\n\\n\\n\\n\"}]","[{\"text\":\"option of following the terms and conditions either of that\\n\\n\\n\\n\\nspecified version or of any later version that has been published\\n\\n\\n\\n\\n\"}]","[{\"text\":\"(not as a draft) by the Free Software Foundation. If the Document\\n\\n\\n\\n\\ndoes not specify a version number of this License, you may choose\\n\\n\\n\\n\\n\"}]","[{\"text\":\"any version ever published (not as a draft) by the Free Software\\n\\n\\n\\n\\nFoundation. If the Document specifies that a proxy can decide which\\n\\n\\n\\n\\n\"}]","[{\"text\":\"future versions of this License can be used, that proxy’s public\\n\\n\\n\\n\\nstatement of acceptance of a version permanently authorizes you to\\n\\n\\n\\n\"}]","[{\"text\":\"choose that version for the Document.\\n\\n12. RELICENSING\\n\\n\\n\\n\\n\\n“Massive Multiauthor Collaboration Site” (or “MMC Site”) means any\\n\\n\\n\\n\\n\"}]","[{\"text\":\"World Wide Web server that publishes copyrightable works and also\\n\\n\\n\\n\\nprovides prominent facilities for anybody to edit those works. A\\n\\n\\n\\n\\n\"}]","[{\"text\":\"public wiki that anybody can edit is an example of such a server. A\\n\\n\\n\\n\\n“Massive Multiauthor Collaboration” (or “MMC”) contained in the site\\n\\n\\n\\n\"}]","[{\"text\":\"means any set of copyrightable works thus published on the MMC site.\\n\\n\\n\\n\\n\\n“CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0\\n\\n\\n\\n\\n\"}]","[{\"text\":\"license published by Creative Commons Corporation, a not-for-profit\\n\\n\\n\\n\\ncorporation with a principal place of business in San Francisco,\\n\\n\\n\\n\\n\"}]","[{\"text\":\"California, as well as future copyleft versions of that license\\n\\n\\n\\n\\npublished by that same organization.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"“Incorporate” means to publish or republish a Document, in whole or\\n\\n\\n\\n\\nin part, as part of another Document.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"An MMC is “eligible for relicensing” if it is licensed under this\\n\\n\\n\\n\\nLicense, and if all works that were first published under this\\n\\n\\n\\n\\n\"}]","[{\"text\":\"License somewhere other than this MMC, and subsequently incorporated\\n\\n\\n\\n\\nin whole or in part into the MMC, (1) had no cover texts or\\n\\n\\n\\n\\n\"}]","[{\"text\":\"invariant sections, and (2) were thus incorporated prior to November\\n\\n\\n\\n\\n1, 2008.\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The operator of an MMC Site may republish an MMC contained in the\\n\\n\\n\\n\\nsite under CC-BY-SA on the same site at any time before August 1,\\n\\n\\n\\n\"}]","[{\"text\":\"2009, provided the MMC is eligible for relicensing.\\n\\nADDENDUM: How to use this License for your documents\\n\\nTo use this License in a document you have written, include a copy of\\nthe License in the document and put \"}]","[{\"text\":\"the following copyright and license\\nnotices just after the title page:\\n\\n\\n\\n\\n\\n\\n\\nCopyright (C)  year  your name.\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Permission is granted to copy, distribute and/or modify this document\\n\\n\\n\\n\\n\\n\\nunder the terms of the GNU Free Documentation License, Version 1.3\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"or any later version published by the Free Software Foundation;\\n\\n\\n\\n\\n\\n\\nwith no Invariant Sections, no Front-Cover Texts, and no Back-Cover\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Texts.  A copy of the license is included in the section entitled ``GNU\\n\\n\\n\\n\\n\\n\\nFree Documentation License''.\\n\\nIf you have \"}]","[{\"text\":\"Invariant Sections, Front-Cover Texts and Back-Cover Texts,\\nreplace the “with…Texts.” line with this:\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]","[{\"text\":\"with the Invariant Sections being list their titles, with\\n\\n\\n\\n\\n\\n\\n\\n\\nthe Front-Cover Texts being list, and \"}]","[{\"text\":\"with the Back-Cover Texts\\n\\n\\n\\n\\n\\n\\n\\n\\nbeing list.\\n\\nIf you have Invariant Sections \"}]","[{\"text\":\"without Cover Texts, or some other\\ncombination of the three, merge those two alternatives to suit the\\nsituation.\\n\\nIf your document contains nontrivial examples of program code, we\\nrecommend releasing these examples in \"}]","[{\"text\":\"parallel under your choice of free\\nsoftware license, such as the GNU General Public License, to permit\\ntheir use in free software.\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Previous: GNU Free Documentation License, Up: Top   [Contents][Index]\\n\\n\\nIndex\\n\\n\\n\\n------------ \"}]","[{\"text\":\"-----------------------------------------------------------------------------------------\\n\\n\\nJump to:     A   B   C   D   E   F   G   H   I   K   L   M   N   O   P   Q   R   S   T   U   V   W  \\n\\n\"}]","[{\"text\":\"------------ -----------------------------------------------------------------------------------------\\n\\nIndex Entry\\n\\n\\n\\n\\nSection\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nA\\n\\naccessing array elements:\\n\\n\\n\\n\\nAccessing Array \"}]","[{\"text\":\"Elements\\n\\naccessing structure members:\\n\\n\\n\\n\\nAccessing Structure Members\\n\\naccessing union members:\\n\\n\\n\\n\"}]","[{\"text\":\"Accessing Union Members\\n\\narithmetic operators:\\n\\n\\n\\n\\nArithmetic Operators\\n\\narray elements, accessing:\\n\\n\\n\"}]","[{\"text\":\"Accessing Array Elements\\n\\narray subscripts:\\n\\n\\n\\n\\nArray Subscripts\\n\\narrays:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Arrays\\n\\narrays as strings:\\n\\n\\n\\n\\nArrays as Strings\\n\\narrays of structures:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Arrays of Structures\\n\\narrays of unions:\\n\\n\\n\\n\\nArrays of Unions\\n\\narrays, declaring:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Declaring Arrays\\n\\narrays, initializing:\\n\\n\\n\\n\\nInitializing Arrays\\n\\narrays, multidimensional:\\n\\n\\n\\n\"}]","[{\"text\":\"Multidimensional Arrays\\n\\nassignment operators:\\n\\n\\n\\n\\nAssignment Operators\\n\\nauto storage class specifier:\\n\\n\\n\"}]","[{\"text\":\"Storage Class Specifiers\\n\\n------------------------------------------------------------------------\\n\\nB\\n\\nbit fields:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Bit Fields\\n\\nbit shifting:\\n\\n\\n\\n\\nBit Shifting\\n\\nbitwise logical operators:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Bitwise Logical Operators\\n\\nblocks:\\n\\n\\n\\n\\nBlocks\\n\\nbreak statement:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The break Statement\\n\\n------------------------------------------------------------------------\\n\\nC\\n\\ncalling functions:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Calling Functions\\n\\ncasts:\\n\\n\\n\\n\\nType Casts\\n\\nchar data type:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Integer Types\\n\\ncharacter constants:\\n\\n\\n\\n\\nCharacter Constants\\n\\ncomma operator:\\n\\n\\n\\n\"}]","[{\"text\":\"The Comma Operator\\n\\ncomparison operators:\\n\\n\\n\\n\\nComparison Operators\\n\\ncomplex conjugation:\\n\\n\\n\\n\"}]","[{\"text\":\"Complex Conjugation\\n\\ncomplex number types:\\n\\n\\n\\n\\nComplex Number Types\\n\\ncompound statements:\\n\\n\\n\"}]","[{\"text\":\"Blocks\\n\\nconditional expressions:\\n\\n\\n\\n\\nConditional Expressions\\n\\nconjugation:\\n\\n\\n\\n\"}]","[{\"text\":\"Complex Conjugation\\n\\nconst type qualifier:\\n\\n\\n\\n\\nType Qualifiers\\n\\nconstants:\\n\\n\\n\\n\"}]","[{\"text\":\"Constants\\n\\nconstants, character:\\n\\n\\n\\n\\nCharacter Constants\\n\\nconstants, floating point:\\n\\n\\n\\n\"}]","[{\"text\":\"Real Number Constants\\n\\nconstants, integer:\\n\\n\\n\\n\\nInteger Constants\\n\\nconstants, real number:\\n\\n\\n\\n\"}]","[{\"text\":\"Real Number Constants\\n\\ncontinue statement:\\n\\n\\n\\n\\nThe continue Statement\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nD\\n\\ndata types:\\n\\n\\n\\n\\nData Types\\n\\n\"}]","[{\"text\":\"data types, array:\\n\\n\\n\\n\\nArrays\\n\\ndata types, complex number:\\n\\n\\n\\n\\nComplex Number \"}]","[{\"text\":\"Types\\n\\ndata types, enumeration:\\n\\n\\n\\n\\nEnumerations\\n\\ndata types, floating point:\\n\\n\\n\\n\"}]","[{\"text\":\"Real Number Types\\n\\ndata types, integer:\\n\\n\\n\\n\\nInteger Types\\n\\ndata types, pointer:\\n\\n\\n\\n\"}]","[{\"text\":\"Pointers\\n\\ndata types, primitive:\\n\\n\\n\\n\\nPrimitive Types\\n\\ndata types, real number:\\n\\n\\n\\n\"}]","[{\"text\":\"Real Number Types\\n\\ndata types, structure:\\n\\n\\n\\n\\nStructures\\n\\ndata types, union:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Unions\\n\\ndeclarations inside expressions:\\n\\n\\n\\n\\nStatements and Declarations in Expressions\\n\\ndeclarations, function:\\n\\n\\n\"}]","[{\"text\":\"Function Declarations\\n\\ndeclaring arrays:\\n\\n\\n\\n\\nDeclaring Arrays\\n\\ndeclaring enumerations:\\n\\n\\n\\n\"}]","[{\"text\":\"Declaring Enumerations\\n\\ndeclaring pointers:\\n\\n\\n\\n\\nDeclaring Pointers\\n\\ndeclaring string arrays:\\n\\n\\n\\n\"}]","[{\"text\":\"Arrays as Strings\\n\\ndeclaring structure variables:\\n\\n\\n\\n\\nDeclaring Structure Variables\\n\\ndeclaring structure variables after definition:\\n\\n\\n\"}]","[{\"text\":\"Declaring Structure Variables After Definition\\n\\ndeclaring structure variables at definition:\\n\\n\\n\\n\\nDeclaring Structure Variables at Definition\\n\"}]","[{\"text\":\"declaring union variables:\\n\\n\\n\\n\\nDeclaring Union Variables\\n\\ndeclaring union variables after definition:\\n\\n\\n\\n\"}]","[{\"text\":\"Declaring Union Variables After Definition\\n\\ndeclaring union variables at definition:\\n\\n\\n\\n\\nDeclaring Union Variables at Definition\\n\"}]","[{\"text\":\"decrement operator:\\n\\n\\n\\n\\nIncrementing and Decrementing\\n\\ndefining enumerations:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Defining Enumerations\\n\\ndefining structures:\\n\\n\\n\\n\\nDefining Structures\\n\\ndefining unions:\\n\\n\\n\\n\"}]","[{\"text\":\"Defining Unions\\n\\ndefinitions, function:\\n\\n\\n\\n\\nFunction Definitions\\n\\ndivision, integer:\\n\\n\\n\\n\"}]","[{\"text\":\"Signed Integer Division\\n\\ndo statement:\\n\\n\\n\\n\\nThe do Statement\\n\\ndouble data type:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Real Number Types\\n\\n------------------------------------------------------------------------\\n\\nE\\n\\nelse statements:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The if Statement\\n\\nenumerations:\\n\\n\\n\\n\\nEnumerations\\n\\nenumerations, declaring:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Declaring Enumerations\\n\\nenumerations, defining:\\n\\n\\n\\n\\nDefining Enumerations\\n\\nenumerations, incomplete:\\n\\n\\n\"}]","[{\"text\":\"Incomplete Types\\n\\nexit status:\\n\\n\\n\\n\\nThe main Function\\n\\nEXIT_FAILURE:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The main Function\\n\\nEXIT_SUCCESS:\\n\\n\\n\\n\\nThe main Function\\n\\nexpression statements:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Expression Statements\\n\\nexpressions:\\n\\n\\n\\n\\nExpressions\\n\\nexpressions containing statements:\\n\\n\\n\\n\"}]","[{\"text\":\"Statements and Declarations in Expressions\\n\\nexpressions, conditional:\\n\\n\\n\\n\\nConditional Expressions\\n\\nextern storage \"}]","[{\"text\":\"class specifier:\\n\\n\\n\\n\\nStorage Class Specifiers\\n\\n------------------------------------------------------------------------\\n\\nF\\n\"}]","[{\"text\":\"fields, bit:\\n\\n\\n\\n\\nBit Fields\\n\\nfloat data type:\\n\\n\\n\\n\\nReal Number Types\\n\\n\"}]","[{\"text\":\"floating point constants:\\n\\n\\n\\n\\nReal Number Constants\\n\\nfloating point types:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Real Number Types\\n\\nfor statement:\\n\\n\\n\\n\\nThe for Statement\\n\\nfunction calls, as expressions:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Function Calls as Expressions\\n\\nfunction declarations:\\n\\n\\n\\n\\nFunction Declarations\\n\\nfunction definitions:\\n\\n\\n\"}]","[{\"text\":\"Function Definitions\\n\\nfunction parameter lists, variable length:\\n\\n\\n\\n\\nVariable Length Parameter Lists\\n\\nfunction \"}]","[{\"text\":\"parameters:\\n\\n\\n\\n\\nFunction Parameters\\n\\nfunction pointers, calling through:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Calling Functions Through Function Pointers\\n\\nfunction, main:\\n\\n\\n\\n\\nThe main Function\\n\\nfunctions:\\n\\n\\n\\n\"}]","[{\"text\":\"Functions\\n\\nfunctions, calling:\\n\\n\\n\\n\\nCalling Functions\\n\\nfunctions, nested:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Nested Functions\\n\\nfunctions, recursive:\\n\\n\\n\\n\\nRecursive Functions\\n\\nfunctions, static:\\n\\n\\n\\n\"}]","[{\"text\":\"Static Functions\\n\\n------------------------------------------------------------------------\\n\\nG\\n\\ngoto statement:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The goto Statement\\n\\n------------------------------------------------------------------------\\n\\nH\\n\\nhello program:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"A Sample Program\\n\\nhello.c:\\n\\n\\n\\n\\nhello.c\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"I\\n\\nidentifiers:\\n\\n\\n\\n\\nIdentifiers\\n\\nif statements:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The if Statement\\n\\nincomplete types:\\n\\n\\n\\n\\nIncomplete Types\\n\\nincrement operator:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Incrementing and Decrementing\\n\\nindirect member access operator:\\n\\n\\n\\n\\nMember Access Expressions\\n\\ninitializing arrays:\\n\\n\\n\"}]","[{\"text\":\"Initializing Arrays\\n\\ninitializing pointers:\\n\\n\\n\\n\\nInitializing Pointers\\n\\ninitializing string arrays:\\n\\n\\n\"}]","[{\"text\":\"Arrays as Strings\\n\\ninitializing structure members:\\n\\n\\n\\n\\nInitializing Structure Members\\n\\ninitializing union members:\\n\\n\\n\\n\"}]","[{\"text\":\"Initializing Union Members\\n\\nint data type:\\n\\n\\n\\n\\nInteger Types\\n\\ninteger constants:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Integer Constants\\n\\ninteger overflow:\\n\\n\\n\\n\\nInteger Overflow Basics\\n\\ninteger overflow:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Signed Overflow Examples\\n\\ninteger overflow:\\n\\n\\n\\n\\nSigned Overflow Advice\\n\\ninteger types:\\n\\n\\n\\n\"}]","[{\"text\":\"Integer Types\\n\\n------------------------------------------------------------------------\\n\\nK\\n\\nkeywords:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Keywords\\n\\n------------------------------------------------------------------------\\n\\nL\\n\\nlabeled statements:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Labels\\n\\nlabels:\\n\\n\\n\\n\\nLabels\\n\\nlexical elements:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Lexical Elements\\n\\nlogical operators:\\n\\n\\n\\n\\nLogical Operators\\n\\nlogical operators, bitwise:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Bitwise Logical Operators\\n\\nlong double data type:\\n\\n\\n\\n\\nReal Number Types\\n\\nlong int data type:\\n\\n\\n\\n\"}]","[{\"text\":\"Integer Types\\n\\nlong long int data type:\\n\\n\\n\\n\\nInteger Types\\n\\nloop induction:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Optimization and Wraparound\\n\\n------------------------------------------------------------------------\\n\\nM\\n\\nmacros, statements in expressions:\\n\\n\\n\\n\"}]","[{\"text\":\"Statements and Declarations in Expressions\\n\\nmain function:\\n\\n\\n\\n\\nThe main Function\\n\\nmember access expressions:\\n\\n\\n\\n\"}]","[{\"text\":\"Member Access Expressions\\n\\nmultidimensional arrays:\\n\\n\\n\\n\\nMultidimensional Arrays\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nN\\n\\nnested functions:\\n\\n\\n\\n\\nNested Functions\\n\\n\"}]","[{\"text\":\"null statement:\\n\\n\\n\\n\\nThe Null Statement\\n\\n------------------------------------------------------------------------\\n\\nO\\n\\n\"}]","[{\"text\":\"operator precedence:\\n\\n\\n\\n\\nOperator Precedence\\n\\noperator, decrement:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Incrementing and Decrementing\\n\\noperator, increment:\\n\\n\\n\\n\\nIncrementing and Decrementing\\n\\noperators:\\n\\n\\n\\n\"}]","[{\"text\":\"Expressions\\n\\noperators as lexical elements:\\n\\n\\n\\n\\nOperators\\n\\noperators, arithmetic:\\n\\n\\n\\n\"}]","[{\"text\":\"Arithmetic Operators\\n\\noperators, assignment:\\n\\n\\n\\n\\nAssignment Operators\\n\\noperators, comparison:\\n\\n\\n\"}]","[{\"text\":\"Comparison Operators\\n\\noverflow, signed integer:\\n\\n\\n\\n\\nInteger Overflow Basics\\n\\noverflow, signed integer:\\n\\n\\n\"}]","[{\"text\":\"Signed Overflow Examples\\n\\noverflow, signed integer:\\n\\n\\n\\n\\nSigned Overflow Advice\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nP\\n\\nparameters lists, variable length:\\n\\n\\n\\n\\nVariable Length \"}]","[{\"text\":\"Parameter Lists\\n\\nparameters, function:\\n\\n\\n\\n\\nFunction Parameters\\n\\npointer operators:\\n\\n\\n\\n\"}]","[{\"text\":\"Pointer Operators\\n\\npointers:\\n\\n\\n\\n\\nPointers\\n\\npointers to structures:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Pointers to Structures\\n\\npointers to unions:\\n\\n\\n\\n\\nPointers to Unions\\n\\npointers, declaring:\\n\\n\\n\\n\"}]","[{\"text\":\"Declaring Pointers\\n\\npointers, initializing:\\n\\n\\n\\n\\nInitializing Pointers\\n\\nprecedence, operator:\\n\\n\\n\\n\"}]","[{\"text\":\"Operator Precedence\\n\\npreface:\\n\\n\\n\\n\\nPreface\\n\\nprimitive data types:\\n\\n\\n\\n\"}]","[{\"text\":\"Primitive Types\\n\\nprogram structure:\\n\\n\\n\\n\\nProgram Structure\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"Q\\n\\nqualifiers, type:\\n\\n\\n\\n\\nType Qualifiers\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"R\\n\\nreal number constants:\\n\\n\\n\\n\\nReal Number Constants\\n\\nreal number types:\\n\\n\\n\\n\"}]","[{\"text\":\"Real Number Types\\n\\nrecursive functions:\\n\\n\\n\\n\\nRecursive Functions\\n\\nregister storage class specifier:\\n\\n\\n\\n\"}]","[{\"text\":\"Storage Class Specifiers\\n\\nrenaming types:\\n\\n\\n\\n\\nRenaming Types\\n\\nreturn statement:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The return Statement\\n\\nreturn value of main:\\n\\n\\n\\n\\nThe main Function\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nS\\n\\nsample program:\\n\\n\\n\\n\\nA Sample Program\\n\\n\"}]","[{\"text\":\"scope:\\n\\n\\n\\n\\nScope\\n\\nseparators:\\n\\n\\n\\n\\nSeparators\\n\\n\"}]","[{\"text\":\"sequence point:\\n\\n\\n\\n\\nSequence Points\\n\\nshifting:\\n\\n\\n\\n\\nBit Shifting\\n\\n\"}]","[{\"text\":\"short int data type:\\n\\n\\n\\n\\nInteger Types\\n\\nside effect:\\n\\n\\n\\n\\nSide Effects\\n\"}]","[{\"text\":\"side effects, macro argument:\\n\\n\\n\\n\\nStatements and Declarations in Expressions\\n\\nsigned char data type:\\n\\n\\n\\n\"}]","[{\"text\":\"Integer Types\\n\\nsigned integer overflow:\\n\\n\\n\\n\\nInteger Overflow Basics\\n\\nsigned integer overflow:\\n\\n\\n\\n\"}]","[{\"text\":\"Signed Overflow Examples\\n\\nsigned integer overflow:\\n\\n\\n\\n\\nSigned Overflow Advice\\n\\nsize of structures:\\n\\n\\n\"}]","[{\"text\":\"Size of Structures\\n\\nsize of unions:\\n\\n\\n\\n\\nSize of Unions\\n\\nsizeof operator:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The sizeof Operator\\n\\nspecifiers, storage class:\\n\\n\\n\\n\\nStorage Class Specifiers\\n\\nstatement, null:\\n\\n\\n\\n\"}]","[{\"text\":\"The Null Statement\\n\\nstatements:\\n\\n\\n\\n\\nStatements\\n\\nstatements inside expressions:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Statements and Declarations in Expressions\\n\\nstatements, expression:\\n\\n\\n\\n\\nExpression Statements\\n\\nstatements, \"}]","[{\"text\":\"labeled:\\n\\n\\n\\n\\nLabels\\n\\nstatic functions:\\n\\n\\n\\n\\nStatic Functions\\n\\n\"}]","[{\"text\":\"static linkage:\\n\\n\\n\\n\\nStatic Functions\\n\\nstatic storage class specifier:\\n\\n\\n\\n\\nStorage Class \"}]","[{\"text\":\"Specifiers\\n\\nstorage class specifiers:\\n\\n\\n\\n\\nStorage Class Specifiers\\n\\nstring arrays, declaring:\\n\\n\\n\\n\"}]","[{\"text\":\"Arrays as Strings\\n\\nstring arrays, initializing:\\n\\n\\n\\n\\nArrays as Strings\\n\\nstring constants:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"String Constants\\n\\nstring literals:\\n\\n\\n\\n\\nString Constants\\n\\nstrings, arrays as:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Arrays as Strings\\n\\nstructure members, accessing:\\n\\n\\n\\n\\nAccessing Structure Members\\n\\nstructure members, initializing:\\n\\n\\n\\n\"}]","[{\"text\":\"Initializing Structure Members\\n\\nstructure variables, declaring:\\n\\n\\n\\n\\nDeclaring Structure Variables\\n\\nstructure variables, declaring after \"}]","[{\"text\":\"definition:\\n\\n\\n\\n\\nDeclaring Structure Variables After Definition\\n\\nstructure variables, declaring at definition:\\n\\n\\n\\n\"}]","[{\"text\":\"Declaring Structure Variables at Definition\\n\\nstructure, program:\\n\\n\\n\\n\\nProgram Structure\\n\\nstructures:\\n\\n\\n\\n\"}]","[{\"text\":\"Structures\\n\\nstructures, arrays of:\\n\\n\\n\\n\\nArrays of Structures\\n\\nstructures, defining:\\n\\n\\n\\n\"}]","[{\"text\":\"Defining Structures\\n\\nstructures, incomplete:\\n\\n\\n\\n\\nIncomplete Types\\n\\nstructures, pointers to:\\n\\n\\n\\n\"}]","[{\"text\":\"Pointers to Structures\\n\\nstructures, size of:\\n\\n\\n\\n\\nSize of Structures\\n\\nswitch statement:\\n\\n\\n\\n\"}]","[{\"text\":\"The switch Statement\\n\\nsystem.h:\\n\\n\\n\\n\\nsystem.h\\n\\n------------------------------------------------------------------------\\n\"}]","[{\"text\":\"T\\n\\nternary operator:\\n\\n\\n\\n\\nConditional Expressions\\n\\ntype casts:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Type Casts\\n\\ntype qualifiers:\\n\\n\\n\\n\\nType Qualifiers\\n\\ntypedef statement:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"The typedef Statement\\n\\ntypes:\\n\\n\\n\\n\\nData Types\\n\\ntypes, array:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Arrays\\n\\ntypes, complex number:\\n\\n\\n\\n\\nComplex Number Types\\n\\ntypes, enumeration:\\n\\n\\n\\n\"}]","[{\"text\":\"Enumerations\\n\\ntypes, floating point:\\n\\n\\n\\n\\nReal Number Types\\n\\ntypes, incomplete:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Incomplete Types\\n\\ntypes, integer:\\n\\n\\n\\n\\nInteger Types\\n\\ntypes, pointer:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Pointers\\n\\ntypes, primitive:\\n\\n\\n\\n\\nPrimitive Types\\n\\ntypes, real number:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Real Number Types\\n\\ntypes, renaming:\\n\\n\\n\\n\\nRenaming Types\\n\\ntypes, structure:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Structures\\n\\ntypes, union:\\n\\n\\n\\n\\nUnions\\n\\n------------------------------------------------------------------------\\n\\n\"}]","[{\"text\":\"U\\n\\nunion members, accessing:\\n\\n\\n\\n\\nAccessing Union Members\\n\\nunion members, initializing:\\n\\n\\n\\n\"}]","[{\"text\":\"Initializing Union Members\\n\\nunion variables, declaring:\\n\\n\\n\\n\\nDeclaring Union Variables\\n\\nunion variables, declaring after \"}]","[{\"text\":\"definition:\\n\\n\\n\\n\\nDeclaring Union Variables After Definition\\n\\nunion variables, declaring at definition:\\n\\n\\n\\n\"}]","[{\"text\":\"Declaring Union Variables at Definition\\n\\nunions:\\n\\n\\n\\n\\nUnions\\n\\nunions, arrays of:\\n\\n\\n\\n\"}]","[{\"text\":\"Arrays of Unions\\n\\nunions, defining:\\n\\n\\n\\n\\nDefining Unions\\n\\nunions, incomplete:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Incomplete Types\\n\\nunions, pointers to:\\n\\n\\n\\n\\nPointers to Unions\\n\\nunions, size of:\\n\\n\\n\\n\\n\"}]","[{\"text\":\"Size of Unions\\n\\nunsigned char data type:\\n\\n\\n\\n\\nInteger Types\\n\\nunsigned int data type:\\n\\n\\n\\n\"}]","[{\"text\":\"Integer Types\\n\\nunsigned long int data type:\\n\\n\\n\\n\\nInteger Types\\n\\nunsigned long long int data type:\\n\\n\\n\\n\"}]","[{\"text\":\"Integer Types\\n\\nunsigned short int data type:\\n\\n\\n\\n\\nInteger Types\\n\\nunspecified behaviour:\\n\\n\\n\\n\"}]","[{\"text\":\"Sequence Points Constrain Expressions\\n\\n------------------------------------------------------------------------\\n\\nV\\n\\nvariable length parameter lists:\\n\\n\\n\\n\"}]","[{\"text\":\"Variable Length Parameter Lists\\n\\nvolatile type qualifier:\\n\\n\\n\\n\\nType Qualifiers\\n\\n\"}]","[{\"text\":\"------------------------------------------------------------------------\\n\\nW\\n\\nwhile statement:\\n\\n\\n\\n\\nThe while Statement\\n\"}]","[{\"text\":\"white space:\\n\\n\\n\\n\\nWhite Space\\n\\nwraparound arithmetic:\\n\\n\\n\\n\\nInteger Overflow \"}]","[{\"text\":\"Basics\\n\\nwraparound arithmetic:\\n\\n\\n\\n\\nSigned Overflow Examples\\n\\nwraparound arithmetic:\\n\\n\\n\\n\"}]","[{\"text\":\"Signed Overflow Advice\\n\\n------------------------------------------------------------------------\\n\\n\\n\\n------------ \"}]","[{\"text\":\"-----------------------------------------------------------------------------------------\\n\\n\\nJump to:     A   B   C   D   E   F   G   H   I   K   L   M   N   O   P   Q   R   S   T   U   V   W  \\n\\n\"}]","[{\"text\":\"------------ -----------------------------------------------------------------------------------------\\n\\n------------------------------------------------------------------------\\n\\nFootnotes\\n\\n\"}]","[{\"text\":\"(1)\\n\\nC++ also has complex number support, but it is incompatible with the ISO\\nC99 types.\\n\\n(2)\\n\\na full declarator is a declaration of a function or an object which is\\n\"}]","[{\"text\":\"not part of another object\\n\\n(3)\\n\\nHowever if for example MAX is INT_MAX and x is of type int, we clearly\\nhave a problem with overflow. See Overflow.\\n\\n(4)\\n\"}]","[{\"text\":\"Rarely, argv[0] can be a null pointer (in this case argc is 0) or\\nargv[0][0] can be the null character. In any case, argv[argc] is a null\\npointer.\\n\\n------------------------------------------------------------------------\\n\"}]"]} 1
